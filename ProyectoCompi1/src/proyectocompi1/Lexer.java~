/* The following code was generated by JFlex 1.6.1 */

package proyectocompi1;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/proyectocompi1/Vbasic.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\46\1\53\1\53\1\53\22\0\1\45\1\0\1\50"+
    "\3\0\1\51\1\52\1\4\1\5\1\36\1\37\1\26\1\37\1\21"+
    "\1\36\12\40\2\0\1\34\1\35\1\33\2\0\1\15\1\3\1\17"+
    "\1\16\1\11\1\24\1\27\1\30\1\43\2\41\1\6\1\32\1\10"+
    "\1\20\1\23\1\41\1\13\1\42\1\14\1\2\1\25\1\12\1\31"+
    "\1\22\1\41\4\0\1\44\1\0\1\15\1\3\1\17\1\16\1\11"+
    "\1\24\1\27\1\30\1\43\2\41\1\6\1\32\1\10\1\20\1\23"+
    "\1\41\1\13\1\42\1\14\1\2\1\25\1\12\1\31\1\22\1\41"+
    "\12\0\1\53\252\0\2\7\115\0\1\1\u1ea8\0\1\53\1\53\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\3\1\4\1\2\1\1\11\2"+
    "\1\5\2\2\1\6\1\2\2\7\1\10\1\11\1\12"+
    "\1\13\2\2\1\14\1\15\1\16\1\1\1\17\2\0"+
    "\4\2\1\0\2\2\1\0\1\20\10\2\1\21\2\2"+
    "\1\22\1\2\1\22\1\0\1\23\2\2\1\24\3\2"+
    "\1\7\3\2\1\20\1\0\1\25\1\26\1\0\5\2"+
    "\1\0\2\2\1\0\1\2\1\27\1\0\1\2\1\30"+
    "\1\0\1\2\1\0\6\2\2\31\3\2\1\32\1\26"+
    "\2\2\3\0\1\2\1\0\4\2\1\33\1\34\1\33"+
    "\1\0\1\35\2\36\1\0\1\2\1\0\2\2\1\37"+
    "\1\40\1\41\1\42\1\0\2\2\1\0\2\2\2\0"+
    "\2\43\2\44\1\2\1\45\1\0\2\46\2\47\1\2"+
    "\1\0\2\2\1\40\2\2\1\0\1\50\1\2\1\0"+
    "\1\51\1\0\1\2\1\0\1\2\1\50\1\2\1\0"+
    "\2\52\1\0\1\2\1\0\2\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\54\0\54\0\334"+
    "\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\54\0\u02c0\0\u02ec\0\54\0\u0318\0\u0344"+
    "\0\u0370\0\54\0\54\0\54\0\u039c\0\u03c8\0\u03f4\0\54"+
    "\0\u0420\0\54\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\54\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u02c0"+
    "\0\u07bc\0\u07e8\0\54\0\u0814\0\u02c0\0\u0840\0\u02c0\0\u086c"+
    "\0\u0898\0\u02c0\0\u08c4\0\u08f0\0\u091c\0\54\0\u0948\0\u0974"+
    "\0\u09a0\0\u02c0\0\u044c\0\u09cc\0\54\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u02c0\0\u0bdc\0\u0c08\0\u02c0\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\54\0\u02c0\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u02c0\0\u02c0\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\54"+
    "\0\u02c0\0\u02c0\0\u1028\0\u02c0\0\54\0\u02c0\0\u1054\0\u1080"+
    "\0\u10ac\0\u10d8\0\u1104\0\u02c0\0\u02c0\0\u02c0\0\u02c0\0\u1130"+
    "\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\54"+
    "\0\u02c0\0\54\0\u02c0\0\u1290\0\u02c0\0\u12bc\0\54\0\u02c0"+
    "\0\54\0\u02c0\0\u12e8\0\u1314\0\u1340\0\u136c\0\54\0\u1398"+
    "\0\u13c4\0\u13f0\0\54\0\u141c\0\u1448\0\u02c0\0\u1474\0\u14a0"+
    "\0\u14cc\0\u14f8\0\u02c0\0\u1524\0\u1550\0\54\0\u02c0\0\u157c"+
    "\0\u15a8\0\u15d4\0\54\0\u02c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\24\1\26\2\24\1\27"+
    "\1\24\1\30\1\31\1\32\1\33\1\34\1\35\1\24"+
    "\1\36\1\37\1\2\1\40\1\41\1\42\1\43\1\2"+
    "\1\44\57\0\1\45\11\0\1\46\41\0\2\24\2\0"+
    "\1\24\1\0\1\47\10\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\11\0\2\24\2\0\1\24\1\0\1\24"+
    "\1\50\6\24\1\51\1\0\1\52\3\24\1\0\4\24"+
    "\5\0\5\24\11\0\2\24\2\0\1\24\1\53\10\24"+
    "\1\54\1\0\4\24\1\0\4\24\5\0\3\24\1\55"+
    "\1\24\17\0\1\56\13\0\1\57\31\0\2\24\2\0"+
    "\1\24\1\0\1\24\1\60\6\24\1\61\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\11\0\2\24\2\0\1\62"+
    "\1\0\1\63\10\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\3\24\1\64"+
    "\5\24\1\0\4\24\1\0\1\24\1\65\2\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\1\24\1\66"+
    "\7\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\3\24\1\67\4\24\1\70"+
    "\1\0\1\71\3\24\1\0\1\24\1\72\2\24\5\0"+
    "\5\24\10\0\1\73\2\24\2\0\1\24\1\0\1\74"+
    "\10\24\1\0\4\24\1\0\4\24\5\0\2\24\1\75"+
    "\2\24\11\0\2\24\2\0\1\24\1\76\10\24\1\77"+
    "\1\0\4\24\1\0\4\24\5\0\3\24\1\100\1\24"+
    "\11\0\2\24\2\0\1\24\1\0\10\24\1\101\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\11\0\2\24\2\0"+
    "\1\24\1\0\3\24\1\102\5\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\11\0\2\24\2\0\1\24\1\0"+
    "\11\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\1\103\1\24\2\0\1\24\1\0\5\24\1\104\2\24"+
    "\1\105\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\10\24\1\22\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\44\0\1\106\51\0\1\106"+
    "\1\0\1\106\56\0\1\35\15\0\1\107\1\24\2\0"+
    "\1\24\1\0\4\24\1\110\4\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\11\0\2\24\2\0\1\24\1\0"+
    "\1\111\10\24\1\0\2\24\1\112\1\24\1\0\4\24"+
    "\5\0\5\24\55\0\1\41\5\0\46\113\1\0\1\113"+
    "\1\114\3\113\46\44\1\0\5\44\3\0\1\115\63\0"+
    "\1\116\42\0\2\24\2\0\1\24\1\0\4\24\1\117"+
    "\4\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\11\24\1\0\4\24\1\0"+
    "\1\120\3\24\5\0\5\24\11\0\2\24\2\0\1\24"+
    "\1\0\10\24\1\121\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\3\24\1\122"+
    "\5\24\1\0\3\24\1\123\1\0\4\24\5\0\5\24"+
    "\17\0\1\124\45\0\2\24\2\0\1\24\1\0\10\24"+
    "\1\125\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\1\126\10\24\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\23\0\1\127\41\0\2\24"+
    "\2\0\1\24\1\0\11\24\1\0\4\24\1\0\2\24"+
    "\1\130\1\24\5\0\5\24\11\0\2\24\2\0\1\24"+
    "\1\0\4\24\1\131\4\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\10\0\1\132\2\24\2\0\1\24\1\0"+
    "\11\24\1\0\4\24\1\0\4\24\5\0\2\24\1\133"+
    "\2\24\11\0\2\24\2\0\1\24\1\0\6\24\1\134"+
    "\2\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\135\11\24\1\0\4\24\1\0"+
    "\4\24\5\0\3\24\1\136\1\24\11\0\2\24\2\0"+
    "\1\24\1\137\11\24\1\0\4\24\1\0\4\24\5\0"+
    "\3\24\1\140\1\24\11\0\2\24\2\0\1\24\1\0"+
    "\4\24\1\141\1\142\3\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\11\0\1\143\1\24\2\0\1\24\1\0"+
    "\11\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\11\24\1\0\1\24\1\144"+
    "\2\24\1\0\4\24\5\0\5\24\11\0\2\24\2\0"+
    "\1\24\1\0\1\24\1\145\7\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\11\0\2\24\2\0\1\24\1\0"+
    "\6\24\1\102\2\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\41\0\1\146\23\0\2\24\2\0\1\24\1\0"+
    "\11\24\1\0\4\24\1\0\3\24\1\147\5\0\5\24"+
    "\11\0\2\24\2\0\1\24\1\0\1\150\10\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\11\0\2\24\2\0"+
    "\1\24\1\0\1\151\10\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\11\0\2\24\2\0\1\152\1\0\11\24"+
    "\1\0\4\24\1\0\4\24\5\0\5\24\11\0\2\24"+
    "\2\0\1\24\1\0\3\24\1\153\5\24\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\11\0\1\24\1\154\2\0"+
    "\1\24\1\0\11\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\3\24\1\155"+
    "\5\24\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\4\24\1\156\4\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\54\0\1\157\15\0"+
    "\1\160\33\0\1\160\12\0\2\24\2\0\1\24\1\161"+
    "\11\24\1\0\4\24\1\0\4\24\5\0\3\24\1\162"+
    "\1\24\11\0\2\24\2\0\1\24\1\163\11\24\1\0"+
    "\4\24\1\0\4\24\5\0\3\24\1\164\1\24\11\0"+
    "\2\24\2\0\1\165\1\0\11\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\11\0\2\24\2\0\1\24\1\0"+
    "\1\24\1\166\7\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\5\24\1\167"+
    "\3\24\1\0\4\24\1\0\4\24\5\0\5\24\20\0"+
    "\1\170\44\0\2\24\2\0\1\24\1\0\11\24\1\0"+
    "\1\24\1\171\2\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\1\24\1\172\7\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\20\0\1\173\44\0"+
    "\2\24\2\0\1\24\1\0\4\24\1\174\4\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\20\0\1\175\44\0"+
    "\2\24\2\0\1\24\1\0\1\24\1\176\7\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\23\0\1\177\41\0"+
    "\2\24\2\0\1\24\1\0\4\24\1\200\4\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\15\0\1\201\47\0"+
    "\2\24\2\0\1\202\1\0\11\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\11\0\1\203\1\24\2\0\1\24"+
    "\1\0\11\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\11\0\2\24\2\0\1\24\1\0\6\24\1\204\2\24"+
    "\1\0\4\24\1\0\4\24\5\0\5\24\11\0\2\24"+
    "\2\0\1\24\1\0\1\24\1\205\7\24\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\11\0\2\24\2\0\1\24"+
    "\1\0\1\24\1\206\7\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\11\0\2\24\2\0\1\24\1\0\1\207"+
    "\10\24\1\0\4\24\1\0\4\24\5\0\5\24\10\0"+
    "\1\210\2\24\2\0\1\24\1\0\11\24\1\0\4\24"+
    "\1\0\4\24\5\0\2\24\1\211\2\24\11\0\2\24"+
    "\2\0\1\24\1\0\7\24\1\212\1\24\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\10\0\1\213\2\24\2\0"+
    "\1\24\1\0\11\24\1\0\4\24\1\0\4\24\5\0"+
    "\2\24\1\143\2\24\11\0\2\24\2\0\1\24\1\160"+
    "\11\24\1\0\4\24\1\0\4\24\5\0\3\24\1\214"+
    "\1\24\11\0\2\24\2\0\1\24\1\0\1\24\1\215"+
    "\7\24\1\0\4\24\1\0\4\24\5\0\5\24\60\0"+
    "\1\216\12\0\1\217\51\0\1\220\47\0\2\24\2\0"+
    "\1\221\1\0\11\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\17\0\1\222\45\0\2\24\2\0\1\24\1\0"+
    "\1\223\10\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\11\0\2\24\2\0\1\24\1\0\1\24\1\224\7\24"+
    "\1\0\4\24\1\0\4\24\5\0\5\24\11\0\2\24"+
    "\2\0\1\24\1\0\11\24\1\0\2\24\1\225\1\24"+
    "\1\0\4\24\5\0\5\24\11\0\2\24\2\0\1\225"+
    "\1\0\11\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\36\0\1\226\35\0\1\227\44\0\2\24\2\0\1\24"+
    "\1\0\1\24\1\230\7\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\20\0\1\231\44\0\2\24\2\0\1\24"+
    "\1\0\1\24\1\232\7\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\11\0\2\24\2\0\1\24\1\0\3\24"+
    "\1\233\5\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\27\0\1\234\35\0\2\24\2\0\1\24\1\0\10\24"+
    "\1\235\1\0\4\24\1\0\4\24\5\0\5\24\11\0"+
    "\2\24\2\0\1\24\1\0\4\24\1\236\4\24\1\0"+
    "\4\24\1\0\4\24\5\0\5\24\20\0\1\237\44\0"+
    "\2\24\2\0\1\24\1\0\1\240\10\24\1\0\4\24"+
    "\1\0\4\24\5\0\5\24\11\0\2\24\2\0\1\24"+
    "\1\0\11\24\1\0\4\24\1\0\1\241\3\24\5\0"+
    "\5\24\53\0\1\242\36\0\1\243\26\0\2\24\2\0"+
    "\1\24\1\0\5\24\1\244\3\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\20\0\1\245\44\0\2\24\2\0"+
    "\1\24\1\0\1\246\10\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\15\0\1\247\47\0\2\24\2\0\1\250"+
    "\1\0\11\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\11\0\2\24\2\0\1\24\1\251\11\24\1\0\4\24"+
    "\1\0\4\24\5\0\3\24\1\252\1\24\11\0\2\24"+
    "\2\0\1\24\1\0\11\24\1\0\4\24\1\0\1\253"+
    "\3\24\5\0\5\24\11\0\2\24\2\0\1\24\1\0"+
    "\1\24\1\254\7\24\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\55\0\1\255\7\0\2\24\2\0\1\24\1\0"+
    "\1\253\10\24\1\0\4\24\1\0\4\24\5\0\5\24"+
    "\22\0\1\243\51\0\1\256\44\0\2\24\2\0\1\24"+
    "\1\0\1\24\1\257\7\24\1\0\4\24\1\0\4\24"+
    "\5\0\5\24\27\0\1\260\35\0\2\24\2\0\1\24"+
    "\1\0\10\24\1\261\1\0\4\24\1\0\4\24\5\0"+
    "\5\24\11\0\2\24\2\0\1\24\1\0\3\24\1\253"+
    "\5\24\1\0\4\24\1\0\4\24\5\0\5\24\54\0"+
    "\1\262\1\255\1\262\1\113\13\0\1\263\45\0\2\24"+
    "\2\0\1\24\1\0\1\264\10\24\1\0\4\24\1\0"+
    "\4\24\5\0\5\24\54\0\1\262\1\0\1\262\1\113"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5632];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\13\1\1\11\2\1\1\11"+
    "\3\1\3\11\3\1\1\11\1\1\1\11\2\1\2\0"+
    "\4\1\1\0\2\1\1\0\1\11\13\1\1\11\2\1"+
    "\1\0\7\1\1\11\4\1\1\0\1\1\1\11\1\0"+
    "\5\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\6\1\1\11\10\1\3\0\1\1\1\0"+
    "\4\1\1\11\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\6\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\11\1\1\1\11\3\1\1\0\1\11\1\1\1\11"+
    "\2\1\1\0\2\1\1\11\2\1\1\0\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\11"+
    "\1\1\1\0\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
     
    private String extraerCadenaReal() {
        String[] lista = yytext().split(" &_\n");
        String cadena = "";
            for(int i=0; i<lista.length;i++){
                boolean comilla =false;
                int iniciocomilla = 0;
                int finalcomilla = 0;
                for(int j=0; j<lista[i].length();j++){
                    if(comilla){
                        iniciocomilla = j;
                        break;
                    }
                    if(lista[i].charAt(j)=='"'){
                        comilla=true;
                    }
                }
                comilla = false;
                for(int j=lista[i].length()-1; j>=0;j--){
                    if(lista[i].charAt(j)=='"'){
                        comilla=true;
                    }
                    if(comilla){
                        finalcomilla = j;
                        break;
                    }
                }
                cadena+= lista[i].substring(iniciocomilla, finalcomilla);

            }
        return cadena;
    }

    private String revisionPalabraClave(String name){
        String respuesta = "";
        Pattern pat = Pattern.compile("[A-Z][a-z]+");
        Matcher mat = pat.matcher(yytext());
        if (mat.matches()) {
            respuesta = "<"+name+", '"+yytext()+"'>";
        } else {
            respuesta = "Palabra clave->"+yytext().substring(0,1).toUpperCase()
                         +yytext().substring(1,yytext().length()).toLowerCase()+". Error->Linea: "+yyline+", columna: "+yycolumn;
        }
        return respuesta;
    }

    private String revisionPalabraClave2(String name){
        String respuesta = "";
        switch (yytext()) {
 
        case "ByVal":
        respuesta = "<"+name+", '"+yytext()+"'>";
        break;
        case "ByRef":
        respuesta = "<"+name+", '"+yytext()+"'>";
        break;
        default:
        respuesta = "Palabra clave->By"+yytext().substring(2,3).toUpperCase()
                         +yytext().substring(3,yytext().length()).toLowerCase()+". Error->Linea: "+yyline+", columna: "+yycolumn;
        break;
 
        }
    }

   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return 0;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("No se reconoce el token: "+yytext()+". Error->Linea: "+yyline+", columna: "+yycolumn);
            }
          case 44: break;
          case 2: 
            { System.out.println("<IDENTIFICADOR, '"+yytext()+"'>");
            }
          case 45: break;
          case 3: 
            { System.out.println("<ABRIRPARENTESIS>, '"+yytext()+"'>");
            }
          case 46: break;
          case 4: 
            { System.out.println("<CERRARPARENTESIS>, '"+yytext()+"'>");
            }
          case 47: break;
          case 5: 
            { System.out.println("<PUNTO>, '"+yytext()+"'>");
            }
          case 48: break;
          case 6: 
            { System.out.println("<COMA>, '"+yytext()+"'>");
            }
          case 49: break;
          case 7: 
            { System.out.println("<OPREL, '"+yytext()+"'>");
            }
          case 50: break;
          case 8: 
            { System.out.println("<ASIGNACION>, '"+yytext()+"'>");
            }
          case 51: break;
          case 9: 
            { System.out.println("<OPMULT, '"+yytext()+"'>");
            }
          case 52: break;
          case 10: 
            { System.out.println("<OPSUM, '"+yytext()+"'>");
            }
          case 53: break;
          case 11: 
            { System.out.println("<NUMERO, '"+yytext()+"'>");
            }
          case 54: break;
          case 12: 
            { System.out.println("<ESPACIO>, '"+yytext()+"'>");
            }
          case 55: break;
          case 13: 
            { System.out.println("<NEWLINE>");
            }
          case 56: break;
          case 14: 
            { System.out.println("<TAB>");
            }
          case 57: break;
          case 15: 
            { System.out.println("<COMENTARIO, '"+yytext().substring(1)+"'>");
            }
          case 58: break;
          case 16: 
            { System.out.println(revisionPalabraClave("IF"));
            }
          case 59: break;
          case 17: 
            { System.out.println(revisionPalabraClave("TO"));
            }
          case 60: break;
          case 18: 
            { System.out.println(revisionPalabraClave("AS"));
            }
          case 61: break;
          case 19: 
            { System.out.println(revisionPalabraClave("DO"));
            }
          case 62: break;
          case 20: 
            { System.out.println(revisionPalabraClave("OPLOG"));
            }
          case 63: break;
          case 21: 
            { System.out.println("<CADENA, '"+extraerCadenaReal()+"'>");
            }
          case 64: break;
          case 22: 
            { System.out.println(revisionPalabraClave("SUB"));
            }
          case 65: break;
          case 23: 
            { System.out.println(revisionPalabraClave("NOT"));
            }
          case 66: break;
          case 24: 
            { System.out.println(revisionPalabraClave("END"));
            }
          case 67: break;
          case 25: 
            { System.out.println(revisionPalabraClave("DIM"));
            }
          case 68: break;
          case 26: 
            { System.out.println(revisionPalabraClave("FOR"));
            }
          case 69: break;
          case 27: 
            { System.out.println(revisionPalabraClave("LINE"));
            }
          case 70: break;
          case 28: 
            { System.out.println(revisionPalabraClave("LOOP"));
            }
          case 71: break;
          case 29: 
            { System.out.println(revisionPalabraClave("NEXT"));
            }
          case 72: break;
          case 30: 
            { System.out.println(revisionPalabraClave("ELSE"));
            }
          case 73: break;
          case 31: 
            { System.out.println(revisionPalabraClave("READ"));
            }
          case 74: break;
          case 32: 
            { System.out.println(revisionPalabraClave("TRUEFALSE"));
            }
          case 75: break;
          case 33: 
            { System.out.println(revisionPalabraClave("TYPE"));
            }
          case 76: break;
          case 34: 
            { System.out.println(revisionPalabraClave("THEN"));
            }
          case 77: break;
          case 35: 
            { System.out.println(revisionPalabraClave("UNTIL"));
            }
          case 78: break;
          case 36: 
            { System.out.println(revisionPalabraClave("BEGIN"));
            }
          case 79: break;
          case 37: 
            { System.out.println(revisionPalabraClave2("TIPOPARAMETRO"));
            }
          case 80: break;
          case 38: 
            { System.out.println(revisionPalabraClave("WRITE"));
            }
          case 81: break;
          case 39: 
            { System.out.println(revisionPalabraClave("WHILE"));
            }
          case 82: break;
          case 40: 
            { System.out.println(revisionPalabraClave("TIPOVAR"));
            }
          case 83: break;
          case 41: 
            { System.out.println(revisionPalabraClave("RETURN"));
            }
          case 84: break;
          case 42: 
            { System.out.println(revisionPalabraClave("CONSOLE"));
            }
          case 85: break;
          case 43: 
            { System.out.println(revisionPalabraClave("FUNCTION"));
            }
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

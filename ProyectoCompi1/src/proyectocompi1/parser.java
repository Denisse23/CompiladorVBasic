
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi1;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\004\004\000\002\004\003\000\002\004\002\000\002" +
    "\022\006\000\002\022\004\000\002\022\005\000\002\022" +
    "\006\000\002\022\007\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\007\003\000\002\007\004\000\002\006\004\000\002" +
    "\006\002\000\002\005\003\000\002\005\003\000\002\010" +
    "\006\000\002\011\006\000\002\011\002\000\002\012\007" +
    "\000\002\030\003\000\002\030\003\000\002\016\014\000" +
    "\002\016\015\000\002\017\006\000\002\020\010\000\002" +
    "\020\002\000\002\013\026\000\002\013\027\000\002\013" +
    "\014\000\002\013\015\000\002\015\003\000\002\015\005" +
    "\000\002\015\004\000\002\032\004\000\002\033\006\000" +
    "\002\033\002\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\016\004\015\017\010\030\021\051\012\052" +
    "\016\053\006\001\002\000\004\002\001\001\002\000\012" +
    "\002\uffed\051\uffed\052\uffed\053\uffed\001\002\000\024\002" +
    "\uffe6\004\uffe6\017\uffe6\022\uffe6\030\uffe6\037\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\001\002\000\012\002\uffef\051\uffef\052" +
    "\uffef\053\uffef\001\002\000\004\051\134\001\002\000\020" +
    "\002\ufff6\004\015\017\010\030\021\051\012\052\031\053" +
    "\006\001\002\000\024\002\uffe7\004\uffe7\017\uffe7\022\uffe7" +
    "\030\uffe7\037\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000" +
    "\012\002\uffe8\051\012\052\uffe8\053\006\001\002\000\012" +
    "\002\uffe8\051\012\052\uffe8\053\006\001\002\000\004\051" +
    "\056\001\002\000\014\004\015\017\010\030\021\051\012" +
    "\053\006\001\002\000\012\002\uffec\051\uffec\052\uffec\053" +
    "\uffec\001\002\000\012\002\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\001\002\000\004\051\037\001\002\000\012\002\uffee\051" +
    "\uffee\052\uffee\053\uffee\001\002\000\012\002\uffe8\051\012" +
    "\052\uffe8\053\006\001\002\000\004\002\034\001\002\000" +
    "\012\002\uffe8\051\012\052\uffe8\053\006\001\002\000\006" +
    "\002\ufff6\052\031\001\002\000\014\002\uffe8\022\uffe8\051" +
    "\012\052\uffe8\053\006\001\002\000\012\002\uffe9\022\uffe9" +
    "\037\uffe9\052\uffe9\001\002\000\016\002\ufff7\004\015\017" +
    "\010\030\021\051\012\053\006\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufff8\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufff6\052\031\001\002\000\004\002\ufffb" +
    "\001\002\000\004\050\040\001\002\000\004\051\047\001" +
    "\002\000\014\002\uffe3\020\042\051\uffe3\052\uffe3\053\uffe3" +
    "\001\002\000\004\051\044\001\002\000\012\002\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\001\002\000\004\050\040\001\002" +
    "\000\014\002\uffe3\020\042\051\uffe3\052\uffe3\053\uffe3\001" +
    "\002\000\012\002\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002" +
    "\000\004\031\050\001\002\000\004\051\051\001\002\000" +
    "\006\042\054\050\052\001\002\000\016\002\uffe0\006\uffe0" +
    "\020\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\016\002" +
    "\uffe2\006\uffe2\020\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002" +
    "\000\016\002\uffe1\006\uffe1\020\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\001\002\000\004\002\uffff\001\002\000\004\050\057" +
    "\001\002\000\004\005\060\001\002\000\006\006\062\041" +
    "\061\001\002\000\004\051\115\001\002\000\010\051\012" +
    "\052\uffe8\053\006\001\002\000\004\006\064\001\002\000" +
    "\010\051\012\052\uffe8\053\006\001\002\000\004\052\066" +
    "\001\002\000\016\022\uffe8\030\021\037\uffe8\051\012\052" +
    "\uffe8\053\006\001\002\000\004\022\070\001\002\000\004" +
    "\051\071\001\002\000\004\004\072\001\002\000\012\002" +
    "\uffde\051\uffde\052\uffde\053\uffde\001\002\000\004\030\021" +
    "\001\002\000\010\022\ufff4\037\ufff4\052\102\001\002\000" +
    "\016\022\uffe8\030\uffeb\037\uffe8\051\012\052\uffe8\053\006" +
    "\001\002\000\010\051\012\052\uffe8\053\006\001\002\000" +
    "\004\052\066\001\002\000\006\022\ufff5\037\ufff5\001\002" +
    "\000\010\022\uffea\030\uffea\037\uffea\001\002\000\012\022" +
    "\ufff3\037\ufff3\051\012\053\006\001\002\000\006\022\ufff2" +
    "\037\ufff2\001\002\000\012\022\uffeb\037\uffeb\051\012\053" +
    "\006\001\002\000\010\051\012\052\uffe8\053\006\001\002" +
    "\000\004\052\066\001\002\000\006\022\ufff1\037\ufff1\001" +
    "\002\000\004\052\066\001\002\000\004\022\112\001\002" +
    "\000\004\051\113\001\002\000\004\004\114\001\002\000" +
    "\012\002\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002\000\004" +
    "\050\040\001\002\000\006\006\uffdb\020\120\001\002\000" +
    "\004\006\uffdd\001\002\000\004\051\121\001\002\000\004" +
    "\041\122\001\002\000\004\051\123\001\002\000\004\050" +
    "\040\001\002\000\006\006\uffdb\020\120\001\002\000\004" +
    "\006\uffdc\001\002\000\006\002\ufff6\052\031\001\002\000" +
    "\004\002\ufff9\001\002\000\006\002\ufff6\052\031\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffd\001\002\000\004\050\135\001\002\000\004" +
    "\005\136\001\002\000\006\006\137\041\061\001\002\000" +
    "\010\051\215\052\uffe8\053\006\001\002\000\004\006\141" +
    "\001\002\000\010\051\143\052\uffe8\053\006\001\002\000" +
    "\004\052\066\001\002\000\012\031\144\051\uffe7\052\uffe7" +
    "\053\uffe7\001\002\000\004\051\145\001\002\000\006\042" +
    "\054\050\052\001\002\000\010\051\012\052\uffe8\053\006" +
    "\001\002\000\004\052\066\001\002\000\004\037\151\001" +
    "\002\000\004\051\152\001\002\000\014\005\162\043\160" +
    "\050\157\054\154\056\153\001\002\000\020\006\uffce\020" +
    "\uffce\046\uffce\047\uffce\051\uffce\052\uffce\053\uffce\001\002" +
    "\000\020\006\uffcd\020\uffcd\046\uffcd\047\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\001\002\000\020\006\uffcc\020\uffcc\046\204" +
    "\047\205\051\uffcc\052\uffcc\053\uffcc\001\002\000\010\051" +
    "\012\052\uffe8\053\006\001\002\000\022\006\uffd0\013\174" +
    "\020\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\001" +
    "\002\000\020\006\uffcf\020\uffcf\046\uffcf\047\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\001\002\000\010\051\uffd6\052\uffd6\053" +
    "\uffd6\001\002\000\014\006\163\043\160\050\157\054\154" +
    "\056\153\001\002\000\010\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\006\006\uffd1\020\170\001\002\000\004\006\166" +
    "\001\002\000\010\051\uffd5\052\uffd5\053\uffd5\001\002\000" +
    "\004\006\uffd3\001\002\000\004\051\171\001\002\000\012" +
    "\043\160\050\157\054\154\056\153\001\002\000\006\006" +
    "\uffd1\020\170\001\002\000\004\006\uffd2\001\002\000\004" +
    "\050\175\001\002\000\014\006\uffcb\020\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\001\002\000\004\052\177\001\002\000\010" +
    "\022\uffe8\051\012\053\006\001\002\000\004\022\201\001" +
    "\002\000\004\051\202\001\002\000\004\017\203\001\002" +
    "\000\012\002\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000" +
    "\012\043\160\050\157\054\154\056\153\001\002\000\012" +
    "\043\160\050\157\054\154\056\153\001\002\000\014\006" +
    "\uffca\020\uffca\051\uffca\052\uffca\053\uffca\001\002\000\014" +
    "\006\uffc9\020\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002\000" +
    "\004\022\211\001\002\000\004\051\212\001\002\000\004" +
    "\017\213\001\002\000\012\002\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\001\002\000\004\052\066\001\002\000\012\031\216" +
    "\051\uffe7\052\uffe7\053\uffe7\001\002\000\004\051\217\001" +
    "\002\000\006\042\054\050\052\001\002\000\010\051\012" +
    "\052\uffe8\053\006\001\002\000\004\052\066\001\002\000" +
    "\004\037\223\001\002\000\004\051\224\001\002\000\014" +
    "\005\162\043\160\050\157\054\154\056\153\001\002\000" +
    "\010\051\012\052\uffe8\053\006\001\002\000\004\052\227" +
    "\001\002\000\010\022\uffe8\051\012\053\006\001\002\000" +
    "\004\022\231\001\002\000\004\051\232\001\002\000\004" +
    "\017\233\001\002\000\012\002\uffda\051\uffda\052\uffda\053" +
    "\uffda\001\002\000\004\022\235\001\002\000\004\051\236" +
    "\001\002\000\004\017\237\001\002\000\012\002\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\032\002\023\003\003\005\010\010\017\013" +
    "\022\016\012\021\024\023\013\024\006\025\021\026\004" +
    "\027\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\131\004\132\005\010\010\017\013\022\016\012\021" +
    "\024\023\013\024\006\025\021\026\004\027\016\001\001" +
    "\000\002\001\001\000\006\005\026\006\127\001\001\000" +
    "\006\005\026\006\125\001\001\000\002\001\001\000\030" +
    "\003\054\005\010\010\017\013\022\016\012\021\024\023" +
    "\013\024\006\025\021\026\004\027\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\026\006\034\001\001\000\002\001\001" +
    "\000\006\005\026\006\025\001\001\000\004\004\031\001" +
    "\001\000\006\005\026\006\027\001\001\000\002\001\001" +
    "\000\030\003\032\005\010\010\017\013\022\016\012\021" +
    "\024\023\013\024\006\025\021\026\004\027\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\035\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\004\011\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\044\001\001" +
    "\000\004\011\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\062" +
    "\001\001\000\002\001\001\000\006\005\026\006\107\001" +
    "\001\000\002\001\001\000\006\005\026\006\064\001\001" +
    "\000\004\022\066\001\001\000\024\005\074\006\073\007" +
    "\072\010\017\023\075\024\006\025\021\026\004\027\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\017\023\104\024\006" +
    "\025\021\026\004\027\016\001\001\000\002\001\001\000" +
    "\010\005\074\006\027\007\100\001\001\000\006\005\026" +
    "\006\076\001\001\000\004\022\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\103\007\102\001\001" +
    "\000\002\001\001\000\006\005\103\007\100\001\001\000" +
    "\006\005\026\006\105\001\001\000\004\022\106\001\001" +
    "\000\002\001\001\000\004\022\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\115\001\001\000\004\020\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\123\001\001\000\004\020\124\001" +
    "\001\000\002\001\001\000\004\004\126\001\001\000\002" +
    "\001\001\000\004\004\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\137\001\001\000\006\005\026\006" +
    "\213\001\001\000\002\001\001\000\006\005\026\006\141" +
    "\001\001\000\004\022\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\145\001\001\000\006\005\026" +
    "\006\146\001\001\000\004\022\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\155\031\154\034\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\026\006\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\154\032" +
    "\164\034\163\001\001\000\002\001\001\000\004\033\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\154\034\171\001\001" +
    "\000\004\033\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\026" +
    "\006\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\154\034\206" +
    "\001\001\000\006\031\154\034\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\217" +
    "\001\001\000\006\005\026\006\220\001\001\000\004\022" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\224\031\154\034\160\001\001\000\006\005\026\006" +
    "\225\001\001\000\002\001\001\000\006\005\026\006\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     /*
     public void syntax_error(Symbol s){
 	System.out.print(s);
     }
    
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
         System.out.print(s);
     }
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= FUNCION INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= BLOQUE INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQUE_PADRE ::= newline BLOQUE INDENTACION2 BLOQUE_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQUE_PADRE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQUE_PADRE ::= newline INDENTACION2 newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUE_PADRE ::= newline INDENTACION2 newline INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUE_PADRE ::= newline INDENTACION3 BLOQUE INDENTACION2 BLOQUE_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE ::= DECLARACION_VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BLOQUE ::= LECTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE ::= BLOQUE_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE ::= BLOQUE_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INDENTACION3 ::= INDENTACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INDENTACION3 ::= INDENTACION INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_VARIABLE ::= dim espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VARIABLE2 ::= coma espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VARIABLE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNAR_TIPO_VARIABLE ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_TIPO_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOS ::= tipovar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 BLOQUE_PADRE end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 BLOQUE_PADRE end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_PARAMENTROS ::= tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_PARAMENTROS2 ::= coma espacio tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_PARAMENTROS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 BLOQUE_PADRE Return espacio OPCIONES_RETURN INDENTACION2 newline INDENTACION2 end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 BLOQUE_PADRE Return espacio OPCIONES_RETURN INDENTACION2 newline INDENTACION2 end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 BLOQUE_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 BLOQUE_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPCIONES_RETURN ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_RETURN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPCIONES_RETURN ::= abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_RETURN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPCIONES_RETURN ::= abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES_RETURN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGUMENTOS ::= EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARGUMENTOS2 ::= coma espacio EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGUMENTOS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALORES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALORES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALORES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= VALORES opmult EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= VALORES opsum EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

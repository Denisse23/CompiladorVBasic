
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyectocompi1;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\004\004\000\002\004\003\000\002\004\002\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\022\007\000\002\022\004\000\002\022\005" +
    "\000\002\022\006\000\002\022\006\000\002\022\007\000" +
    "\002\022\005\000\002\025\007\000\002\025\007\000\002" +
    "\025\007\000\002\025\007\000\002\025\007\000\002\025" +
    "\004\000\002\025\005\000\002\025\006\000\002\025\005" +
    "\000\002\025\005\000\002\027\006\000\002\007\003\000" +
    "\002\007\004\000\002\006\004\000\002\006\002\000\002" +
    "\005\003\000\002\005\003\000\002\010\006\000\002\011" +
    "\006\000\002\011\002\000\002\012\007\000\002\036\003" +
    "\000\002\036\003\000\002\016\014\000\002\016\015\000" +
    "\002\017\006\000\002\020\010\000\002\020\002\000\002" +
    "\013\020\000\002\013\021\000\002\013\014\000\002\013" +
    "\015\000\002\015\006\000\002\015\005\000\002\041\004" +
    "\000\002\042\006\000\002\042\002\000\002\043\007\000" +
    "\002\043\007\000\002\043\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\003\000\002\045\007" +
    "\000\002\045\007\000\002\045\007\000\002\045\007\000" +
    "\002\045\004\000\002\045\005\000\002\045\006\000\002" +
    "\045\005\000\002\047\007\000\002\047\007\000\002\047" +
    "\007\000\002\047\007\000\002\047\004\000\002\047\005" +
    "\000\002\047\006\000\002\047\005\000\002\047\005\000" +
    "\002\030\006\000\002\033\014\000\002\033\017\000\002" +
    "\034\014\000\002\034\017\000\002\044\010\000\002\044" +
    "\010\000\002\044\012\000\002\044\012\000\002\044\014" +
    "\000\002\051\010\000\002\051\011\000\002\051\013\000" +
    "\002\051\013\000\002\051\015\000\002\051\002\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\005\000\002\040\005\000\002\052\010" +
    "\000\002\052\012\000\002\053\010\000\002\053\012\000" +
    "\002\054\010\000\002\054\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\016\004\004\016\013\026\014\047\011\050" +
    "\007\051\010\001\002\000\004\047\u0148\001\002\000\004" +
    "\002\001\001\002\000\012\002\uffdc\047\011\050\uffdc\051" +
    "\010\001\002\000\014\004\004\016\013\026\014\047\011" +
    "\051\010\001\002\000\032\002\uffda\004\uffda\016\uffda\021" +
    "\uffda\026\uffda\032\uffda\035\uffda\036\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\001\002\000\032\002\uffdb\004\uffdb\016" +
    "\uffdb\021\uffdb\026\uffdb\032\uffdb\035\uffdb\036\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\001\002\000\004\002\u0144\001" +
    "\002\000\004\047\053\001\002\000\004\047\035\001\002" +
    "\000\012\002\uffdc\047\011\050\uffdc\051\010\001\002\000" +
    "\012\002\uffdc\047\011\050\uffdc\051\010\001\002\000\020" +
    "\002\ufff6\004\004\016\013\026\014\047\011\050\024\051" +
    "\010\001\002\000\012\002\uffdc\047\011\050\uffdc\051\010" +
    "\001\002\000\006\002\ufff6\050\024\001\002\000\026\002" +
    "\uffdc\021\uffdc\026\uffdc\032\uffdc\035\uffdc\036\uffdc\046\uffdc" +
    "\047\011\050\uffdc\051\010\001\002\000\022\002\uffdd\021" +
    "\uffdd\026\uffdd\032\uffdd\035\uffdd\036\uffdd\046\uffdd\050\uffdd" +
    "\001\002\000\016\002\ufff7\004\004\016\013\026\014\047" +
    "\011\051\010\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\ufffd\001\002\000\006\002\ufff6\050\024\001\002\000\004" +
    "\002\ufffc\001\002\000\006\002\ufff6\050\024\001\002\000" +
    "\004\002\ufff9\001\002\000\004\046\036\001\002\000\004" +
    "\047\045\001\002\000\014\002\uffd7\017\040\047\uffd7\050" +
    "\uffd7\051\uffd7\001\002\000\004\047\042\001\002\000\012" +
    "\002\uffd9\047\uffd9\050\uffd9\051\uffd9\001\002\000\004\046" +
    "\036\001\002\000\014\002\uffd7\017\040\047\uffd7\050\uffd7" +
    "\051\uffd7\001\002\000\012\002\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\001\002\000\004\027\046\001\002\000\004\047\047" +
    "\001\002\000\006\040\052\046\050\001\002\000\016\002" +
    "\uffd4\006\uffd4\017\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002" +
    "\000\016\002\uffd6\006\uffd6\017\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\001\002\000\016\002\uffd5\006\uffd5\017\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\001\002\000\004\046\054\001\002\000" +
    "\004\005\055\001\002\000\006\006\057\037\056\001\002" +
    "\000\004\047\u013b\001\002\000\010\047\u012e\050\uffdc\051" +
    "\010\001\002\000\004\006\061\001\002\000\010\047\063" +
    "\050\uffdc\051\010\001\002\000\004\050\127\001\002\000" +
    "\012\027\064\047\uffdb\050\uffdb\051\uffdb\001\002\000\004" +
    "\047\065\001\002\000\006\040\052\046\050\001\002\000" +
    "\010\047\011\050\uffdc\051\010\001\002\000\004\050\070" +
    "\001\002\000\022\021\uffdc\026\uffdc\032\uffdc\035\uffdc\046" +
    "\uffdc\047\011\050\uffdc\051\010\001\002\000\004\021\072" +
    "\001\002\000\004\047\073\001\002\000\004\016\074\001" +
    "\002\000\012\002\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002" +
    "\000\016\021\uffe5\026\014\032\100\035\101\046\110\050" +
    "\102\001\002\000\004\021\uffe1\001\002\000\010\047\011" +
    "\050\uffdc\051\010\001\002\000\004\047\u0102\001\002\000" +
    "\004\047\377\001\002\000\010\021\uffe4\047\011\051\010" +
    "\001\002\000\010\047\011\050\uffdc\051\010\001\002\000" +
    "\010\047\011\050\uffdc\051\010\001\002\000\010\047\011" +
    "\050\uffdc\051\010\001\002\000\004\021\uffe2\001\002\000" +
    "\010\047\011\050\uffdc\051\010\001\002\000\006\013\111" +
    "\047\112\001\002\000\004\046\360\001\002\000\004\015" +
    "\113\001\002\000\004\047\114\001\002\000\014\005\124" +
    "\041\121\046\120\052\116\054\115\001\002\000\012\006" +
    "\uffc0\017\uffc0\047\uffc0\050\uffc0\001\002\000\012\006\uffbf" +
    "\017\uffbf\047\uffbf\050\uffbf\001\002\000\012\006\uffc3\017" +
    "\uffc3\047\351\050\uffc3\001\002\000\016\005\336\006\uffc2" +
    "\013\335\017\uffc2\047\uffc2\050\uffc2\001\002\000\012\006" +
    "\uffc1\017\uffc1\047\uffc1\050\uffc1\001\002\000\004\050\127" +
    "\001\002\000\012\006\uffbc\017\uffbc\047\uffbc\050\uffbc\001" +
    "\002\000\014\005\124\041\121\046\120\052\116\054\115" +
    "\001\002\000\004\006\126\001\002\000\012\006\uffbd\017" +
    "\uffbd\047\uffbd\050\uffbd\001\002\000\020\021\uffdc\026\uffdc" +
    "\032\uffdc\046\uffdc\047\011\050\uffdc\051\010\001\002\000" +
    "\004\021\uff94\001\002\000\014\021\ufff0\026\014\032\134" +
    "\046\110\050\135\001\002\000\004\021\uffeb\001\002\000" +
    "\010\047\011\050\uffdc\051\010\001\002\000\004\047\157" +
    "\001\002\000\012\021\uffef\047\011\050\127\051\010\001" +
    "\002\000\010\047\011\050\uffdc\051\010\001\002\000\010" +
    "\047\011\050\uffdc\051\010\001\002\000\010\047\011\050" +
    "\uffdc\051\010\001\002\000\010\047\011\050\uffdc\051\010" +
    "\001\002\000\004\050\127\001\002\000\004\021\ufff5\001" +
    "\002\000\004\050\127\001\002\000\004\021\ufff2\001\002" +
    "\000\004\050\127\001\002\000\004\021\ufff1\001\002\000" +
    "\004\050\127\001\002\000\004\021\ufff4\001\002\000\006" +
    "\021\uffee\050\127\001\002\000\014\021\uffdf\036\uffdf\047" +
    "\011\050\uffdf\051\010\001\002\000\004\021\uffed\001\002" +
    "\000\010\021\uffde\036\uffde\050\uffde\001\002\000\004\021" +
    "\uffec\001\002\000\016\005\167\030\166\041\164\046\163" +
    "\052\162\054\160\001\002\000\024\005\uff98\006\uff98\030" +
    "\uff98\041\uff98\042\uff98\046\uff98\047\uff98\052\uff98\054\uff98" +
    "\001\002\000\004\047\260\001\002\000\024\005\uff97\006" +
    "\uff97\030\uff97\041\uff97\042\uff97\046\uff97\047\uff97\052\uff97" +
    "\054\uff97\001\002\000\026\005\uff9a\006\uff9a\013\256\030" +
    "\uff9a\041\uff9a\042\uff9a\046\uff9a\047\uff9a\052\uff9a\054\uff9a" +
    "\001\002\000\024\005\uff99\006\uff99\030\uff99\041\uff99\042" +
    "\uff99\046\uff99\047\uff99\052\uff99\054\uff99\001\002\000\004" +
    "\047\241\001\002\000\004\047\172\001\002\000\016\005" +
    "\167\030\166\041\164\046\163\052\162\054\160\001\002" +
    "\000\004\006\171\001\002\000\024\005\uff95\006\uff95\030" +
    "\uff95\041\uff95\042\uff95\046\uff95\047\uff95\052\uff95\054\uff95" +
    "\001\002\000\014\005\167\041\164\046\163\052\162\054" +
    "\160\001\002\000\004\047\174\001\002\000\004\043\175" +
    "\001\002\000\004\047\176\001\002\000\016\005\167\030" +
    "\177\041\164\046\163\052\162\054\160\001\002\000\004" +
    "\047\236\001\002\000\010\006\uff9b\042\201\047\uff9b\001" +
    "\002\000\020\005\167\030\204\041\164\046\163\047\203" +
    "\052\162\054\160\001\002\000\006\006\uffa3\047\uffa3\001" +
    "\002\000\004\043\232\001\002\000\004\047\217\001\002" +
    "\000\004\047\206\001\002\000\004\015\207\001\002\000" +
    "\004\047\210\001\002\000\016\005\167\030\212\041\164" +
    "\046\163\052\162\054\160\001\002\000\016\005\167\030" +
    "\166\041\164\046\163\052\162\054\160\001\002\000\004" +
    "\047\213\001\002\000\014\005\167\041\164\046\163\052" +
    "\162\054\160\001\002\000\016\005\167\030\166\041\164" +
    "\046\163\052\162\054\160\001\002\000\006\006\uff9d\047" +
    "\uff9d\001\002\000\006\006\uff9f\047\uff9f\001\002\000\014" +
    "\005\167\041\164\046\163\052\162\054\160\001\002\000" +
    "\004\047\221\001\002\000\004\015\222\001\002\000\004" +
    "\047\223\001\002\000\016\005\167\030\224\041\164\046" +
    "\163\052\162\054\160\001\002\000\004\047\227\001\002" +
    "\000\016\005\167\030\166\041\164\046\163\052\162\054" +
    "\160\001\002\000\006\006\uff9e\047\uff9e\001\002\000\014" +
    "\005\167\041\164\046\163\052\162\054\160\001\002\000" +
    "\016\005\167\030\166\041\164\046\163\052\162\054\160" +
    "\001\002\000\006\006\uff9c\047\uff9c\001\002\000\004\047" +
    "\233\001\002\000\014\005\167\041\164\046\163\052\162" +
    "\054\160\001\002\000\010\006\uff9b\042\201\047\uff9b\001" +
    "\002\000\006\006\uffa0\047\uffa0\001\002\000\014\005\167" +
    "\041\164\046\163\052\162\054\160\001\002\000\010\006" +
    "\uff9b\042\201\047\uff9b\001\002\000\006\006\uffa1\047\uffa1" +
    "\001\002\000\006\015\243\043\242\001\002\000\004\047" +
    "\247\001\002\000\004\047\244\001\002\000\014\005\167" +
    "\041\164\046\163\052\162\054\160\001\002\000\010\006" +
    "\uff9b\042\201\047\uff9b\001\002\000\006\006\uffa4\047\uffa4" +
    "\001\002\000\016\005\167\030\251\041\164\046\163\052" +
    "\162\054\160\001\002\000\010\006\uff9b\042\201\047\uff9b" +
    "\001\002\000\004\047\252\001\002\000\014\005\167\041" +
    "\164\046\163\052\162\054\160\001\002\000\010\006\uff9b" +
    "\042\201\047\uff9b\001\002\000\006\006\uffa2\047\uffa2\001" +
    "\002\000\006\006\uffa5\047\uffa5\001\002\000\004\046\257" +
    "\001\002\000\024\005\uff96\006\uff96\030\uff96\041\uff96\042" +
    "\uff96\046\uff96\047\uff96\052\uff96\054\uff96\001\002\000\004" +
    "\022\261\001\002\000\010\047\011\050\uffdc\051\010\001" +
    "\002\000\004\050\263\001\002\000\020\021\uffdc\026\uffdc" +
    "\036\uffdc\046\uffdc\047\011\050\uffdc\051\010\001\002\000" +
    "\006\021\265\036\266\001\002\000\004\047\274\001\002" +
    "\000\010\047\011\050\uffdc\051\010\001\002\000\004\050" +
    "\263\001\002\000\004\021\271\001\002\000\004\047\272" +
    "\001\002\000\004\032\273\001\002\000\010\047\uffa8\050" +
    "\uffa8\051\uffa8\001\002\000\004\032\275\001\002\000\010" +
    "\047\uffa9\050\uffa9\051\uffa9\001\002\000\014\021\uffb7\026" +
    "\014\036\uffb7\046\301\050\300\001\002\000\010\047\011" +
    "\050\uffdc\051\010\001\002\000\012\021\uffb6\036\uffb6\047" +
    "\011\051\010\001\002\000\006\013\314\047\315\001\002" +
    "\000\010\047\011\050\uffdc\051\010\001\002\000\010\047" +
    "\011\050\uffdc\051\010\001\002\000\010\047\011\050\uffdc" +
    "\051\010\001\002\000\006\021\uffb4\036\uffb4\001\002\000" +
    "\004\050\263\001\002\000\006\021\uffba\036\uffba\001\002" +
    "\000\004\050\263\001\002\000\006\021\uffb8\036\uffb8\001" +
    "\002\000\004\050\263\001\002\000\006\021\uffb9\036\uffb9" +
    "\001\002\000\004\046\322\001\002\000\004\015\316\001" +
    "\002\000\004\047\317\001\002\000\014\005\124\041\121" +
    "\046\120\052\116\054\115\001\002\000\004\050\263\001" +
    "\002\000\006\021\uff90\036\uff90\001\002\000\004\047\323" +
    "\001\002\000\004\015\324\001\002\000\004\047\325\001" +
    "\002\000\014\005\124\041\121\046\120\052\116\054\115" +
    "\001\002\000\004\050\263\001\002\000\006\021\uff8f\036" +
    "\uff8f\001\002\000\006\021\uffb5\036\uffb5\001\002\000\004" +
    "\050\263\001\002\000\006\021\uffbb\036\uffbb\001\002\000" +
    "\004\050\127\001\002\000\004\021\ufff3\001\002\000\004" +
    "\046\350\001\002\000\016\005\124\006\337\041\121\046" +
    "\120\052\116\054\115\001\002\000\012\006\uffc9\017\uffc9" +
    "\047\uffc9\050\uffc9\001\002\000\004\006\347\001\002\000" +
    "\006\006\uffc6\017\343\001\002\000\004\006\uffc8\001\002" +
    "\000\004\047\344\001\002\000\014\005\124\041\121\046" +
    "\120\052\116\054\115\001\002\000\006\006\uffc6\017\343" +
    "\001\002\000\004\006\uffc7\001\002\000\012\006\uffca\017" +
    "\uffca\047\uffca\050\uffca\001\002\000\012\006\uffbe\017\uffbe" +
    "\047\uffbe\050\uffbe\001\002\000\006\044\352\045\353\001" +
    "\002\000\004\047\356\001\002\000\004\047\354\001\002" +
    "\000\014\005\124\041\121\046\120\052\116\054\115\001" +
    "\002\000\010\006\uffc4\017\uffc4\050\uffc4\001\002\000\014" +
    "\005\124\041\121\046\120\052\116\054\115\001\002\000" +
    "\010\006\uffc5\017\uffc5\050\uffc5\001\002\000\004\047\361" +
    "\001\002\000\004\015\362\001\002\000\004\047\363\001" +
    "\002\000\014\005\124\041\121\046\120\052\116\054\115" +
    "\001\002\000\004\050\127\001\002\000\004\021\uff93\001" +
    "\002\000\004\050\070\001\002\000\004\021\uffe8\001\002" +
    "\000\004\050\070\001\002\000\004\021\uffea\001\002\000" +
    "\004\050\070\001\002\000\004\021\uffe6\001\002\000\004" +
    "\050\070\001\002\000\004\021\uffe7\001\002\000\004\021" +
    "\uffe3\001\002\000\014\005\124\041\121\046\120\052\116" +
    "\054\115\001\002\000\004\050\070\001\002\000\004\021" +
    "\uffe0\001\002\000\016\005\167\030\166\041\164\046\163" +
    "\052\162\054\160\001\002\000\004\047\u0104\001\002\000" +
    "\004\022\u0105\001\002\000\010\047\011\050\uffdc\051\010" +
    "\001\002\000\004\050\u0107\001\002\000\020\021\uffdc\026" +
    "\uffdc\035\uffdc\036\uffdc\047\011\050\uffdc\051\010\001\002" +
    "\000\006\021\u0109\036\u010a\001\002\000\004\047\u0110\001" +
    "\002\000\010\047\011\050\uffdc\051\010\001\002\000\004" +
    "\050\u0107\001\002\000\004\021\u010d\001\002\000\004\047" +
    "\u010e\001\002\000\004\032\u010f\001\002\000\010\047\uffa6" +
    "\050\uffa6\051\uffa6\001\002\000\004\032\u0111\001\002\000" +
    "\010\047\uffa7\050\uffa7\051\uffa7\001\002\000\014\021\uffaf" +
    "\026\014\035\u0115\036\uffaf\050\u0116\001\002\000\006\021" +
    "\uffab\036\uffab\001\002\000\010\047\011\050\uffdc\051\010" +
    "\001\002\000\004\047\u0122\001\002\000\012\021\uffae\036" +
    "\uffae\047\011\051\010\001\002\000\010\047\011\050\uffdc" +
    "\051\010\001\002\000\010\047\011\050\uffdc\051\010\001" +
    "\002\000\006\021\uffac\036\uffac\001\002\000\010\047\011" +
    "\050\uffdc\051\010\001\002\000\004\050\u0107\001\002\000" +
    "\006\021\uffb3\036\uffb3\001\002\000\004\050\u0107\001\002" +
    "\000\006\021\uffb1\036\uffb1\001\002\000\004\050\u0107\001" +
    "\002\000\006\021\uffb0\036\uffb0\001\002\000\006\021\uffad" +
    "\036\uffad\001\002\000\014\005\124\041\121\046\120\052" +
    "\116\054\115\001\002\000\004\050\u0107\001\002\000\006" +
    "\021\uffaa\036\uffaa\001\002\000\004\050\u0107\001\002\000" +
    "\006\021\uffb2\036\uffb2\001\002\000\004\050\070\001\002" +
    "\000\004\021\uffe9\001\002\000\004\021\u012a\001\002\000" +
    "\004\047\u012b\001\002\000\004\016\u012c\001\002\000\012" +
    "\002\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000\004\050" +
    "\127\001\002\000\012\027\u012f\047\uffdb\050\uffdb\051\uffdb" +
    "\001\002\000\004\047\u0130\001\002\000\006\040\052\046" +
    "\050\001\002\000\010\047\011\050\uffdc\051\010\001\002" +
    "\000\004\050\070\001\002\000\004\021\u0134\001\002\000" +
    "\004\047\u0135\001\002\000\004\016\u0136\001\002\000\012" +
    "\002\uffce\047\uffce\050\uffce\051\uffce\001\002\000\004\021" +
    "\u0138\001\002\000\004\047\u0139\001\002\000\004\016\u013a" +
    "\001\002\000\012\002\uffcc\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\004\046\036\001\002\000\006\006\uffcf\017\u013e" +
    "\001\002\000\004\006\uffd1\001\002\000\004\047\u013f\001" +
    "\002\000\004\037\u0140\001\002\000\004\047\u0141\001\002" +
    "\000\004\046\036\001\002\000\006\006\uffcf\017\u013e\001" +
    "\002\000\004\006\uffd0\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffff\001\002\000\006\002\ufff6\050\024\001" +
    "\002\000\004\002\ufffa\001\002\000\004\046\u0149\001\002" +
    "\000\004\005\u014a\001\002\000\006\006\u014b\037\056\001" +
    "\002\000\010\047\011\050\uffdc\051\010\001\002\000\004" +
    "\006\u014d\001\002\000\010\047\011\050\uffdc\051\010\001" +
    "\002\000\004\050\127\001\002\000\004\021\u0150\001\002" +
    "\000\004\047\u0151\001\002\000\004\004\u0152\001\002\000" +
    "\012\002\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002\000\004" +
    "\050\127\001\002\000\004\021\u0155\001\002\000\004\047" +
    "\u0156\001\002\000\004\004\u0157\001\002\000\012\002\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0155\000\020\002\011\003\004\005\016\010\014\013" +
    "\017\016\015\021\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\021\006\u0145\001\001\000\016\003" +
    "\u0144\005\016\010\014\013\017\016\015\021\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\021\006\032" +
    "\001\001\000\006\005\021\006\030\001\001\000\020\003" +
    "\026\004\027\005\016\010\014\013\017\016\015\021\005" +
    "\001\001\000\006\005\021\006\020\001\001\000\004\004" +
    "\024\001\001\000\006\005\021\006\022\001\001\000\002" +
    "\001\001\000\016\003\025\005\016\010\014\013\017\016" +
    "\015\021\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\031\001" +
    "\001\000\002\001\001\000\004\004\033\001\001\000\002" +
    "\001\001\000\004\012\036\001\001\000\002\001\001\000" +
    "\004\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\042\001\001\000\004\011\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\057\001\001\000\002\001\001\000\006\005\021\006" +
    "\u012c\001\001\000\002\001\001\000\006\005\021\006\061" +
    "\001\001\000\004\022\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\065\001\001\000\006\005\021" +
    "\006\066\001\001\000\004\025\070\001\001\000\006\005" +
    "\021\006\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\104\027" +
    "\105\031\106\032\102\034\103\035\076\052\075\001\001" +
    "\000\002\001\001\000\006\005\021\006\u0126\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\152\007\375" +
    "\001\001\000\006\005\021\006\373\001\001\000\006\005" +
    "\021\006\371\001\001\000\006\005\021\006\367\001\001" +
    "\000\002\001\001\000\006\005\021\006\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\122\037\116\043\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\127\001\001\000" +
    "\002\001\001\000\010\015\122\037\116\043\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\021\006" +
    "\130\001\001\000\002\001\001\000\016\010\137\031\140" +
    "\032\136\033\135\035\132\052\131\001\001\000\002\001" +
    "\001\000\006\005\021\006\332\001\001\000\002\001\001" +
    "\000\010\005\152\007\151\022\153\001\001\000\006\005" +
    "\021\006\147\001\001\000\006\005\021\006\145\001\001" +
    "\000\006\005\021\006\143\001\001\000\006\005\021\006" +
    "\141\001\001\000\004\022\142\001\001\000\002\001\001" +
    "\000\004\022\144\001\001\000\002\001\001\000\004\022" +
    "\146\001\001\000\002\001\001\000\004\022\150\001\001" +
    "\000\002\001\001\000\004\022\155\001\001\000\006\005" +
    "\152\007\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\164\044\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\164\044\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\177" +
    "\001\001\000\002\001\001\000\004\051\201\001\001\000" +
    "\004\040\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\210\001\001\000\006\040\164" +
    "\044\215\001\001\000\002\001\001\000\004\040\213\001" +
    "\001\000\006\040\164\044\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\224" +
    "\001\001\000\002\001\001\000\006\040\164\044\225\001" +
    "\001\000\002\001\001\000\004\040\227\001\001\000\006" +
    "\040\164\044\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\233\001\001\000\004\051\234\001\001" +
    "\000\002\001\001\000\004\040\236\001\001\000\004\051" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\244\001\001\000" +
    "\004\051\245\001\001\000\002\001\001\000\004\040\247" +
    "\001\001\000\004\051\254\001\001\000\002\001\001\000" +
    "\004\040\252\001\001\000\004\051\253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\021\006\261\001\001" +
    "\000\004\045\263\001\001\000\006\005\021\006\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\021" +
    "\006\266\001\001\000\004\045\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\301\031" +
    "\276\032\302\035\303\054\304\001\001\000\006\005\021" +
    "\006\330\001\001\000\006\005\152\007\327\001\001\000" +
    "\002\001\001\000\006\005\021\006\311\001\001\000\006" +
    "\005\021\006\307\001\001\000\006\005\021\006\305\001" +
    "\001\000\002\001\001\000\004\045\306\001\001\000\002" +
    "\001\001\000\004\045\310\001\001\000\002\001\001\000" +
    "\004\045\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\122\037" +
    "\116\043\317\001\001\000\004\045\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\122\037\116\043\325\001\001\000\004" +
    "\045\326\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\331\001\001\000\002\001\001\000\004\022\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\122\037\116\041\337\043\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\122\037\116\043\344" +
    "\001\001\000\004\042\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\122\037\116\043" +
    "\354\001\001\000\002\001\001\000\010\015\122\037\116" +
    "\043\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\122\037\116" +
    "\043\363\001\001\000\004\022\364\001\001\000\002\001" +
    "\001\000\004\025\366\001\001\000\002\001\001\000\004" +
    "\025\370\001\001\000\002\001\001\000\004\025\372\001" +
    "\001\000\002\001\001\000\004\025\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\122\037\116\043" +
    "\377\001\001\000\004\025\u0100\001\001\000\002\001\001" +
    "\000\006\040\164\044\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\021\006\u0105\001\001\000\004" +
    "\047\u0107\001\001\000\006\005\021\006\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\021\006\u010a" +
    "\001\001\000\004\047\u010b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\u0117\030\u0112\031" +
    "\u0119\032\u0116\035\u0113\055\u0118\001\001\000\002\001\001" +
    "\000\006\005\021\006\u0124\001\001\000\002\001\001\000" +
    "\006\005\152\007\u0120\001\001\000\006\005\021\006\u011e" +
    "\001\001\000\006\005\021\006\u011c\001\001\000\002\001" +
    "\001\000\006\005\021\006\u011a\001\001\000\004\047\u011b" +
    "\001\001\000\002\001\001\000\004\047\u011d\001\001\000" +
    "\002\001\001\000\004\047\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\122\037\116\043\u0122\001" +
    "\001\000\004\047\u0123\001\001\000\002\001\001\000\004" +
    "\047\u0125\001\001\000\002\001\001\000\004\025\u0127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u0130" +
    "\001\001\000\006\005\021\006\u0131\001\001\000\004\025" +
    "\u0132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u013b" +
    "\001\001\000\004\020\u013c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0141\001\001\000\004\020\u0142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u014b\001\001\000\006\005\021\006\u0152" +
    "\001\001\000\002\001\001\000\006\005\021\006\u014d\001" +
    "\001\000\004\022\u014e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     /*
     public void syntax_error(Symbol s){
 	System.out.print(s);
     }
    
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
         System.out.print(s);
     }
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= FUNCION INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 newline INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 newline CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 newline INDENTACION3 CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB_PADRE ::= newline INDENTACION2 ASIGNACIONES_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB_PADRE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 LECTURA INDENTACION2 BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 ESCRITURA INDENTACION2 BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 newline INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 BLOQUE_RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE_FUNCTION_PADRE ::= newline INDENTACION2 ASIGNACIONES_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCTION_PADRE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE_RETURN ::= Return espacio EXP BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INDENTACION3 ::= INDENTACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INDENTACION3 ::= INDENTACION INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLE ::= dim espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE2 ::= coma espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNAR_TIPO_VARIABLE ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_TIPO_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= tipovar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB_PADRE end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB_PADRE end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_PARAMENTROS ::= tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_PARAMENTROS2 ::= coma espacio tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_PARAMENTROS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 BLOQUE_FUNCTION_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 BLOQUE_FUNCTION_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB_PADRE end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGUMENTOS ::= EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENTOS2 ::= coma espacio EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGUMENTOS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",32, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= VALORES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 newline INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF_PADRE ::= newline INDENTACION2 ASIGNACIONES_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_PADRE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 newline INDENTACION3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 ASIGNACIONES_iF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION_PADRE ::= newline INDENTACION2 BLOQUE_IF_RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION_PADRE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // BLOQUE_IF_RETURN ::= Return espacio EXP CONTENIDO_IF_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_RETURN",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_PADRE end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_PADRE Else INDENTACION2 CONTENIDO_IF_PADRE end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE Else INDENTACION2 CONTENIDO_IF_FUNCTION_PADRE end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_CONDICIONALES ::= VALORES_CON espacio oprel espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_CONDICIONALES ::= VALORES_CON espacio asignacion espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_CONDICIONALES ::= not espacio VALORES_CON espacio oprel espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_CONDICIONALES ::= VALORES_CON espacio oprel espacio not espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_CONDICIONALES ::= not espacio VALORES_CON espacio oprel espacio not espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_CONDICIONALES2 ::= oplog espacio oprel espacio VALORES_CON EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_CONDICIONALES2 ::= oplog VALORES_CON espacio asignacion espacio VALORES_CON EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_CONDICIONALES2 ::= oplog not espacio VALORES_CON espacio asignacion espacio VALORES_CON EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_CONDICIONALES2 ::= oplog VALORES_CON espacio asignacion espacio not espacio VALORES_CON EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_CONDICIONALES2 ::= oplog not espacio VALORES_CON espacio asignacion espacio not espacio VALORES_CON EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_CONDICIONALES2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",39, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORES_CON ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORES_CON ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES_CON ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORES_CON ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORES_CON ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORES_CON ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CON",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGNACIONES_SUB ::= identificador espacio asignacion espacio EXP CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_SUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ASIGNACIONES_SUB ::= identificador punto identificador espacio asignacion espacio EXP CONTENIDO_SUB_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_SUB",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ASIGNACIONES_FUNCTION ::= identificador espacio asignacion espacio EXP BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_FUNCTION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNACIONES_FUNCTION ::= identificador punto identificador espacio asignacion espacio EXP BLOQUE_FUNCTION_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_FUNCTION",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNACIONES_IF ::= identificador espacio asignacion espacio EXP CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_IF",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNACIONES_IF ::= identificador punto identificador espacio asignacion espacio EXP CONTENIDO_IF_PADRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES_IF",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import java.util.Stack;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Vbasicsintaxis extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Vbasicsintaxis() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Vbasicsintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Vbasicsintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\051\002" +
    "\000\002\052\002\000\002\003\006\000\002\053\002\000" +
    "\002\054\002\000\002\003\007\000\002\055\002\000\002" +
    "\056\002\000\002\003\007\000\002\057\002\000\002\003" +
    "\006\000\002\003\005\000\002\060\002\000\002\003\005" +
    "\000\002\004\004\000\002\004\003\000\002\004\002\000" +
    "\002\015\007\000\002\061\002\000\002\062\002\000\002" +
    "\015\011\000\002\063\002\000\002\064\002\000\002\015" +
    "\011\000\002\015\007\000\002\015\007\000\002\065\002" +
    "\000\002\066\002\000\002\015\011\000\002\015\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\015\006\000\002\016\007\000\002\067\002\000\002\070" +
    "\002\000\002\016\011\000\002\016\007\000\002\016\007" +
    "\000\002\071\002\000\002\072\002\000\002\016\011\000" +
    "\002\073\002\000\002\074\002\000\002\016\011\000\002" +
    "\016\004\000\002\016\005\000\002\016\006\000\002\016" +
    "\006\000\002\016\004\000\002\016\006\000\002\017\005" +
    "\000\002\006\004\000\002\006\002\000\002\005\003\000" +
    "\002\005\003\000\002\075\002\000\002\007\006\000\002" +
    "\076\002\000\002\010\013\000\002\077\002\000\002\010" +
    "\007\000\002\010\007\000\002\022\003\000\002\022\003" +
    "\000\002\100\002\000\002\013\015\000\002\101\002\000" +
    "\002\013\016\000\002\014\011\000\002\014\014\000\002" +
    "\102\002\000\002\011\022\000\002\103\002\000\002\011" +
    "\021\000\002\104\002\000\002\011\015\000\002\105\002" +
    "\000\002\011\016\000\002\012\005\000\002\012\006\000" +
    "\002\024\003\000\002\024\006\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\025\006\000\002\025" +
    "\006\000\002\025\004\000\002\025\006\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\005\000\002\023\005\000\002\023\003\000\002" +
    "\027\007\000\002\106\002\000\002\107\002\000\002\027" +
    "\011\000\002\027\007\000\002\027\007\000\002\110\002" +
    "\000\002\111\002\000\002\027\011\000\002\027\004\000" +
    "\002\027\005\000\002\027\006\000\002\027\004\000\002" +
    "\027\006\000\002\030\007\000\002\112\002\000\002\113" +
    "\002\000\002\030\011\000\002\030\007\000\002\030\007" +
    "\000\002\114\002\000\002\115\002\000\002\030\011\000" +
    "\002\030\004\000\002\030\005\000\002\030\006\000\002" +
    "\030\006\000\002\030\004\000\002\030\006\000\002\020" +
    "\012\000\002\116\002\000\002\117\002\000\002\020\017" +
    "\000\002\021\013\000\002\120\002\000\002\121\002\000" +
    "\002\021\020\000\002\031\007\000\002\031\011\000\002" +
    "\034\013\000\002\034\007\000\002\034\011\000\002\032" +
    "\012\000\002\033\012\000\002\035\007\000\002\122\002" +
    "\000\002\123\002\000\002\035\011\000\002\035\007\000" +
    "\002\035\007\000\002\124\002\000\002\125\002\000\002" +
    "\035\011\000\002\035\004\000\002\035\005\000\002\035" +
    "\006\000\002\035\004\000\002\035\006\000\002\036\007" +
    "\000\002\126\002\000\002\127\002\000\002\036\011\000" +
    "\002\036\007\000\002\036\007\000\002\130\002\000\002" +
    "\131\002\000\002\036\011\000\002\036\004\000\002\036" +
    "\005\000\002\036\006\000\002\036\006\000\002\036\004" +
    "\000\002\036\006\000\002\037\011\000\002\040\011\000" +
    "\002\041\007\000\002\132\002\000\002\133\002\000\002" +
    "\041\011\000\002\041\007\000\002\041\007\000\002\134" +
    "\002\000\002\135\002\000\002\041\011\000\002\041\004" +
    "\000\002\041\005\000\002\041\006\000\002\041\004\000" +
    "\002\041\006\000\002\042\007\000\002\136\002\000\002" +
    "\137\002\000\002\042\011\000\002\042\007\000\002\042" +
    "\007\000\002\140\002\000\002\141\002\000\002\042\011" +
    "\000\002\042\004\000\002\042\005\000\002\042\006\000" +
    "\002\042\006\000\002\042\004\000\002\042\006\000\002" +
    "\142\002\000\002\143\002\000\002\043\014\000\002\044" +
    "\007\000\002\044\004\000\002\044\005\000\002\044\004" +
    "\000\002\045\007\000\002\046\013\000\002\046\015\000" +
    "\002\046\007\000\002\047\010\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0222\000\024\003\016\004\ufffc\013\ufff6\015\ufff9\024" +
    "\ufff3\045\012\046\007\047\010\051\017\001\002\000\004" +
    "\024\062\001\002\000\004\013\u0207\001\002\000\004\002" +
    "\001\001\002\000\022\003\016\004\ufffc\013\ufff6\015\ufff9" +
    "\024\ufff3\045\012\047\010\051\017\001\002\000\074\002" +
    "\uffc5\003\uffc5\004\uffc5\006\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\051\uffc5\001\002\000\004\015\u013b\001\002" +
    "\000\074\002\uffc4\003\uffc4\004\uffc4\006\uffc4\011\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\027\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\051\uffc4\001\002\000\004\004" +
    "\035\001\002\000\004\002\033\001\002\000\012\002\uffc6" +
    "\045\012\046\uffc6\047\010\001\002\000\006\002\ufff0\046" +
    "\ufff0\001\002\000\014\002\uff26\045\uff26\046\uff26\047\uff26" +
    "\051\uff26\001\002\000\026\002\uffec\003\016\004\ufffc\013" +
    "\ufff6\015\ufff9\024\ufff3\045\012\046\022\047\010\051\017" +
    "\001\002\000\004\002\ufffe\001\002\000\024\002\uffed\003" +
    "\016\004\ufffc\013\ufff6\015\ufff9\024\ufff3\045\012\047\010" +
    "\051\017\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\uffee\001\002\000\006\002\uffec\046\022\001\002\000\004" +
    "\002\uffef\001\002\000\006\002\uffec\046\022\001\002\000" +
    "\064\002\uffc6\006\uffc6\011\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\012\046\uffc6\047\010\051\uffc6\001" +
    "\002\000\060\002\uffc7\006\uffc7\011\uffc7\014\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\046\uffc7\051\uffc7\001\002\000" +
    "\004\002\ufff1\001\002\000\004\002\000\001\002\000\006" +
    "\002\ufffb\046\ufffb\001\002\000\004\045\036\001\002\000" +
    "\004\044\037\001\002\000\004\005\040\001\002\000\006" +
    "\006\042\035\041\001\002\000\004\045\u0130\001\002\000" +
    "\012\045\uffba\046\uffba\047\uffba\051\uffba\001\002\000\004" +
    "\006\044\001\002\000\012\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\006\046\047\051\017\001\002\000\030\011" +
    "\uffc6\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\044\uffc6" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046" +
    "\047\051\017\001\002\000\004\017\052\001\002\000\004" +
    "\045\053\001\002\000\004\004\054\001\002\000\006\002" +
    "\uffb7\046\uffb7\001\002\000\004\017\uffdc\001\002\000\024" +
    "\011\061\017\uffdf\024\062\027\uffe2\030\uffea\031\uffe7\044" +
    "\071\046\047\051\017\001\002\000\006\046\047\051\017" +
    "\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001" +
    "\002\000\004\012\u011f\001\002\000\004\045\uffc3\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\004\017\uffde\001\002\000\006\046\047\051\017\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\004\027\235\001\002\000\004\030\156\001\002\000\010" +
    "\005\117\012\356\045\357\001\002\000\004\031\073\001" +
    "\002\000\004\045\100\001\002\000\012\045\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\001\002\000\012\045\012\046\uffc6\047" +
    "\010\051\uffc6\001\002\000\006\046\047\051\017\001\002" +
    "\000\004\017\uffe5\001\002\000\004\044\101\001\002\000" +
    "\006\012\333\045\334\001\002\000\004\021\103\001\002" +
    "\000\004\045\104\001\002\000\016\005\105\026\107\037" +
    "\106\044\115\050\110\052\112\001\002\000\016\005\105" +
    "\026\107\037\106\044\115\050\110\052\112\001\002\000" +
    "\034\006\uffa0\014\uffa0\016\uffa0\020\uffa0\021\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\047\uffa0\051" +
    "\uffa0\001\002\000\004\045\326\001\002\000\034\006\uff9e" +
    "\014\uff9e\016\uff9e\020\uff9e\021\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\001\002" +
    "\000\034\006\uffc6\014\uffc6\016\uffc6\020\uffc6\021\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\045\012\046\uffc6\047\010" +
    "\051\uffc6\001\002\000\034\006\uff9f\014\uff9f\016\uff9f\020" +
    "\uff9f\021\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\051\uff9f\001\002\000\034\006\uff9b\014" +
    "\uff9b\016\uff9b\020\uff9b\021\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\001\002\000" +
    "\012\042\123\043\125\046\137\051\017\001\002\000\040" +
    "\005\117\006\uffa1\012\116\014\uffa1\016\uffa1\020\uffa1\021" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\051\uffa1\001\002\000\004\044\135\001\002\000" +
    "\020\005\105\006\120\026\107\037\106\044\115\050\110" +
    "\052\112\001\002\000\034\006\uffac\014\uffac\016\uffac\020" +
    "\uffac\021\uffac\040\uffac\041\uffac\042\uffac\043\uffac\045\uffac" +
    "\046\uffac\047\uffac\051\uffac\001\002\000\004\006\134\001" +
    "\002\000\012\006\uffaa\016\124\042\123\043\125\001\002" +
    "\000\004\045\132\001\002\000\004\045\130\001\002\000" +
    "\004\045\126\001\002\000\016\005\105\026\107\037\106" +
    "\044\115\050\110\052\112\001\002\000\030\006\uffa4\014" +
    "\uffa4\016\uffa4\020\uffa4\021\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\125\046\uffa4\051\uffa4\001\002\000\016\005\105\026" +
    "\107\037\106\044\115\050\110\052\112\001\002\000\004" +
    "\006\uffa9\001\002\000\016\005\105\026\107\037\106\044" +
    "\115\050\110\052\112\001\002\000\030\006\uffa5\014\uffa5" +
    "\016\uffa5\020\uffa5\021\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\125\046\uffa5\051\uffa5\001\002\000\034\006\uffab\014\uffab" +
    "\016\uffab\020\uffab\021\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\045\uffab\046\uffab\047\uffab\051\uffab\001\002\000\034" +
    "\006\uff9d\014\uff9d\016\uff9d\020\uff9d\021\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\047\uff9d\051\uff9d" +
    "\001\002\000\006\046\137\051\017\001\002\000\026\011" +
    "\uffc6\022\uffc6\024\uffc6\027\uffc6\030\uffc6\044\uffc6\045\012" +
    "\046\uffc6\047\010\051\uffc6\001\002\000\004\022\141\001" +
    "\002\000\012\045\uff70\046\uff70\047\uff70\051\uff70\001\002" +
    "\000\022\011\061\022\uff65\024\062\027\uff68\030\uff6d\044" +
    "\071\046\137\051\017\001\002\000\006\046\137\051\017" +
    "\001\002\000\004\022\uff64\001\002\000\012\045\012\046" +
    "\uffc6\047\010\051\uffc6\001\002\000\012\045\012\046\uffc6" +
    "\047\010\051\uffc6\001\002\000\004\027\235\001\002\000" +
    "\006\046\137\051\017\001\002\000\004\030\156\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\137\051\017\001\002\000\004\022\uff69\001\002" +
    "\000\012\045\uff6c\046\uff6c\047\uff6c\051\uff6c\001\002\000" +
    "\004\045\157\001\002\000\016\005\105\026\107\037\106" +
    "\044\115\050\110\052\112\001\002\000\006\020\171\040" +
    "\170\001\002\000\012\014\163\041\162\042\123\043\125" +
    "\001\002\000\004\045\166\001\002\000\004\045\164\001" +
    "\002\000\016\005\105\026\107\037\106\044\115\050\110" +
    "\052\112\001\002\000\016\020\uffa7\040\uffa7\042\123\043" +
    "\125\046\uffa7\051\uffa7\001\002\000\016\005\105\026\107" +
    "\037\106\044\115\050\110\052\112\001\002\000\016\020" +
    "\uffa8\040\uffa8\042\123\043\125\046\uffa8\051\uffa8\001\002" +
    "\000\004\045\305\001\002\000\006\046\173\051\017\001" +
    "\002\000\006\046\173\051\017\001\002\000\030\011\uffc6" +
    "\017\uffc6\024\uffc6\027\uffc6\031\uffc6\034\uffc6\044\uffc6\045" +
    "\012\046\uffc6\047\010\051\uffc6\001\002\000\006\017\175" +
    "\034\uff7c\001\002\000\004\045\206\001\002\000\004\034" +
    "\177\001\002\000\012\045\uff7b\046\uff7b\047\uff7b\051\uff7b" +
    "\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001" +
    "\002\000\006\046\173\051\017\001\002\000\004\017\203" +
    "\001\002\000\004\045\204\001\002\000\004\030\205\001" +
    "\002\000\012\045\uff7a\046\uff7a\047\uff7a\051\uff7a\001\002" +
    "\000\004\030\207\001\002\000\012\045\uff7d\046\uff7d\047" +
    "\uff7d\051\uff7d\001\002\000\024\011\061\017\uff91\024\062" +
    "\027\uff94\031\uff99\034\uff91\044\071\046\173\051\017\001" +
    "\002\000\006\017\uff90\034\uff90\001\002\000\004\027\235" +
    "\001\002\000\004\031\073\001\002\000\006\046\173\051" +
    "\017\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001" +
    "\002\000\006\046\173\051\017\001\002\000\012\045\012" +
    "\046\uffc6\047\010\051\uffc6\001\002\000\006\046\173\051" +
    "\017\001\002\000\006\017\uff95\034\uff95\001\002\000\006" +
    "\017\uff8d\034\uff8d\001\002\000\006\046\173\051\017\001" +
    "\002\000\006\017\uff96\034\uff96\001\002\000\006\046\173" +
    "\051\017\001\002\000\006\017\uff9a\034\uff9a\001\002\000" +
    "\006\017\uff8f\034\uff8f\001\002\000\012\045\uff98\046\uff98" +
    "\047\uff98\051\uff98\001\002\000\012\045\012\046\uffc6\047" +
    "\010\051\uffc6\001\002\000\006\046\173\051\017\001\002" +
    "\000\006\017\uff97\034\uff97\001\002\000\004\045\242\001" +
    "\002\000\012\045\uff93\046\uff93\047\uff93\051\uff93\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\173\051\017\001\002\000\006\017\uff92\034\uff92" +
    "\001\002\000\004\032\243\001\002\000\004\045\244\001" +
    "\002\000\016\005\105\026\107\037\106\044\115\050\110" +
    "\052\112\001\002\000\010\040\170\046\250\051\017\001" +
    "\002\000\006\046\250\051\017\001\002\000\004\023\302" +
    "\001\002\000\026\011\uffc6\023\uffc6\024\uffc6\030\uffc6\031" +
    "\uffc6\044\uffc6\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\022\011\061\023\uff46\024\062\030\uff4e\031\uff49\044" +
    "\071\046\250\051\017\001\002\000\004\023\uff45\001\002" +
    "\000\006\046\250\051\017\001\002\000\012\045\012\046" +
    "\uffc6\047\010\051\uffc6\001\002\000\012\045\012\046\uffc6" +
    "\047\010\051\uffc6\001\002\000\004\030\156\001\002\000" +
    "\004\031\073\001\002\000\006\046\250\051\017\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\250\051\017\001\002\000\004\023\uff4a\001\002" +
    "\000\004\023\uff42\001\002\000\012\045\uff48\046\uff48\047" +
    "\uff48\051\uff48\001\002\000\012\045\012\046\uffc6\047\010" +
    "\051\uffc6\001\002\000\006\046\250\051\017\001\002\000" +
    "\004\023\uff47\001\002\000\012\045\uff4d\046\uff4d\047\uff4d" +
    "\051\uff4d\001\002\000\012\045\012\046\uffc6\047\010\051" +
    "\uffc6\001\002\000\006\046\250\051\017\001\002\000\004" +
    "\023\uff4c\001\002\000\006\046\250\051\017\001\002\000" +
    "\004\023\uff4b\001\002\000\006\046\250\051\017\001\002" +
    "\000\004\023\uff4f\001\002\000\004\023\uff44\001\002\000" +
    "\012\045\uff51\046\uff51\047\uff51\051\uff51\001\002\000\004" +
    "\023\uff43\001\002\000\006\017\uff8e\034\uff8e\001\002\000" +
    "\016\005\105\026\107\037\106\044\115\050\110\052\112" +
    "\001\002\000\012\020\uffa6\040\170\046\uffa6\051\uffa6\001" +
    "\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\006\046\137\051\017\001\002\000\004\022\uff6b\001" +
    "\002\000\004\022\uff61\001\002\000\012\045\uff67\046\uff67" +
    "\047\uff67\051\uff67\001\002\000\012\045\012\046\uffc6\047" +
    "\010\051\uffc6\001\002\000\006\046\137\051\017\001\002" +
    "\000\004\022\uff66\001\002\000\006\046\137\051\017\001" +
    "\002\000\004\022\uff6a\001\002\000\006\046\137\051\017" +
    "\001\002\000\004\022\uff6e\001\002\000\004\022\uff63\001" +
    "\002\000\004\022\uff62\001\002\000\030\006\uffa3\014\uffa3" +
    "\016\uffa3\020\uffa3\021\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\046\uffa3\051\uffa3\001\002\000\014\005\105\037\106" +
    "\044\115\050\110\052\112\001\002\000\034\006\uffc6\014" +
    "\uffc6\016\uffc6\020\uffc6\021\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\030\006\uffa2\014\uffa2\016\uffa2\020\uffa2\021\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\046\uffa2\051\uffa2\001\002\000" +
    "\010\006\332\042\123\043\125\001\002\000\034\006\uff9c" +
    "\014\uff9c\016\uff9c\020\uff9c\021\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\045\uff9c\046\uff9c\047\uff9c\051\uff9c\001\002" +
    "\000\004\044\351\001\002\000\006\014\336\025\335\001" +
    "\002\000\004\045\341\001\002\000\004\045\337\001\002" +
    "\000\016\005\105\026\107\037\106\044\115\050\110\052" +
    "\112\001\002\000\010\021\uff72\042\123\043\125\001\002" +
    "\000\006\036\344\044\342\001\002\000\020\002\uffbb\006" +
    "\uffbb\016\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\001\002" +
    "\000\004\045\345\001\002\000\020\002\uffbc\006\uffbc\016" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\001\002\000\004" +
    "\014\346\001\002\000\004\045\347\001\002\000\016\005" +
    "\105\026\107\037\106\044\115\050\110\052\112\001\002" +
    "\000\010\021\uff73\042\123\043\125\001\002\000\004\045" +
    "\352\001\002\000\004\014\353\001\002\000\004\045\354" +
    "\001\002\000\016\005\105\026\107\037\106\044\115\050" +
    "\110\052\112\001\002\000\010\021\uff71\042\123\043\125" +
    "\001\002\000\004\044\370\001\002\000\004\014\360\001" +
    "\002\000\004\045\361\001\002\000\020\005\105\011\362" +
    "\026\107\037\106\044\115\050\110\052\112\001\002\000" +
    "\004\012\364\001\002\000\012\042\123\043\125\046\uff75" +
    "\051\uff75\001\002\000\004\010\365\001\002\000\004\005" +
    "\366\001\002\000\004\006\367\001\002\000\012\045\uff2a" +
    "\046\uff2a\047\uff2a\051\uff2a\001\002\000\004\045\371\001" +
    "\002\000\004\014\372\001\002\000\004\045\373\001\002" +
    "\000\020\005\105\011\374\026\107\037\106\044\115\050" +
    "\110\052\112\001\002\000\004\012\376\001\002\000\012" +
    "\042\123\043\125\046\uff74\051\uff74\001\002\000\004\010" +
    "\377\001\002\000\004\005\u0100\001\002\000\004\006\u0101" +
    "\001\002\000\012\045\uff29\046\uff29\047\uff29\051\uff29\001" +
    "\002\000\012\045\uffe9\046\uffe9\047\uffe9\051\uffe9\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\047\051\017\001\002\000\004\017\uffe8\001\002" +
    "\000\012\045\uffe1\046\uffe1\047\uffe1\051\uffe1\001\002\000" +
    "\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006" +
    "\046\047\051\017\001\002\000\004\017\uffe0\001\002\000" +
    "\006\046\047\051\017\001\002\000\004\017\uffe3\001\002" +
    "\000\004\017\uffdb\001\002\000\006\046\047\051\017\001" +
    "\002\000\004\017\uffe4\001\002\000\004\045\u0110\001\002" +
    "\000\004\044\u0111\001\002\000\006\016\u0114\045\u0113\001" +
    "\002\000\014\002\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2" +
    "\001\002\000\004\025\u0118\001\002\000\004\045\u0115\001" +
    "\002\000\004\044\uffbf\001\002\000\004\044\u0111\001\002" +
    "\000\014\002\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\001" +
    "\002\000\004\045\u0119\001\002\000\006\036\344\044\342" +
    "\001\002\000\016\002\uffbd\016\u011b\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\001\002\000\004\045\u011c\001\002\000\004" +
    "\044\uffc1\001\002\000\004\044\u0111\001\002\000\014\002" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\001\002\000\006" +
    "\007\u0120\010\u0121\001\002\000\004\005\u0124\001\002\000" +
    "\004\005\u0122\001\002\000\004\006\u0123\001\002\000\012" +
    "\045\uff28\046\uff28\047\uff28\051\uff28\001\002\000\016\005" +
    "\105\026\107\037\106\044\115\050\110\052\112\001\002" +
    "\000\010\006\u0126\042\123\043\125\001\002\000\012\045" +
    "\uff27\046\uff27\047\uff27\051\uff27\001\002\000\006\046\047" +
    "\051\017\001\002\000\004\017\uffeb\001\002\000\004\017" +
    "\uffdd\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\006\046\047\051\017\001\002\000\004\017" +
    "\u012d\001\002\000\004\045\u012e\001\002\000\004\004\u012f" +
    "\001\002\000\006\002\uffb9\046\uffb9\001\002\000\004\044" +
    "\u0131\001\002\000\004\045\u0132\001\002\000\004\025\u0133" +
    "\001\002\000\004\045\u0134\001\002\000\006\036\344\044" +
    "\342\001\002\000\006\006\uffb6\016\u0136\001\002\000\004" +
    "\045\u0137\001\002\000\004\035\041\001\002\000\004\006" +
    "\uffb5\001\002\000\006\002\uffec\046\022\001\002\000\004" +
    "\002\ufffa\001\002\000\004\045\u0140\001\002\000\012\002" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002\000\012\002\uffc6" +
    "\045\012\046\uffc6\047\010\001\002\000\006\002\uffec\046" +
    "\022\001\002\000\004\002\ufff7\001\002\000\004\044\u0141" +
    "\001\002\000\004\005\u0142\001\002\000\006\006\u0143\035" +
    "\041\001\002\000\012\045\u01f6\046\uffb0\047\uffb0\051\uffb0" +
    "\001\002\000\004\006\u0145\001\002\000\012\045\u0146\046" +
    "\uffae\047\uffae\051\uffae\001\002\000\004\025\u014d\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\047\051\017\001\002\000\004\017\u014a\001\002" +
    "\000\004\045\u014b\001\002\000\004\015\u014c\001\002\000" +
    "\012\002\uffad\045\uffad\046\uffad\047\uffad\001\002\000\004" +
    "\045\u014e\001\002\000\006\036\344\044\342\001\002\000" +
    "\012\045\uffb4\046\uffb4\047\uffb4\051\uffb4\001\002\000\012" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046" +
    "\u0153\051\017\001\002\000\006\046\u0153\051\017\001\002" +
    "\000\032\011\uffc6\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\044\uffc6\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\004\017\u0155\001\002\000\004\045\u0156\001" +
    "\002\000\004\015\u0157\001\002\000\012\002\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\001\002\000\026\011\061\017\uffce\024" +
    "\062\027\uffd1\030\uffd4\031\uffd9\033\u0159\044\071\046\u0153" +
    "\051\017\001\002\000\004\045\u01f3\001\002\000\006\046" +
    "\u0153\051\017\001\002\000\012\045\012\046\uffc6\047\010" +
    "\051\uffc6\001\002\000\004\017\uffcd\001\002\000\012\045" +
    "\012\046\uffc6\047\010\051\uffc6\001\002\000\004\027\u01ac" +
    "\001\002\000\006\046\u0153\051\017\001\002\000\004\030" +
    "\u0182\001\002\000\004\031\u0167\001\002\000\006\046\u0153" +
    "\051\017\001\002\000\012\045\012\046\uffc6\047\010\051" +
    "\uffc6\001\002\000\006\046\u0153\051\017\001\002\000\004" +
    "\017\uffd5\001\002\000\004\017\uffc9\001\002\000\004\045" +
    "\u016c\001\002\000\012\045\uffd8\046\uffd8\047\uffd8\051\uffd8" +
    "\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001" +
    "\002\000\006\046\u0153\051\017\001\002\000\004\017\uffd7" +
    "\001\002\000\004\044\101\001\002\000\004\021\u016e\001" +
    "\002\000\004\045\u016f\001\002\000\016\005\105\026\107" +
    "\037\106\044\115\050\110\052\112\001\002\000\012\042" +
    "\123\043\125\046\u0173\051\017\001\002\000\004\022\u01e4" +
    "\001\002\000\006\046\u0173\051\017\001\002\000\030\011" +
    "\uffc6\022\uffc6\024\uffc6\027\uffc6\030\uffc6\033\uffc6\044\uffc6" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\024\011" +
    "\061\022\uff57\024\062\027\uff5a\030\uff5f\033\u0159\044\071" +
    "\046\u0173\051\017\001\002\000\006\046\u0173\051\017\001" +
    "\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\004\027\u01ac\001\002\000\006\046\u0173\051\017\001\002" +
    "\000\004\030\u0182\001\002\000\006\046\u0173\051\017\001" +
    "\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\004\022\uff56\001\002\000\006\046\u0173\051\017\001" +
    "\002\000\004\022\uff5b\001\002\000\004\022\uff52\001\002" +
    "\000\012\045\uff5e\046\uff5e\047\uff5e\051\uff5e\001\002\000" +
    "\004\045\u0183\001\002\000\016\005\105\026\107\037\106" +
    "\044\115\050\110\052\112\001\002\000\006\020\u0185\040" +
    "\170\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\006\046\u0188\051\017\001\002\000\006\046" +
    "\u0188\051\017\001\002\000\032\011\uffc6\017\uffc6\024\uffc6" +
    "\027\uffc6\031\uffc6\033\uffc6\034\uffc6\044\uffc6\045\012\046" +
    "\uffc6\047\010\051\uffc6\001\002\000\006\017\u018a\034\uff78" +
    "\001\002\000\004\045\u0193\001\002\000\004\034\u018c\001" +
    "\002\000\012\045\uff77\046\uff77\047\uff77\051\uff77\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\u0188\051\017\001\002\000\004\017\u0190\001\002" +
    "\000\004\045\u0191\001\002\000\004\030\u0192\001\002\000" +
    "\012\045\uff76\046\uff76\047\uff76\051\uff76\001\002\000\004" +
    "\030\u0194\001\002\000\012\045\uff79\046\uff79\047\uff79\051" +
    "\uff79\001\002\000\026\011\061\017\uff83\024\062\027\uff86" +
    "\031\uff8b\033\u0159\034\uff83\044\071\046\u0188\051\017\001" +
    "\002\000\004\027\u01ac\001\002\000\004\031\u0167\001\002" +
    "\000\006\046\u0188\051\017\001\002\000\012\045\012\046" +
    "\uffc6\047\010\051\uffc6\001\002\000\012\045\012\046\uffc6" +
    "\047\010\051\uffc6\001\002\000\006\046\u0188\051\017\001" +
    "\002\000\006\046\u0188\051\017\001\002\000\012\045\012" +
    "\046\uffc6\047\010\051\uffc6\001\002\000\006\017\uff82\034" +
    "\uff82\001\002\000\006\046\u0188\051\017\001\002\000\006" +
    "\017\uff87\034\uff87\001\002\000\006\017\uff7e\034\uff7e\001" +
    "\002\000\006\017\uff80\034\uff80\001\002\000\006\046\u0188" +
    "\051\017\001\002\000\006\017\uff88\034\uff88\001\002\000" +
    "\006\046\u0188\051\017\001\002\000\006\017\uff8c\034\uff8c" +
    "\001\002\000\006\017\uff81\034\uff81\001\002\000\012\045" +
    "\uff8a\046\uff8a\047\uff8a\051\uff8a\001\002\000\012\045\012" +
    "\046\uffc6\047\010\051\uffc6\001\002\000\006\046\u0188\051" +
    "\017\001\002\000\006\017\uff89\034\uff89\001\002\000\004" +
    "\045\u01b1\001\002\000\012\045\uff85\046\uff85\047\uff85\051" +
    "\uff85\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\006\046\u0188\051\017\001\002\000\006\017" +
    "\uff84\034\uff84\001\002\000\004\032\u01b2\001\002\000\004" +
    "\045\u01b3\001\002\000\016\005\105\026\107\037\106\044" +
    "\115\050\110\052\112\001\002\000\010\040\170\046\u01b6" +
    "\051\017\001\002\000\006\046\u01b6\051\017\001\002\000" +
    "\030\011\uffc6\023\uffc6\024\uffc6\030\uffc6\031\uffc6\033\uffc6" +
    "\044\uffc6\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\004\023\u01b8\001\002\000\012\045\uff50\046\uff50\047\uff50" +
    "\051\uff50\001\002\000\024\011\061\023\uff38\024\062\030" +
    "\uff40\031\uff3b\033\u0159\044\071\046\u01b6\051\017\001\002" +
    "\000\006\046\u01b6\051\017\001\002\000\004\031\u0167\001" +
    "\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\004\030\u0182\001\002\000\012\045\012\046\uffc6\047" +
    "\010\051\uffc6\001\002\000\006\046\u01b6\051\017\001\002" +
    "\000\006\046\u01b6\051\017\001\002\000\004\023\uff37\001" +
    "\002\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002" +
    "\000\006\046\u01b6\051\017\001\002\000\004\023\uff3c\001" +
    "\002\000\004\023\uff33\001\002\000\004\023\uff35\001\002" +
    "\000\006\046\u01b6\051\017\001\002\000\004\023\uff3d\001" +
    "\002\000\012\045\uff3f\046\uff3f\047\uff3f\051\uff3f\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\u01b6\051\017\001\002\000\004\023\uff3e\001\002" +
    "\000\006\046\u01b6\051\017\001\002\000\004\023\uff41\001" +
    "\002\000\012\045\uff3a\046\uff3a\047\uff3a\051\uff3a\001\002" +
    "\000\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000" +
    "\006\046\u01b6\051\017\001\002\000\004\023\uff39\001\002" +
    "\000\004\023\uff36\001\002\000\004\023\uff34\001\002\000" +
    "\006\017\uff7f\034\uff7f\001\002\000\012\045\012\046\uffc6" +
    "\047\010\051\uffc6\001\002\000\006\046\u0173\051\017\001" +
    "\002\000\004\022\uff5d\001\002\000\004\022\uff54\001\002" +
    "\000\012\045\uff59\046\uff59\047\uff59\051\uff59\001\002\000" +
    "\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006" +
    "\046\u0173\051\017\001\002\000\004\022\uff58\001\002\000" +
    "\006\046\u0173\051\017\001\002\000\004\022\uff5c\001\002" +
    "\000\006\046\u0173\051\017\001\002\000\004\022\uff60\001" +
    "\002\000\004\022\uff55\001\002\000\004\022\uff53\001\002" +
    "\000\012\045\uff6f\046\uff6f\047\uff6f\051\uff6f\001\002\000" +
    "\012\045\uffd3\046\uffd3\047\uffd3\051\uffd3\001\002\000\012" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046" +
    "\u0153\051\017\001\002\000\004\017\uffd2\001\002\000\004" +
    "\017\uffcc\001\002\000\012\045\uffd0\046\uffd0\047\uffd0\051" +
    "\uffd0\001\002\000\012\045\012\046\uffc6\047\010\051\uffc6" +
    "\001\002\000\006\046\u0153\051\017\001\002\000\004\017" +
    "\uffcf\001\002\000\006\046\u0153\051\017\001\002\000\004" +
    "\017\uffda\001\002\000\006\046\u0153\051\017\001\002\000" +
    "\004\017\uffd6\001\002\000\004\017\uffcb\001\002\000\016" +
    "\005\105\026\107\037\106\044\115\050\110\052\112\001" +
    "\002\000\012\042\123\043\125\046\uffc8\051\uffc8\001\002" +
    "\000\004\017\uffca\001\002\000\004\025\u01fd\001\002\000" +
    "\012\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006" +
    "\046\047\051\017\001\002\000\004\017\u01fa\001\002\000" +
    "\004\045\u01fb\001\002\000\004\015\u01fc\001\002\000\012" +
    "\002\uffaf\045\uffaf\046\uffaf\047\uffaf\001\002\000\004\045" +
    "\u01fe\001\002\000\006\036\344\044\342\001\002\000\012" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\001\002\000\012\045" +
    "\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046\u0153" +
    "\051\017\001\002\000\004\017\u0203\001\002\000\004\045" +
    "\u0204\001\002\000\004\015\u0205\001\002\000\012\002\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\001\002\000\004\002\uffff\001" +
    "\002\000\004\045\u020c\001\002\000\012\002\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\001\002\000\012\002\uffc6\045\012\046" +
    "\uffc6\047\010\001\002\000\006\002\uffec\046\022\001\002" +
    "\000\004\002\ufff4\001\002\000\004\044\u020d\001\002\000" +
    "\012\045\uff32\046\uff32\047\uff32\051\uff32\001\002\000\012" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046" +
    "\u0211\051\017\001\002\000\006\046\u0211\051\017\001\002" +
    "\000\016\017\uffc6\044\uffc6\045\012\046\uffc6\047\010\051" +
    "\uffc6\001\002\000\004\017\uff31\001\002\000\004\017\u0214" +
    "\001\002\000\004\045\u0215\001\002\000\004\013\u0216\001" +
    "\002\000\012\002\uff30\045\uff30\046\uff30\047\uff30\001\002" +
    "\000\012\017\uff2e\044\u0218\046\u0211\051\017\001\002\000" +
    "\004\045\u021d\001\002\000\004\017\uff2d\001\002\000\012" +
    "\045\012\046\uffc6\047\010\051\uffc6\001\002\000\006\046" +
    "\u0211\051\017\001\002\000\004\017\uff2f\001\002\000\004" +
    "\025\u021e\001\002\000\004\045\u021f\001\002\000\006\036" +
    "\344\044\342\001\002\000\012\045\uff2b\046\uff2b\047\uff2b" +
    "\051\uff2b\001\002\000\004\017\uff2c\001\002\000\012\002" +
    "\uffc6\045\012\046\uffc6\047\010\001\002\000\006\002\uffec" +
    "\046\022\001\002\000\004\002\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0222\000\022\002\013\003\005\005\017\050\014\051" +
    "\012\053\010\055\004\057\003\001\001\000\004\007\u0221" +
    "\001\001\000\004\043\u0207\001\001\000\002\001\001\000" +
    "\020\003\u0205\005\017\050\014\051\012\053\010\055\004" +
    "\057\003\001\001\000\002\001\001\000\004\011\u013b\001" +
    "\001\000\002\001\001\000\004\013\033\001\001\000\002" +
    "\001\001\000\006\005\027\006\026\001\001\000\004\060" +
    "\024\001\001\000\002\001\001\000\022\003\020\004\022" +
    "\005\017\050\014\051\012\053\010\055\004\057\003\001" +
    "\001\000\002\001\001\000\020\003\023\005\017\050\014" +
    "\051\012\053\010\055\004\057\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\025\001\001\000\002" +
    "\001\001\000\004\004\031\001\001\000\006\005\027\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\042\001\001" +
    "\000\002\001\001\000\004\100\u0129\001\001\000\002\001" +
    "\001\000\004\101\044\001\001\000\006\005\027\006\045" +
    "\001\001\000\006\015\050\050\047\001\001\000\006\005" +
    "\027\006\055\001\001\000\006\015\054\050\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\062\012\064" +
    "\015\063\031\056\046\057\047\065\050\047\061\067\063" +
    "\071\065\066\001\001\000\006\015\u0128\050\047\001\001" +
    "\000\006\005\027\006\u0126\001\001\000\002\001\001\000" +
    "\004\075\u010e\001\001\000\006\005\027\006\u010c\001\001" +
    "\000\002\001\001\000\006\015\u010b\050\047\001\001\000" +
    "\006\005\027\006\u0109\001\001\000\004\037\u0105\001\001" +
    "\000\004\020\u0101\001\001\000\002\001\001\000\004\032" +
    "\073\001\001\000\002\001\001\000\004\064\074\001\001" +
    "\000\006\005\027\006\075\001\001\000\006\015\076\050" +
    "\047\001\001\000\002\001\001\000\004\034\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\112\023\110\025\113\001\001\000\010\012\112" +
    "\023\110\025\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\027\006\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\137\050" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\112\023\110\024\120\025\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\112\023" +
    "\110\025\126\001\001\000\002\001\001\000\012\012\112" +
    "\023\110\024\130\025\121\001\001\000\002\001\001\000" +
    "\010\012\112\023\110\025\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\323\050" +
    "\135\001\001\000\006\005\027\006\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\145\012\147\031" +
    "\142\035\143\046\144\047\151\050\135\122\150\124\146" +
    "\001\001\000\006\035\322\050\135\001\001\000\002\001" +
    "\001\000\006\005\027\006\320\001\001\000\006\005\027" +
    "\006\316\001\001\000\004\037\312\001\001\000\006\035" +
    "\311\050\135\001\001\000\004\020\154\001\001\000\006" +
    "\005\027\006\152\001\001\000\006\035\153\050\135\001" +
    "\001\000\002\001\001\000\004\123\306\001\001\000\002" +
    "\001\001\000\012\012\112\023\110\025\160\026\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\112\023\110\025\164\001" +
    "\001\000\002\001\001\000\010\012\112\023\110\025\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\173\050\171\001\001\000\006\027\303\050\171\001\001" +
    "\000\006\005\027\006\207\001\001\000\004\116\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\177" +
    "\001\001\000\006\005\027\006\200\001\001\000\006\027" +
    "\201\050\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\215\012\216\027\210\031\213" +
    "\046\214\047\217\050\171\106\212\110\211\001\001\000" +
    "\002\001\001\000\004\037\235\001\001\000\004\032\230" +
    "\001\001\000\006\027\227\050\171\001\001\000\006\005" +
    "\027\006\225\001\001\000\006\005\027\006\223\001\001" +
    "\000\006\027\222\050\171\001\001\000\006\005\027\006" +
    "\220\001\001\000\006\027\221\050\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\224\050\171\001" +
    "\001\000\002\001\001\000\006\027\226\050\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\231\001" +
    "\001\000\006\005\027\006\232\001\001\000\006\027\233" +
    "\050\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\236\001\001\000\006\005\027\006\237\001\001" +
    "\000\006\027\240\050\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\112\023\110" +
    "\025\160\026\244\001\001\000\006\041\246\050\245\001" +
    "\001\000\006\041\302\050\245\001\001\000\002\001\001" +
    "\000\006\005\027\006\250\001\001\000\024\007\254\012" +
    "\257\031\252\041\251\046\253\047\260\050\245\132\255" +
    "\134\256\001\001\000\002\001\001\000\006\041\300\050" +
    "\245\001\001\000\006\005\027\006\276\001\001\000\006" +
    "\005\027\006\274\001\001\000\004\020\270\001\001\000" +
    "\004\032\264\001\001\000\006\041\263\050\245\001\001" +
    "\000\006\005\027\006\261\001\001\000\006\041\262\050" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\265\001\001\000\006\005\027\006\266\001\001\000" +
    "\006\041\267\050\245\001\001\000\002\001\001\000\004" +
    "\133\271\001\001\000\006\005\027\006\272\001\001\000" +
    "\006\041\273\050\245\001\001\000\002\001\001\000\006" +
    "\041\275\050\245\001\001\000\002\001\001\000\006\041" +
    "\277\050\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\112\023\110\025\160\026\305\001\001\000\002" +
    "\001\001\000\006\005\027\006\307\001\001\000\006\035" +
    "\310\050\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\313\001\001\000\006\005\027\006\314\001" +
    "\001\000\006\035\315\050\135\001\001\000\002\001\001" +
    "\000\006\035\317\050\135\001\001\000\002\001\001\000" +
    "\006\035\321\050\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\112\023\326\001\001\000\006\005\027\006\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\112\023\110\025\337\001\001\000" +
    "\002\001\001\000\004\022\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\112\023\110\025\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\112\023\110\025\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\112\023\110\025\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\112\023\110\025\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u0102\001\001\000\006" +
    "\005\027\006\u0103\001\001\000\006\015\u0104\050\047\001" +
    "\001\000\002\001\001\000\004\066\u0106\001\001\000\006" +
    "\005\027\006\u0107\001\001\000\006\015\u0108\050\047\001" +
    "\001\000\002\001\001\000\006\015\u010a\050\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u010d\050" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0115\001\001" +
    "\000\004\010\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u011c\001\001\000\004\010\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\112\023\110\025\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0127\050\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\027\006\u012a" +
    "\001\001\000\006\015\u012b\050\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u0137\001\001\000\002\001" +
    "\001\000\004\004\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u013c\001\001\000\006\005\027\006" +
    "\u013d\001\001\000\004\004\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0143\001" +
    "\001\000\004\104\u01f6\001\001\000\002\001\001\000\004" +
    "\105\u0146\001\001\000\002\001\001\000\006\005\027\006" +
    "\u0147\001\001\000\006\015\u0148\050\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u014e\001\001\000\004" +
    "\102\u014f\001\001\000\006\005\027\006\u0150\001\001\000" +
    "\006\016\u0153\050\u0151\001\001\000\006\016\u01f4\050\u0151" +
    "\001\001\000\006\005\027\006\u0157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\u015c\012\u0161\016\u015b\017\u015e\031\u0159\046" +
    "\u015a\047\u0162\050\u0151\067\u0160\071\u015f\073\u015d\001\001" +
    "\000\002\001\001\000\006\016\u01f1\050\u0151\001\001\000" +
    "\006\005\027\006\u01ef\001\001\000\002\001\001\000\006" +
    "\005\027\006\u01ed\001\001\000\004\040\u01e9\001\001\000" +
    "\006\016\u01e8\050\u0151\001\001\000\004\021\u01e4\001\001" +
    "\000\004\033\u0167\001\001\000\006\016\u0165\050\u0151\001" +
    "\001\000\006\005\027\006\u0163\001\001\000\006\016\u0164" +
    "\050\u0151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\u0168\001\001\000\006\005\027" +
    "\006\u0169\001\001\000\006\016\u016a\050\u0151\001\001\000" +
    "\002\001\001\000\004\034\u016c\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\112\023\110\025\u016f\001" +
    "\001\000\006\036\u0170\050\u0171\001\001\000\002\001\001" +
    "\000\006\036\u01e2\050\u0171\001\001\000\006\005\027\006" +
    "\u0173\001\001\000\026\007\u0176\012\u017a\017\u0178\031\u0174" +
    "\036\u017c\046\u0175\047\u017b\050\u0171\126\u0179\130\u0177\001" +
    "\001\000\006\036\u01e1\050\u0171\001\001\000\006\005\027" +
    "\006\u01df\001\001\000\006\005\027\006\u01dd\001\001\000" +
    "\004\040\u01d9\001\001\000\006\036\u01d8\050\u0171\001\001" +
    "\000\004\021\u0180\001\001\000\006\036\u017f\050\u0171\001" +
    "\001\000\006\005\027\006\u017d\001\001\000\002\001\001" +
    "\000\006\036\u017e\050\u0171\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\127\u01d5\001\001\000\002\001\001" +
    "\000\012\012\112\023\110\025\160\026\u0183\001\001\000" +
    "\002\001\001\000\006\005\027\006\u0185\001\001\000\006" +
    "\030\u0188\050\u0186\001\001\000\006\030\u01d4\050\u0186\001" +
    "\001\000\006\005\027\006\u0194\001\001\000\004\120\u018a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\121" +
    "\u018c\001\001\000\006\005\027\006\u018d\001\001\000\006" +
    "\030\u018e\050\u0186\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\u0199\012\u019b\017\u019a\030" +
    "\u019d\031\u0197\046\u0198\047\u019c\050\u0186\112\u0196\114\u0195" +
    "\001\001\000\004\040\u01ac\001\001\000\004\033\u01a7\001" +
    "\001\000\006\030\u01a6\050\u0186\001\001\000\006\005\027" +
    "\006\u01a4\001\001\000\006\005\027\006\u01a2\001\001\000" +
    "\006\030\u01a1\050\u0186\001\001\000\006\030\u01a0\050\u0186" +
    "\001\001\000\006\005\027\006\u019e\001\001\000\002\001" +
    "\001\000\006\030\u019f\050\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\u01a3\050" +
    "\u0186\001\001\000\002\001\001\000\006\030\u01a5\050\u0186" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\u01a8\001\001\000\006\005\027\006\u01a9\001\001\000\006" +
    "\030\u01aa\050\u0186\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\115\u01ad\001\001\000\006\005\027\006\u01ae" +
    "\001\001\000\006\030\u01af\050\u0186\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\112" +
    "\023\110\025\160\026\u01b3\001\001\000\006\042\u01b6\050" +
    "\u01b4\001\001\000\006\042\u01d3\050\u01b4\001\001\000\006" +
    "\005\027\006\u01b8\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\u01bd\012\u01bf\017\u01be\031\u01b9\042\u01c0" +
    "\046\u01bb\047\u01c1\050\u01b4\136\u01bc\140\u01ba\001\001\000" +
    "\006\042\u01d2\050\u01b4\001\001\000\004\033\u01ce\001\001" +
    "\000\006\005\027\006\u01cc\001\001\000\004\021\u01c8\001" +
    "\001\000\006\005\027\006\u01c6\001\001\000\006\042\u01c5" +
    "\050\u01b4\001\001\000\006\042\u01c4\050\u01b4\001\001\000" +
    "\002\001\001\000\006\005\027\006\u01c2\001\001\000\006" +
    "\042\u01c3\050\u01b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\u01c7\050\u01b4\001\001" +
    "\000\002\001\001\000\004\137\u01c9\001\001\000\006\005" +
    "\027\006\u01ca\001\001\000\006\042\u01cb\050\u01b4\001\001" +
    "\000\002\001\001\000\006\042\u01cd\050\u01b4\001\001\000" +
    "\002\001\001\000\004\141\u01cf\001\001\000\006\005\027" +
    "\006\u01d0\001\001\000\006\042\u01d1\050\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\027\006\u01d6\001\001\000\006\036" +
    "\u01d7\050\u0171\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\131\u01da\001\001\000\006\005\027\006\u01db\001" +
    "\001\000\006\036\u01dc\050\u0171\001\001\000\002\001\001" +
    "\000\006\036\u01de\050\u0171\001\001\000\002\001\001\000" +
    "\006\036\u01e0\050\u0171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\u01e5\001\001\000\006\005\027\006\u01e6\001\001\000\006" +
    "\016\u01e7\050\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\u01ea\001\001\000\006\005\027\006\u01eb" +
    "\001\001\000\006\016\u01ec\050\u0151\001\001\000\002\001" +
    "\001\000\006\016\u01ee\050\u0151\001\001\000\002\001\001" +
    "\000\006\016\u01f0\050\u0151\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\112\023\110\025\u01f3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\027\006\u01f7\001\001\000\006\015\u01f8\050\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u01fe" +
    "\001\001\000\004\103\u01ff\001\001\000\006\005\027\006" +
    "\u0200\001\001\000\006\016\u0201\050\u0151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u0208" +
    "\001\001\000\006\005\027\006\u0209\001\001\000\004\004" +
    "\u020a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\142\u020d\001\001\000\006\005\027\006\u020e\001\001\000" +
    "\006\044\u0211\050\u020f\001\001\000\006\044\u0220\050\u020f" +
    "\001\001\000\006\005\027\006\u0216\001\001\000\004\143" +
    "\u0212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\u0218\045\u0219\050" +
    "\u020f\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\027\006\u021a\001\001\000\006\044\u021b\050\u020f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u021f\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\027\006\u0222\001\001\000\004\004\u0223" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Vbasicsintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Vbasicsintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Vbasicsintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public static int errors = 0;
     public  int errors_count =0;
public void report_error(String message, Object info) {
    if (info instanceof String){
	errors_count++; 
      /*System.err.println( info + " "+ message);*/
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error() {
    //report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void error_ambito(String id, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  el identificador: "+id+" ya existe dentro del mismo ambito): Semantic error");
    }

      
    public TablasDeSimbolos t_simbolos = new TablasDeSimbolos();
    public TablaSimbolos t_principal = new TablaSimbolos("Principal");
    public String ambito_actual ="1.0";
    public String nueva_estructura;
    public int offset = 0;
    public Stack<Integer> stack_offset = new Stack<Integer>();

    public void sumar_ambito(){
            String[] partes = ambito_actual.split("\\.");
            int add = Integer.parseInt(partes[partes.length-1]) + 1;
            ambito_actual = "";
            for(int i=0; i<partes.length-1; i++){
                ambito_actual += partes[i]+".";
            }
            ambito_actual += add;
            
    }

    public void remover_ambito(){
            
            String[] partes = ambito_actual.split("\\.");
            ambito_actual = "";
            for(int i=0; i<partes.length-1; i++){
                if(i==0)
                    ambito_actual += partes[i];
                else
                    ambito_actual += "."+partes[i];
            }
            
    }

        public String remover(String ambito){
            
            String[] partes = ambito_actual.split("\\.");
            String ambito_a = "";
            for(int i=0; i<partes.length-1; i++){
                if(i==0)
                    ambito_a += partes[i];
                else
                    ambito_a += "."+partes[i];
            }

           return ambito_a;
            
    }

     public int index_primer_id;
     public void asignar_offset_ids(){
         Tipo t = t_simbolos.getTabla("Principal").get_ids().get(t_simbolos.getTabla("Principal").get_ids().size()-1).getTipo();
         
         for(int i=index_primer_id; i< t_simbolos.getTabla("Principal").get_ids().size();i++){
            if(t_simbolos.getTabla("Principal").get_ids().get(i).getOffset()==-1){
                t_simbolos.getTabla("Principal").get_ids().get(i).setTipo(t);
                t_simbolos.getTabla("Principal").get_ids().get(i).setOffset(offset);
                offset+=t.getTamano();
            }

         }
         
     }
  




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Vbasicsintaxis$actions {
  private final Vbasicsintaxis parser;

  /** Constructor */
  CUP$Vbasicsintaxis$actions(Vbasicsintaxis parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Vbasicsintaxis$do_action_part00000000(
    int                        CUP$Vbasicsintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Vbasicsintaxis$parser,
    java.util.Stack            CUP$Vbasicsintaxis$stack,
    int                        CUP$Vbasicsintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Vbasicsintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Vbasicsintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Vbasicsintaxis$parser.done_parsing();
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal);} sumar_ambito(); ambito_actual+=".0"; stack_offset.push(offset); offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$0",39, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito(); offset=stack_offset.pop();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$1",40, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= NT$0 BLOQUE_PROCEDIMIENTO NT$1 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); }sumar_ambito(); ambito_actual+=".0"; stack_offset.push(offset); offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$2",41, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$3",42, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA ::= NT$2 BLOQUE_FUNCION NT$3 INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); } sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$4",43, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$5",44, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA ::= NT$4 BLOQUE_ESTRUCTURA NT$5 INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); }
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$6",45, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROGRAMA ::= NT$6 DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Programa RESULT =null;
 parser.report_error("ERROR","SYNTAX"); 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$7",46, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROGRAMA ::= error NT$7 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$8",47, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito(); offset=stack_offset.pop();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$9",48, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_SUB ::= newline INDENTACION2 NT$8 BLOQUE_IF NT$9 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$10 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$10",49, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito(); offset=stack_offset.pop();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$11",50, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_SUB ::= newline INDENTACION2 NT$10 BLOQUE_FOR NT$11 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$12",51, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito();offset=stack_offset.pop(); 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$13",52, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_SUB ::= newline INDENTACION2 NT$12 BLOQUE_WHILE NT$13 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$14",53, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito(); 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$15",54, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$14 BLOQUE_FOR_FUNCTION NT$15 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$16 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$16",55, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$17 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito(); 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$17",56, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$16 BLOQUE_IF_FUNCTION NT$17 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$18 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$18",57, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$19 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 remover_ambito(); 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$19",58, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$18 BLOQUE_WHILE_FUNCTION NT$19 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$20 ::= 
            {
              Tipo RESULT =null;
index_primer_id=t_simbolos.getTabla("Principal").get_ids().size();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$20",59, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_VARIABLE ::= dim NT$20 espacio DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 asignar_offset_ids();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$21 ::= 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
  if(!t_simbolos.existe_id(id, remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright, remover(ambito_actual) ,offset));
                                                 offset+= t.getTamano();
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$21",60, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio NT$21 DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
  if(!t_simbolos.existe_id(id, remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id, new integert(), idleft, idright, remover(ambito_actual),-1));
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$22",61, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_VARIABLE2 ::= identificador coma espacio NT$22 DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		  if(!t_simbolos.existe_id(id,remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright, remover(ambito_actual),-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= tipovar 
            {
              Tipo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 if(tv.toLowerCase().equals("string")){RESULT = new stringt();}
                       if(tv.toLowerCase().equals("boolean")){RESULT = new booleant();}
                        if(tv.toLowerCase().equals("integer")){RESULT = new integert();}
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= identificador 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$23 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Funcion();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t , idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$23",62, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis NT$23 INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;

              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$24 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
 if(!t_simbolos.existe_id(id, "1", "Principal")){
                                                Tipo t = new Funcion();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$24",63, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis NT$24 INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$25 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                    Tipo t1 = new Funcion();
                                                    t_simbolos.getTabla("Principal").add_id(new Token(id,t1, idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$25",64, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS NT$25 INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-13)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-15)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$26 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                    Tipo t1 = new Funcion();
                                                    t_simbolos.getTabla("Principal").add_id(new Token(id,t1, idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$26",65, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS NT$26 INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-14)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$27 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Funcion();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$27",66, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis NT$27 INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$28 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Funcion();
                                            t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$28",67, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis NT$28 INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_CONDICIONALES ::= EXP oprel espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_CONDICIONALES ::= EXP asignacion espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_CONDICIONALES ::= EXP_CONDICIONALES oplog espacio EXP_CONDICIONALES 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Condition ec2 = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP opsum espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP opmult espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORES ::= identificador punto identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$29 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$29",68, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$30 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$30",69, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTENIDO_IF ::= newline INDENTACION2 NT$29 BLOQUE_FOR NT$30 INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$31 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$31",70, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$32 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$32",71, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTENIDO_IF ::= newline INDENTACION2 NT$31 BLOQUE_WHILE NT$32 INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$33 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$33",72, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$34 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$34",73, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 NT$33 BLOQUE_FOR_FUNCTION NT$34 INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$35 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$35",74, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$36 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$36",75, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 NT$35 BLOQUE_WHILE_FUNCTION NT$36 INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$37 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$37",76, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$38 ::= 
            {
              Stmt_If RESULT =(Stmt_If) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$38",77, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF NT$37 Else NT$38 INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-12)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$39 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$39",78, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$40 ::= 
            {
              Stmt_If RESULT =(Stmt_If) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$40",79, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION NT$39 Else NT$40 INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-11)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-13)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BLOQUE_ASIGNACION ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // BLOQUE_ASIGNACION_FOR ::= identificador espacio as espacio TIPOS espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // BLOQUE_ASIGNACION_FOR ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$41 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$41",80, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$42 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$42",81, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_FOR ::= newline INDENTACION2 NT$41 BLOQUE_IF NT$42 INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_FOR ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$43 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$43",82, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$44 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$44",83, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO_FOR ::= newline INDENTACION2 NT$43 BLOQUE_WHILE NT$44 INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$45 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$45",84, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$46 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$46",85, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 NT$45 BLOQUE_IF_FUNCTION NT$46 INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$47 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$47",86, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$48 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$48",87, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 NT$47 BLOQUE_WHILE_FUNCTION NT$48 INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$49 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$49",88, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$50 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$50",89, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONTENIDO_WHILE ::= newline INDENTACION2 NT$49 BLOQUE_IF NT$50 INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTENIDO_WHILE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$51 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$51",90, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$52 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$52",91, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONTENIDO_WHILE ::= newline INDENTACION2 NT$51 BLOQUE_FOR NT$52 INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$53 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$53",92, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NT$54 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$54",93, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 NT$53 BLOQUE_IF_FUNCTION NT$54 INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$55 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$55",94, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$56 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
remover_ambito();
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$56",95, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 NT$55 BLOQUE_FOR_FUNCTION NT$56 INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NT$57 ::= 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Registro();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,"1",-1));
                                                t_simbolos.addTabla(new TablaSimbolos(id));
                                                nueva_estructura = id;
                                            }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$57",96, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$58 ::= 
            {
              Stmt_Type RESULT =(Stmt_Type) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;

                                                int tamano=0;
                                                for(int i=0; i<t_simbolos.getTabla(id).get_ids().size();i++){
                                                    tamano+=t_simbolos.getTabla(id).get_ids().get(i).getTipo().getTamano();
                                                }
                                                t_simbolos.getTabla("Principal").get_id(id).getTipo().setTamano(tamano);
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("NT$58",97, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // BLOQUE_ESTRUCTURA ::= type espacio identificador NT$57 INDENTACION2 CONTENIDO_ESTRUCTURA NT$58 end espacio type 
            {
              Stmt_Type RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Stmt_Type) ((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-7)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		 
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		  if(!t_simbolos.existe_id(id, remover(ambito_actual), nueva_estructura)){
                                                t_simbolos.getTabla(nueva_estructura).add_id(new Token(id,t, idleft, idright, remover(ambito_actual),offset));
                                                 offset+= t.getTamano();
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BLOQUE_LECTURA ::= identificador punto identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-8)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-1)).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.elementAt(CUP$Vbasicsintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Vbasicsintaxis$stack.peek()).value;
		
              CUP$Vbasicsintaxis$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasicsintaxis$stack.peek()), RESULT);
            }
          return CUP$Vbasicsintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Vbasicsintaxis$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Vbasicsintaxis$do_action(
    int                        CUP$Vbasicsintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Vbasicsintaxis$parser,
    java.util.Stack            CUP$Vbasicsintaxis$stack,
    int                        CUP$Vbasicsintaxis$top)
    throws java.lang.Exception
    {
              return CUP$Vbasicsintaxis$do_action_part00000000(
                               CUP$Vbasicsintaxis$act_num,
                               CUP$Vbasicsintaxis$parser,
                               CUP$Vbasicsintaxis$stack,
                               CUP$Vbasicsintaxis$top);
    }
}

}

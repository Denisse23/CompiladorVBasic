
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Vbasictipos extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Vbasictipos() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Vbasictipos(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Vbasictipos(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\002\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\015\005\000\002\015\006\000" +
    "\002\015\004\000\002\015\006\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\004\000\002\016\005" +
    "\000\002\016\006\000\002\016\006\000\002\016\004\000" +
    "\002\016\006\000\002\017\005\000\002\006\004\000\002" +
    "\006\002\000\002\005\003\000\002\005\003\000\002\007" +
    "\005\000\002\010\012\000\002\010\006\000\002\010\007" +
    "\000\002\022\003\000\002\022\003\000\002\013\014\000" +
    "\002\013\015\000\002\014\011\000\002\014\014\000\002" +
    "\011\021\000\002\011\020\000\002\011\014\000\002\011" +
    "\015\000\002\012\005\000\002\012\006\000\002\024\003" +
    "\000\002\024\006\000\002\026\006\000\002\026\006\000" +
    "\002\026\006\000\002\025\006\000\002\025\006\000\002" +
    "\025\004\000\002\025\006\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\027\007\000" +
    "\002\027\007\000\002\027\007\000\002\027\007\000\002" +
    "\027\007\000\002\027\004\000\002\027\005\000\002\027" +
    "\006\000\002\027\004\000\002\027\006\000\002\030\007" +
    "\000\002\030\007\000\002\030\007\000\002\030\007\000" +
    "\002\030\007\000\002\030\004\000\002\030\005\000\002" +
    "\030\006\000\002\030\006\000\002\030\004\000\002\030" +
    "\006\000\002\020\012\000\002\020\015\000\002\021\013" +
    "\000\002\021\016\000\002\031\007\000\002\031\011\000" +
    "\002\034\013\000\002\034\007\000\002\034\011\000\002" +
    "\032\012\000\002\033\012\000\002\035\007\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\035\004\000\002\035\005\000\002\035\006\000" +
    "\002\035\004\000\002\035\006\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\004\000\002\036\005\000\002\036\006" +
    "\000\002\036\006\000\002\036\004\000\002\036\006\000" +
    "\002\037\011\000\002\040\011\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\041\007\000\002\041" +
    "\007\000\002\041\004\000\002\041\005\000\002\041\006" +
    "\000\002\041\004\000\002\041\006\000\002\042\007\000" +
    "\002\042\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\004\000\002\042\005\000\002\042" +
    "\006\000\002\042\006\000\002\042\004\000\002\042\006" +
    "\000\002\043\012\000\002\044\007\000\002\044\004\000" +
    "\002\044\005\000\002\044\004\000\002\045\007\000\002" +
    "\046\013\000\002\046\015\000\002\046\007\000\002\047" +
    "\010\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e6\000\022\004\004\013\020\015\013\024\014\045" +
    "\010\046\006\047\007\051\022\001\002\000\004\045\u01d9" +
    "\001\002\000\004\002\001\001\002\000\020\004\004\013" +
    "\020\015\013\024\014\045\010\047\007\051\022\001\002" +
    "\000\072\002\uffda\004\uffda\006\uffda\011\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\051\uffda\001\002\000\072\002\uffd9\004" +
    "\uffd9\006\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\012\002\uffdb\045\010\046\uffdb\047\007" +
    "\001\002\000\004\002\u01d5\001\002\000\004\045\105\001" +
    "\002\000\004\045\070\001\002\000\012\002\uffdb\045\010" +
    "\046\uffdb\047\007\001\002\000\012\002\uffdb\045\010\046" +
    "\uffdb\047\007\001\002\000\012\002\uffdb\045\010\046\uffdb" +
    "\047\007\001\002\000\004\045\034\001\002\000\024\002" +
    "\ufff5\004\004\013\020\015\013\024\014\045\010\046\027" +
    "\047\007\051\022\001\002\000\014\002\uff62\045\uff62\046" +
    "\uff62\047\uff62\051\uff62\001\002\000\012\002\uffdb\045\010" +
    "\046\uffdb\047\007\001\002\000\006\002\ufff5\046\027\001" +
    "\002\000\064\002\uffdb\006\uffdb\011\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\060\002\uffdc\006\uffdc\011\uffdc\014\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\051\uffdc\001" +
    "\002\000\022\002\ufff6\004\004\013\020\015\013\024\014" +
    "\045\010\047\007\051\022\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\ufffd\001\002\000\004\044\035\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\040\051\022\001\002\000\006\046\040\051\022\001" +
    "\002\000\016\017\uffdb\044\uffdb\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\004\017\042\001\002\000\004\045" +
    "\043\001\002\000\004\013\044\001\002\000\012\002\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\001\002\000\012\017\uff6a\044" +
    "\046\046\040\051\022\001\002\000\004\045\053\001\002" +
    "\000\004\017\uff69\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\040\051\022\001\002" +
    "\000\004\017\uff6b\001\002\000\004\025\054\001\002\000" +
    "\004\045\055\001\002\000\006\036\060\044\056\001\002" +
    "\000\020\002\uffd3\006\uffd3\016\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\051\uffd3\001\002\000\012\045\uff67\046\uff67\047\uff67" +
    "\051\uff67\001\002\000\020\002\uffd4\006\uffd4\016\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002\000\004\017\uff68" +
    "\001\002\000\006\002\ufff5\046\027\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff5\046\027\001\002\000\004" +
    "\002\ufff9\001\002\000\006\002\ufff5\046\027\001\002\000" +
    "\004\002\ufffb\001\002\000\004\044\071\001\002\000\006" +
    "\016\074\045\073\001\002\000\014\002\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\051\uffd8\001\002\000\004\025\077\001\002" +
    "\000\004\045\075\001\002\000\004\044\071\001\002\000" +
    "\014\002\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002" +
    "\000\004\045\100\001\002\000\006\036\060\044\056\001" +
    "\002\000\016\002\uffd5\016\102\045\uffd5\046\uffd5\047\uffd5" +
    "\051\uffd5\001\002\000\004\045\103\001\002\000\004\044" +
    "\071\001\002\000\014\002\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\051\uffd7\001\002\000\004\044\106\001\002\000\004\005" +
    "\107\001\002\000\006\006\111\035\110\001\002\000\004" +
    "\045\u01cc\001\002\000\012\045\u01bf\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\004\006\113\001\002\000\012\045\115" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u013b\051" +
    "\022\001\002\000\014\025\116\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\001\002\000\004\045\117\001\002\000\006\036" +
    "\060\044\056\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\122\051\022\001\002\000" +
    "\032\011\uffdb\017\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\044\uffdb\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\122\051\022\001\002\000\004\017\125" +
    "\001\002\000\004\045\126\001\002\000\004\015\127\001" +
    "\002\000\012\002\uffce\045\uffce\046\uffce\047\uffce\001\002" +
    "\000\004\017\uffdf\001\002\000\026\011\143\017\uffe3\024" +
    "\014\027\145\030\140\031\134\033\141\044\151\046\122" +
    "\051\022\001\002\000\006\046\122\051\022\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004" +
    "\045\u0104\001\002\000\006\046\122\051\022\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\122\051\022\001\002\000\004\045\330\001\002\000" +
    "\004\045\326\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\004\012\314\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\045\240" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\004\017\uffe2\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\010\005\154\012\152\045" +
    "\153\001\002\000\004\044\222\001\002\000\004\014\212" +
    "\001\002\000\020\005\155\006\163\026\157\037\156\044" +
    "\167\050\160\052\162\001\002\000\016\005\155\026\157" +
    "\037\156\044\167\050\160\052\162\001\002\000\034\006" +
    "\uffbe\014\uffbe\016\uffbe\020\uffbe\021\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\001" +
    "\002\000\004\045\205\001\002\000\034\006\uffbc\014\uffbc" +
    "\016\uffbc\020\uffbc\021\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\001\002\000\034" +
    "\006\uffdb\014\uffdb\016\uffdb\020\uffdb\021\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\034\006\uffbd\014\uffbd\016\uffbd\020\uffbd\021" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\051\uffbd\001\002\000\034\006\uffca\014\uffca\016" +
    "\uffca\020\uffca\021\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\045\uffca\046\uffca\047\uffca\051\uffca\001\002\000\034\006" +
    "\uffb9\014\uffb9\016\uffb9\020\uffb9\021\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\001" +
    "\002\000\004\006\203\001\002\000\012\006\uffc8\016\173" +
    "\042\172\043\174\001\002\000\040\005\154\006\uffbf\012" +
    "\170\014\uffbf\016\uffbf\020\uffbf\021\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\001" +
    "\002\000\004\044\171\001\002\000\034\006\uffbb\014\uffbb" +
    "\016\uffbb\020\uffbb\021\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\001\002\000\004" +
    "\045\201\001\002\000\004\045\177\001\002\000\004\045" +
    "\175\001\002\000\016\005\155\026\157\037\156\044\167" +
    "\050\160\052\162\001\002\000\030\006\uffc2\014\uffc2\016" +
    "\uffc2\020\uffc2\021\uffc2\040\uffc2\041\uffc2\042\uffc2\043\174" +
    "\046\uffc2\051\uffc2\001\002\000\016\005\155\026\157\037" +
    "\156\044\167\050\160\052\162\001\002\000\004\006\uffc7" +
    "\001\002\000\016\005\155\026\157\037\156\044\167\050" +
    "\160\052\162\001\002\000\030\006\uffc3\014\uffc3\016\uffc3" +
    "\020\uffc3\021\uffc3\040\uffc3\041\uffc3\042\uffc3\043\174\046" +
    "\uffc3\051\uffc3\001\002\000\034\006\uffc9\014\uffc9\016\uffc9" +
    "\020\uffc9\021\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\001\002\000\030\006\uffc1" +
    "\014\uffc1\016\uffc1\020\uffc1\021\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\046\uffc1\051\uffc1\001\002\000\014\005\155" +
    "\037\156\044\167\050\160\052\162\001\002\000\034\006" +
    "\uffdb\014\uffdb\016\uffdb\020\uffdb\021\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\030\006\uffc0\014\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\046\uffc0\051\uffc0\001" +
    "\002\000\010\006\211\042\172\043\174\001\002\000\034" +
    "\006\uffba\014\uffba\016\uffba\020\uffba\021\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba\051\uffba" +
    "\001\002\000\004\045\213\001\002\000\020\005\155\011" +
    "\214\026\157\037\156\044\167\050\160\052\162\001\002" +
    "\000\004\012\216\001\002\000\012\042\172\043\174\046" +
    "\uff9f\051\uff9f\001\002\000\004\010\217\001\002\000\004" +
    "\005\220\001\002\000\004\006\221\001\002\000\012\045" +
    "\uff66\046\uff66\047\uff66\051\uff66\001\002\000\004\045\223" +
    "\001\002\000\004\014\224\001\002\000\004\045\225\001" +
    "\002\000\020\005\155\011\226\026\157\037\156\044\167" +
    "\050\160\052\162\001\002\000\004\012\230\001\002\000" +
    "\012\042\172\043\174\046\uff9e\051\uff9e\001\002\000\004" +
    "\010\231\001\002\000\004\005\232\001\002\000\004\006" +
    "\233\001\002\000\012\045\uff65\046\uff65\047\uff65\051\uff65" +
    "\001\002\000\006\046\122\051\022\001\002\000\004\017" +
    "\uffe6\001\002\000\006\046\122\051\022\001\002\000\004" +
    "\017\uffe7\001\002\000\004\032\241\001\002\000\004\045" +
    "\242\001\002\000\016\005\155\026\157\037\156\044\167" +
    "\050\160\052\162\001\002\000\010\040\255\046\254\051" +
    "\022\001\002\000\012\014\246\041\245\042\172\043\174" +
    "\001\002\000\004\045\251\001\002\000\004\045\247\001" +
    "\002\000\016\005\155\026\157\037\156\044\167\050\160" +
    "\052\162\001\002\000\016\020\uffc5\040\uffc5\042\172\043" +
    "\174\046\uffc5\051\uffc5\001\002\000\016\005\155\026\157" +
    "\037\156\044\167\050\160\052\162\001\002\000\016\020" +
    "\uffc6\040\uffc6\042\172\043\174\046\uffc6\051\uffc6\001\002" +
    "\000\006\046\254\051\022\001\002\000\030\011\uffdb\023" +
    "\uffdb\024\uffdb\030\uffdb\031\uffdb\033\uffdb\044\uffdb\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\004\045\260\001" +
    "\002\000\004\023\257\001\002\000\012\045\uff82\046\uff82" +
    "\047\uff82\051\uff82\001\002\000\016\005\155\026\157\037" +
    "\156\044\167\050\160\052\162\001\002\000\012\020\uffc4" +
    "\040\255\046\uffc4\051\uffc4\001\002\000\024\011\143\023" +
    "\uff72\024\014\030\140\031\134\033\141\044\151\046\254" +
    "\051\022\001\002\000\006\046\254\051\022\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004" +
    "\023\uff71\001\002\000\006\046\254\051\022\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\254\051\022\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\046\254\051\022\001\002\000\004" +
    "\023\uff74\001\002\000\006\046\254\051\022\001\002\000" +
    "\004\023\uff77\001\002\000\006\046\254\051\022\001\002" +
    "\000\004\023\uff75\001\002\000\004\023\uff6f\001\002\000" +
    "\006\046\254\051\022\001\002\000\004\023\uff73\001\002" +
    "\000\004\023\uff70\001\002\000\006\046\254\051\022\001" +
    "\002\000\004\023\uff76\001\002\000\004\023\uff6d\001\002" +
    "\000\004\023\uff6e\001\002\000\006\046\122\051\022\001" +
    "\002\000\004\017\uffe4\001\002\000\006\007\315\010\316" +
    "\001\002\000\004\005\321\001\002\000\004\005\317\001" +
    "\002\000\004\006\320\001\002\000\012\045\uff64\046\uff64" +
    "\047\uff64\051\uff64\001\002\000\016\005\155\026\157\037" +
    "\156\044\167\050\160\052\162\001\002\000\010\006\323" +
    "\042\172\043\174\001\002\000\012\045\uff63\046\uff63\047" +
    "\uff63\051\uff63\001\002\000\006\046\122\051\022\001\002" +
    "\000\004\017\uffe9\001\002\000\016\005\155\026\157\037" +
    "\156\044\167\050\160\052\162\001\002\000\012\042\172" +
    "\043\174\046\uffdd\051\uffdd\001\002\000\016\005\155\026" +
    "\157\037\156\044\167\050\160\052\162\001\002\000\006" +
    "\020\332\040\255\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\335\051\022\001\002" +
    "\000\006\046\335\051\022\001\002\000\032\011\uffdb\017" +
    "\uffdb\024\uffdb\027\uffdb\031\uffdb\033\uffdb\034\uffdb\044\uffdb" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\017" +
    "\337\034\340\001\002\000\004\045\346\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\335\051\022\001\002\000\004\017\343\001\002\000\004" +
    "\045\344\001\002\000\004\030\345\001\002\000\012\045" +
    "\uffa0\046\uffa0\047\uffa0\051\uffa0\001\002\000\004\030\347" +
    "\001\002\000\012\045\uffa1\046\uffa1\047\uffa1\051\uffa1\001" +
    "\002\000\026\011\143\017\uffa9\024\014\027\145\031\134" +
    "\033\141\034\uffa9\044\151\046\335\051\022\001\002\000" +
    "\006\046\335\051\022\001\002\000\006\046\335\051\022" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\335\051\022\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\006\017\uffa8\034\uffa8\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\006\046\335\051\022\001\002\000\006\017\uffab\034" +
    "\uffab\001\002\000\006\046\335\051\022\001\002\000\006" +
    "\017\uffae\034\uffae\001\002\000\006\046\335\051\022\001" +
    "\002\000\006\017\uffaa\034\uffaa\001\002\000\006\046\335" +
    "\051\022\001\002\000\006\017\uffac\034\uffac\001\002\000" +
    "\006\017\uffa6\034\uffa6\001\002\000\006\046\335\051\022" +
    "\001\002\000\006\017\uffad\034\uffad\001\002\000\006\017" +
    "\uffa7\034\uffa7\001\002\000\006\017\uffa4\034\uffa4\001\002" +
    "\000\006\017\uffa5\034\uffa5\001\002\000\004\017\uffe1\001" +
    "\002\000\006\046\122\051\022\001\002\000\004\017\uffe8" +
    "\001\002\000\004\017\uffe0\001\002\000\004\044\u0105\001" +
    "\002\000\006\012\u0126\045\u0127\001\002\000\004\021\u0107" +
    "\001\002\000\004\045\u0108\001\002\000\016\005\155\026" +
    "\157\037\156\044\167\050\160\052\162\001\002\000\012" +
    "\042\172\043\174\046\u010c\051\022\001\002\000\006\046" +
    "\u010c\051\022\001\002\000\004\022\u0124\001\002\000\030" +
    "\011\uffdb\022\uffdb\024\uffdb\027\uffdb\030\uffdb\033\uffdb\044" +
    "\uffdb\045\010\046\uffdb\047\007\051\uffdb\001\002\000\024" +
    "\011\143\022\uff89\024\014\027\145\030\140\033\141\044" +
    "\151\046\u010c\051\022\001\002\000\006\046\u010c\051\022" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u010c\051\022\001\002\000\004\022\uff88" +
    "\001\002\000\006\046\u010c\051\022\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\006\046\u010c\051\022\001" +
    "\002\000\004\022\uff8b\001\002\000\006\046\u010c\051\022" +
    "\001\002\000\004\022\uff8e\001\002\000\006\046\u010c\051" +
    "\022\001\002\000\004\022\uff8a\001\002\000\006\046\u010c" +
    "\051\022\001\002\000\004\022\uff8c\001\002\000\004\022" +
    "\uff86\001\002\000\004\022\uff87\001\002\000\006\046\u010c" +
    "\051\022\001\002\000\004\022\uff8d\001\002\000\004\022" +
    "\uff84\001\002\000\012\045\uff99\046\uff99\047\uff99\051\uff99" +
    "\001\002\000\004\022\uff85\001\002\000\004\044\u0132\001" +
    "\002\000\006\014\u0129\025\u0128\001\002\000\004\045\u012c" +
    "\001\002\000\004\045\u012a\001\002\000\016\005\155\026" +
    "\157\037\156\044\167\050\160\052\162\001\002\000\010" +
    "\021\uff9c\042\172\043\174\001\002\000\006\036\060\044" +
    "\056\001\002\000\004\045\u012e\001\002\000\004\014\u012f" +
    "\001\002\000\004\045\u0130\001\002\000\016\005\155\026" +
    "\157\037\156\044\167\050\160\052\162\001\002\000\010" +
    "\021\uff9d\042\172\043\174\001\002\000\004\045\u0133\001" +
    "\002\000\004\014\u0134\001\002\000\004\045\u0135\001\002" +
    "\000\016\005\155\026\157\037\156\044\167\050\160\052" +
    "\162\001\002\000\010\021\uff9b\042\172\043\174\001\002" +
    "\000\006\046\122\051\022\001\002\000\004\017\uffe5\001" +
    "\002\000\004\017\uffde\001\002\000\006\046\u013b\051\022" +
    "\001\002\000\030\011\uffdb\017\uffdb\024\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\044\uffdb\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\004\017\u013d\001\002\000\004\045\u013e\001" +
    "\002\000\004\015\u013f\001\002\000\012\002\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\001\002\000\024\011\143\017\uffee\024" +
    "\014\027\u0149\030\u0146\031\u0143\044\151\046\u013b\051\022" +
    "\001\002\000\006\046\u013b\051\022\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\045\u019b" +
    "\001\002\000\006\046\u013b\051\022\001\002\000\004\017" +
    "\uffed\001\002\000\004\045\u0175\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\045\u0153\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u013b\051\022\001\002\000\004\017\ufff0\001\002\000\006" +
    "\046\u013b\051\022\001\002\000\004\017\uffef\001\002\000" +
    "\006\046\u013b\051\022\001\002\000\004\017\ufff4\001\002" +
    "\000\004\032\u0154\001\002\000\004\045\u0155\001\002\000" +
    "\016\005\155\026\157\037\156\044\167\050\160\052\162" +
    "\001\002\000\010\040\255\046\u0159\051\022\001\002\000" +
    "\004\023\u0170\001\002\000\006\046\u0159\051\022\001\002" +
    "\000\026\011\uffdb\023\uffdb\024\uffdb\030\uffdb\031\uffdb\044" +
    "\uffdb\045\010\046\uffdb\047\007\051\uffdb\001\002\000\022" +
    "\011\143\023\uff7c\024\014\030\u0146\031\u0143\044\151\046" +
    "\u0159\051\022\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\004\023\uff7b\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u0159" +
    "\051\022\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\u0159\051\022\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u0159" +
    "\051\022\001\002\000\004\023\uff7e\001\002\000\004\023" +
    "\uff78\001\002\000\006\046\u0159\051\022\001\002\000\004" +
    "\023\uff7f\001\002\000\006\046\u0159\051\022\001\002\000" +
    "\004\023\uff81\001\002\000\004\023\uff7a\001\002\000\006" +
    "\046\u0159\051\022\001\002\000\004\023\uff80\001\002\000" +
    "\006\046\u0159\051\022\001\002\000\004\023\uff7d\001\002" +
    "\000\004\023\uff79\001\002\000\012\045\uff83\046\uff83\047" +
    "\uff83\051\uff83\001\002\000\006\046\u013b\051\022\001\002" +
    "\000\004\017\ufff1\001\002\000\006\046\u013b\051\022\001" +
    "\002\000\004\017\ufff2\001\002\000\016\005\155\026\157" +
    "\037\156\044\167\050\160\052\162\001\002\000\006\020" +
    "\u0177\040\255\001\002\000\006\046\u0179\051\022\001\002" +
    "\000\006\046\u0179\051\022\001\002\000\030\011\uffdb\017" +
    "\uffdb\024\uffdb\027\uffdb\031\uffdb\034\uffdb\044\uffdb\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\006\017\u017b\034" +
    "\u017c\001\002\000\004\045\u0182\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u0179\051" +
    "\022\001\002\000\004\017\u017f\001\002\000\004\045\u0180" +
    "\001\002\000\004\030\u0181\001\002\000\012\045\uffa2\046" +
    "\uffa2\047\uffa2\051\uffa2\001\002\000\004\030\u0183\001\002" +
    "\000\012\045\uffa3\046\uffa3\047\uffa3\051\uffa3\001\002\000" +
    "\024\011\143\017\uffb3\024\014\027\u0149\031\u0143\034\uffb3" +
    "\044\151\046\u0179\051\022\001\002\000\006\017\uffb2\034" +
    "\uffb2\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\u0179\051\022\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\u0179\051\022" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u0179\051\022\001\002\000\006\017\uffb5" +
    "\034\uffb5\001\002\000\006\017\uffaf\034\uffaf\001\002\000" +
    "\006\046\u0179\051\022\001\002\000\006\017\uffb6\034\uffb6" +
    "\001\002\000\006\046\u0179\051\022\001\002\000\006\017" +
    "\uffb8\034\uffb8\001\002\000\006\046\u0179\051\022\001\002" +
    "\000\006\017\uffb4\034\uffb4\001\002\000\006\017\uffb1\034" +
    "\uffb1\001\002\000\006\046\u0179\051\022\001\002\000\006" +
    "\017\uffb7\034\uffb7\001\002\000\006\017\uffb0\034\uffb0\001" +
    "\002\000\004\017\uffec\001\002\000\004\044\u0105\001\002" +
    "\000\004\021\u019d\001\002\000\004\045\u019e\001\002\000" +
    "\016\005\155\026\157\037\156\044\167\050\160\052\162" +
    "\001\002\000\012\042\172\043\174\046\u01a1\051\022\001" +
    "\002\000\006\046\u01a1\051\022\001\002\000\026\011\uffdb" +
    "\022\uffdb\024\uffdb\027\uffdb\030\uffdb\044\uffdb\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\022\u01a3\001\002" +
    "\000\012\045\uff9a\046\uff9a\047\uff9a\051\uff9a\001\002\000" +
    "\022\011\143\022\uff93\024\014\027\u0149\030\u0146\044\151" +
    "\046\u01a1\051\022\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\004\022\uff92\001\002\000\006" +
    "\046\u01a1\051\022\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\046\u01a1\051\022\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u01a1\051\022\001\002\000\004\022\uff95\001\002\000\004" +
    "\022\uff8f\001\002\000\006\046\u01a1\051\022\001\002\000" +
    "\004\022\uff96\001\002\000\006\046\u01a1\051\022\001\002" +
    "\000\004\022\uff98\001\002\000\006\046\u01a1\051\022\001" +
    "\002\000\004\022\uff94\001\002\000\004\022\uff91\001\002" +
    "\000\006\046\u01a1\051\022\001\002\000\004\022\uff97\001" +
    "\002\000\004\022\uff90\001\002\000\006\046\u013b\051\022" +
    "\001\002\000\004\017\ufff3\001\002\000\004\017\uffea\001" +
    "\002\000\004\017\uffeb\001\002\000\006\046\u013b\051\022" +
    "\001\002\000\014\025\u01c0\045\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\004\045\u01c1\001\002\000\006\036\060" +
    "\044\056\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\046\122\051\022\001\002\000\004" +
    "\017\u01c5\001\002\000\004\045\u01c6\001\002\000\004\015" +
    "\u01c7\001\002\000\012\002\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\001\002\000\004\017\u01c9\001\002\000\004\045\u01ca\001" +
    "\002\000\004\015\u01cb\001\002\000\012\002\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\001\002\000\004\044\u01cd\001\002\000" +
    "\004\045\u01ce\001\002\000\004\025\u01cf\001\002\000\004" +
    "\045\u01d0\001\002\000\006\036\060\044\056\001\002\000" +
    "\006\006\uffd0\016\u01d2\001\002\000\004\045\u01d3\001\002" +
    "\000\004\035\110\001\002\000\004\006\uffcf\001\002\000" +
    "\004\002\000\001\002\000\006\002\ufff5\046\027\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\uffff\001\002\000" +
    "\004\044\u01da\001\002\000\004\005\u01db\001\002\000\006" +
    "\006\u01dc\035\110\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\004\006\u01de\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u013b\051\022\001\002\000\004\017\u01e1\001\002\000\004" +
    "\045\u01e2\001\002\000\004\004\u01e3\001\002\000\012\002" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\006\046\u013b" +
    "\051\022\001\002\000\004\017\u01e6\001\002\000\004\045" +
    "\u01e7\001\002\000\004\004\u01e8\001\002\000\012\002\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e6\000\022\002\011\003\004\005\020\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01d7\005\020\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\u01d5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\065\001\001\000\006\005\024\006\063\001" +
    "\001\000\006\005\024\006\061\001\001\000\002\001\001" +
    "\000\022\003\031\004\032\005\020\007\015\011\014\013" +
    "\016\043\022\050\010\001\001\000\002\001\001\000\006" +
    "\005\024\006\023\001\001\000\004\004\027\001\001\000" +
    "\006\005\024\006\025\001\001\000\002\001\001\000\020" +
    "\003\030\005\020\007\015\011\014\013\016\043\022\050" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\024\006\035\001\001\000\006\044\040\050\036\001\001" +
    "\000\006\044\060\050\036\001\001\000\006\005\024\006" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\046\045\047\050" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\050\001\001\000\006\044\051\050\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\062" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\004\004\066\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\111\001\001\000\002\001\001" +
    "\000\006\005\024\006\u01bd\001\001\000\002\001\001\000" +
    "\006\005\024\006\113\001\001\000\006\015\u013b\050\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\117\001\001\000\006\005\024\006\120\001\001\000\006" +
    "\016\123\050\122\001\001\000\006\005\024\006\130\001" +
    "\001\000\006\016\127\050\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\141\012\131\016\146\017\136" +
    "\021\132\031\134\033\135\040\143\046\145\047\147\050" +
    "\122\001\001\000\006\016\u0138\050\122\001\001\000\006" +
    "\005\024\006\u0136\001\001\000\002\001\001\000\006\016" +
    "\u0102\050\122\001\001\000\006\005\024\006\u0100\001\001" +
    "\000\006\016\377\050\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\024\006\323\001\001\000\002" +
    "\001\001\000\006\005\024\006\311\001\001\000\002\001" +
    "\001\000\006\005\024\006\235\001\001\000\002\001\001" +
    "\000\006\005\024\006\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\163\023\160" +
    "\024\164\025\165\001\001\000\010\012\163\023\160\025" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\163\023\160\025\175\001\001\000" +
    "\002\001\001\000\012\012\163\023\160\024\177\025\165" +
    "\001\001\000\002\001\001\000\010\012\163\023\160\025" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\163\023\205\001\001\000\006\005" +
    "\024\006\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\163\023" +
    "\160\025\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\163\023\160\025\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\234\050\122\001\001\000\002\001\001\000\006\016\236" +
    "\050\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\163\023\160\025\243\026\242" +
    "\001\001\000\006\042\255\050\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\163" +
    "\023\160\025\247\001\001\000\002\001\001\000\010\012" +
    "\163\023\160\025\251\001\001\000\002\001\001\000\006" +
    "\042\310\050\252\001\001\000\006\005\024\006\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\163\023\160\025\243\026\260\001\001\000" +
    "\002\001\001\000\026\007\270\012\262\017\267\021\263" +
    "\031\265\033\266\042\264\046\271\047\272\050\252\001" +
    "\001\000\006\042\307\050\252\001\001\000\006\005\024" +
    "\006\305\001\001\000\002\001\001\000\006\042\304\050" +
    "\252\001\001\000\006\005\024\006\302\001\001\000\006" +
    "\042\301\050\252\001\001\000\006\005\024\006\277\001" +
    "\001\000\006\005\024\006\275\001\001\000\006\005\024" +
    "\006\273\001\001\000\006\042\274\050\252\001\001\000" +
    "\002\001\001\000\006\042\276\050\252\001\001\000\002" +
    "\001\001\000\006\042\300\050\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\303\050\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\306\050" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\312\050\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\163\023" +
    "\160\025\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\324\050\122\001\001\000\002\001\001\000" +
    "\010\012\163\023\160\025\326\001\001\000\002\001\001" +
    "\000\012\012\163\023\160\025\243\026\330\001\001\000" +
    "\002\001\001\000\006\005\024\006\332\001\001\000\006" +
    "\030\335\050\333\001\001\000\006\030\376\050\333\001" +
    "\001\000\006\005\024\006\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\340\001\001\000" +
    "\006\030\341\050\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\007\354\012\350\017\353" +
    "\030\357\031\351\033\352\040\355\046\356\047\360\050" +
    "\333\001\001\000\006\030\375\050\333\001\001\000\006" +
    "\030\374\050\333\001\001\000\006\005\024\006\372\001" +
    "\001\000\006\030\371\050\333\001\001\000\006\005\024" +
    "\006\367\001\001\000\006\005\024\006\365\001\001\000" +
    "\006\005\024\006\363\001\001\000\002\001\001\000\006" +
    "\005\024\006\361\001\001\000\006\030\362\050\333\001" +
    "\001\000\002\001\001\000\006\030\364\050\333\001\001" +
    "\000\002\001\001\000\006\030\366\050\333\001\001\000" +
    "\002\001\001\000\006\030\370\050\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\373\050\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0101\050" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\163\023\160\025\u0108\001\001" +
    "\000\006\036\u010a\050\u0109\001\001\000\006\036\u0124\050" +
    "\u0109\001\001\000\002\001\001\000\006\005\024\006\u010c" +
    "\001\001\000\026\007\u0112\012\u010d\017\u0111\021\u010e\031" +
    "\u010f\036\u0110\040\u0113\046\u0114\047\u0115\050\u0109\001\001" +
    "\000\006\036\u0122\050\u0109\001\001\000\006\005\024\006" +
    "\u0120\001\001\000\006\036\u011f\050\u0109\001\001\000\002" +
    "\001\001\000\006\036\u011e\050\u0109\001\001\000\006\005" +
    "\024\006\u011c\001\001\000\006\005\024\006\u011a\001\001" +
    "\000\006\005\024\006\u0118\001\001\000\006\005\024\006" +
    "\u0116\001\001\000\006\036\u0117\050\u0109\001\001\000\002" +
    "\001\001\000\006\036\u0119\050\u0109\001\001\000\002\001" +
    "\001\000\006\036\u011b\050\u0109\001\001\000\002\001\001" +
    "\000\006\036\u011d\050\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u0121\050\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\163\023" +
    "\160\025\u012a\001\001\000\002\001\001\000\004\022\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\160\025\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\160\025\u0135\001\001\000\002" +
    "\001\001\000\006\016\u0137\050\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01bc\050\u0139\001\001" +
    "\000\006\005\024\006\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\u0147\012\u0140\015\u0144\020\u0141\031\u0143\032\u0146\037" +
    "\u014a\046\u0149\047\u014b\050\u0139\001\001\000\006\015\u01bb" +
    "\050\u0139\001\001\000\006\005\024\006\u01b9\001\001\000" +
    "\002\001\001\000\006\015\u0199\050\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\024\006\u0172\001" +
    "\001\000\006\005\024\006\u0170\001\001\000\002\001\001" +
    "\000\006\005\024\006\u0150\001\001\000\006\005\024\006" +
    "\u014e\001\001\000\006\005\024\006\u014c\001\001\000\006" +
    "\015\u014d\050\u0139\001\001\000\002\001\001\000\006\015" +
    "\u014f\050\u0139\001\001\000\002\001\001\000\006\015\u0151" +
    "\050\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\163\023\160\025\243\026\u0155" +
    "\001\001\000\006\041\u0156\050\u0157\001\001\000\002\001" +
    "\001\000\006\041\u016e\050\u0157\001\001\000\006\005\024" +
    "\006\u0159\001\001\000\024\007\u015f\012\u0160\020\u015c\031" +
    "\u015d\032\u015a\041\u015b\046\u015e\047\u0161\050\u0157\001\001" +
    "\000\006\005\024\006\u016c\001\001\000\002\001\001\000" +
    "\006\005\024\006\u016a\001\001\000\006\041\u0169\050\u0157" +
    "\001\001\000\006\005\024\006\u0167\001\001\000\006\005" +
    "\024\006\u0165\001\001\000\006\041\u0164\050\u0157\001\001" +
    "\000\006\005\024\006\u0162\001\001\000\006\041\u0163\050" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\u0166\050\u0157\001\001\000\002\001\001\000\006\041" +
    "\u0168\050\u0157\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\u016b\050\u0157\001\001\000\002\001\001\000" +
    "\006\041\u016d\050\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u0171\050\u0139\001" +
    "\001\000\002\001\001\000\006\015\u0173\050\u0139\001\001" +
    "\000\002\001\001\000\012\012\163\023\160\025\243\026" +
    "\u0175\001\001\000\002\001\001\000\006\027\u0179\050\u0177" +
    "\001\001\000\006\027\u0198\050\u0177\001\001\000\006\005" +
    "\024\006\u0183\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\024\006\u017c\001\001\000\006\027\u017d\050" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\u0189\012\u018a\027\u0184\031\u0186\032\u0185" +
    "\037\u0187\046\u0188\047\u018b\050\u0177\001\001\000\002\001" +
    "\001\000\006\005\024\006\u0196\001\001\000\006\027\u0195" +
    "\050\u0177\001\001\000\006\005\024\006\u0193\001\001\000" +
    "\006\005\024\006\u0191\001\001\000\006\005\024\006\u018f" +
    "\001\001\000\006\027\u018e\050\u0177\001\001\000\006\005" +
    "\024\006\u018c\001\001\000\006\027\u018d\050\u0177\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\u0190\050" +
    "\u0177\001\001\000\002\001\001\000\006\027\u0192\050\u0177" +
    "\001\001\000\002\001\001\000\006\027\u0194\050\u0177\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u0197" +
    "\050\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u019b\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\163\023\160\025\u019e\001" +
    "\001\000\006\035\u01a1\050\u019f\001\001\000\006\035\u01b8" +
    "\050\u019f\001\001\000\006\005\024\006\u01a3\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\u01a9\012\u01aa" +
    "\020\u01a4\031\u01a6\035\u01a5\037\u01a7\046\u01a8\047\u01ab\050" +
    "\u019f\001\001\000\006\005\024\006\u01b6\001\001\000\002" +
    "\001\001\000\006\035\u01b5\050\u019f\001\001\000\006\005" +
    "\024\006\u01b3\001\001\000\006\005\024\006\u01b1\001\001" +
    "\000\006\005\024\006\u01af\001\001\000\006\035\u01ae\050" +
    "\u019f\001\001\000\006\005\024\006\u01ac\001\001\000\006" +
    "\035\u01ad\050\u019f\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u01b0\050\u019f\001\001\000\002\001\001" +
    "\000\006\035\u01b2\050\u019f\001\001\000\002\001\001\000" +
    "\006\035\u01b4\050\u019f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\u01b7\050\u019f\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01ba\050\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u01c7\050\u0139\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u01c1\001\001\000\006\005\024\006" +
    "\u01c2\001\001\000\006\016\u01c3\050\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u01d0\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u01d3\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u01d6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u01dc\001\001\000\006" +
    "\005\024\006\u01e3\001\001\000\002\001\001\000\006\005" +
    "\024\006\u01de\001\001\000\006\015\u01df\050\u0139\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01e4\050\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Vbasictipos$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Vbasictipos$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Vbasictipos$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
    }
    public Programa programaT;



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Vbasictipos$actions {
  private final Vbasictipos parser;

  /** Constructor */
  CUP$Vbasictipos$actions(Vbasictipos parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Vbasictipos$do_action_part00000000(
    int                        CUP$Vbasictipos$act_num,
    java_cup.runtime.lr_parser CUP$Vbasictipos$parser,
    java.util.Stack            CUP$Vbasictipos$stack,
    int                        CUP$Vbasictipos$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Vbasictipos$result;

      /* select the action based on the action number */
      switch (CUP$Vbasictipos$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		programaT = p;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = start_val;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Vbasictipos$parser.done_parsing();
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p; programaT = p;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p2;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT=p2; RESULT.addNode(bp); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p2; RESULT.addNode(be);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p2; RESULT.addListNode(dv); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = p;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(bi); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.addAll(dv); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cs; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cs; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cs; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bi); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Return("return"); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = dv2;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); Stmt_Variable temp = (Stmt_Variable)RESULT.get(RESULT.size()-2); RESULT.get(RESULT.size()-1).addNode(temp.getTipo()); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= tipovar 
            {
              Node RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Node(tv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= identificador 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Node(id);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = lp; RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-12)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-14)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-13)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters"));  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp);  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments"));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments")); RESULT.getArguments().addListNode(a);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =a; RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP_CONDICIONALES ::= EXP oprel espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Condition(opr); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP_CONDICIONALES ::= EXP asignacion espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Condition("="); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP_CONDICIONALES ::= EXP_CONDICIONALES oplog espacio EXP_CONDICIONALES 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Condition ec2 = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Condition(ol); RESULT.addNode(ec); RESULT.addNode(ec2);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= EXP opsum espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(os); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= EXP opmult espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(om); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT =  v;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = new Not("not"); RESULT.addNode(v);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(id); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(tf); RESULT.setTipo_tabla(new booleant()); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(n); RESULT.setTipo_tabla(new integert()); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(c);  RESULT.setTipo_tabla(new stringt()); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= identificador punto identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Exp(id+"."+id2); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = e; RESULT.setTipo_tabla(e.getTipo_tabla());
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		 RESULT = bllf;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(br);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-9)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-11)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BLOQUE_ASIGNACION ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(id+"."+id2)); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BLOQUE_ASIGNACION_FOR ::= identificador espacio as espacio TIPOS espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT= new Stmt_Asignacion_For("="); RESULT.addNode(new Stmt_Variable("var")); RESULT.getIdentificadorOVar().addNode(new Node(id)); RESULT.getIdentificadorOVar().addNode(t); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BLOQUE_ASIGNACION_FOR ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(id+"."+id2)); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTENIDO_FOR ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-6)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_WHILE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.addAll(dv);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(br);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-3)).value;
		RESULT = new Stmt_Type("type"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(ce); 
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-7)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ce; RESULT.add(dve);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ce;
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-2)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = ce; RESULT.add(bc);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Variable("as"); RESULT.addNode(new Node(id)); RESULT.addNode(t);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(id));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BLOQUE_LECTURA ::= identificador punto identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(id+"."+id2));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-10)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		RESULT = new Stmt_Lectura("read");
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-4)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-1)).value;
		RESULT = new Stmt_Escritura("write"); RESULT.addNode(e);
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.elementAt(CUP$Vbasictipos$top-5)), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Vbasictipos$stack.peek()).value;
		RESULT = new Stmt_Comentario("comment"); RESULT.addNode(new Node(c));
              CUP$Vbasictipos$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), ((java_cup.runtime.Symbol)CUP$Vbasictipos$stack.peek()), RESULT);
            }
          return CUP$Vbasictipos$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Vbasictipos$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Vbasictipos$do_action(
    int                        CUP$Vbasictipos$act_num,
    java_cup.runtime.lr_parser CUP$Vbasictipos$parser,
    java.util.Stack            CUP$Vbasictipos$stack,
    int                        CUP$Vbasictipos$top)
    throws java.lang.Exception
    {
              return CUP$Vbasictipos$do_action_part00000000(
                               CUP$Vbasictipos$act_num,
                               CUP$Vbasictipos$parser,
                               CUP$Vbasictipos$stack,
                               CUP$Vbasictipos$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import java.util.Stack;
import java.util.Collections;
import pc.tabla.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VbasicSintaxisAmbito extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VbasicSintaxisAmbito() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VbasicSintaxisAmbito(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbasicSintaxisAmbito(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\055\002" +
    "\000\002\056\002\000\002\003\006\000\002\057\002\000" +
    "\002\060\002\000\002\003\007\000\002\061\002\000\002" +
    "\062\002\000\002\003\007\000\002\063\002\000\002\003" +
    "\006\000\002\003\005\000\002\064\002\000\002\003\005" +
    "\000\002\004\004\000\002\004\003\000\002\004\002\000" +
    "\002\015\007\000\002\065\002\000\002\066\002\000\002" +
    "\015\011\000\002\067\002\000\002\070\002\000\002\015" +
    "\011\000\002\015\007\000\002\015\007\000\002\071\002" +
    "\000\002\072\002\000\002\015\011\000\002\015\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\015\006\000\002\016\007\000\002\073\002\000\002\074" +
    "\002\000\002\016\011\000\002\016\007\000\002\016\007" +
    "\000\002\075\002\000\002\076\002\000\002\016\011\000" +
    "\002\077\002\000\002\100\002\000\002\016\011\000\002" +
    "\016\004\000\002\016\005\000\002\016\006\000\002\016" +
    "\006\000\002\016\004\000\002\016\006\000\002\017\005" +
    "\000\002\006\004\000\002\006\002\000\002\005\003\000" +
    "\002\005\003\000\002\101\002\000\002\007\006\000\002" +
    "\102\002\000\002\010\013\000\002\103\002\000\002\010" +
    "\007\000\002\010\007\000\002\022\003\000\002\022\003" +
    "\000\002\104\002\000\002\013\015\000\002\105\002\000" +
    "\002\013\016\000\002\014\011\000\002\106\002\000\002" +
    "\014\015\000\002\011\021\000\002\011\020\000\002\011" +
    "\014\000\002\011\015\000\002\012\005\000\002\012\006" +
    "\000\002\024\003\000\002\024\006\000\002\026\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\010\000\002" +
    "\054\003\000\002\054\006\000\002\054\006\000\002\025" +
    "\006\000\002\025\006\000\002\025\004\000\002\025\006" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\003\000\002\051\005\000\002\051\005\000\002\027" +
    "\007\000\002\107\002\000\002\110\002\000\002\027\011" +
    "\000\002\027\007\000\002\111\002\000\002\112\002\000" +
    "\002\027\011\000\002\027\004\000\002\027\005\000\002" +
    "\027\006\000\002\027\004\000\002\027\006\000\002\030" +
    "\007\000\002\113\002\000\002\114\002\000\002\030\011" +
    "\000\002\030\007\000\002\115\002\000\002\116\002\000" +
    "\002\030\011\000\002\030\004\000\002\030\005\000\002" +
    "\030\006\000\002\030\006\000\002\030\004\000\002\030" +
    "\006\000\002\020\012\000\002\117\002\000\002\120\002" +
    "\000\002\020\017\000\002\021\013\000\002\121\002\000" +
    "\002\122\002\000\002\021\020\000\002\123\002\000\002" +
    "\031\010\000\002\031\007\000\002\124\002\000\002\034" +
    "\010\000\002\034\007\000\002\032\012\000\002\033\012" +
    "\000\002\035\007\000\002\125\002\000\002\126\002\000" +
    "\002\035\011\000\002\035\007\000\002\127\002\000\002" +
    "\130\002\000\002\035\011\000\002\035\004\000\002\035" +
    "\005\000\002\035\006\000\002\035\004\000\002\035\006" +
    "\000\002\036\007\000\002\131\002\000\002\132\002\000" +
    "\002\036\011\000\002\036\007\000\002\133\002\000\002" +
    "\134\002\000\002\036\011\000\002\036\004\000\002\036" +
    "\005\000\002\036\006\000\002\036\006\000\002\036\004" +
    "\000\002\036\006\000\002\037\011\000\002\040\011\000" +
    "\002\041\007\000\002\135\002\000\002\136\002\000\002" +
    "\041\011\000\002\041\007\000\002\137\002\000\002\140" +
    "\002\000\002\041\011\000\002\041\004\000\002\041\005" +
    "\000\002\041\006\000\002\041\004\000\002\041\006\000" +
    "\002\042\007\000\002\141\002\000\002\142\002\000\002" +
    "\042\011\000\002\042\007\000\002\143\002\000\002\144" +
    "\002\000\002\042\011\000\002\042\004\000\002\042\005" +
    "\000\002\042\006\000\002\042\006\000\002\042\004\000" +
    "\002\042\006\000\002\145\002\000\002\146\002\000\002" +
    "\043\014\000\002\044\007\000\002\044\004\000\002\044" +
    "\005\000\002\044\004\000\002\045\007\000\002\147\002" +
    "\000\002\046\014\000\002\046\013\000\002\047\010\000" +
    "\002\050\003\000\002\052\003\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0218\000\024\003\016\004\ufffc\013\ufff6\015\ufff9\024" +
    "\ufff3\046\012\047\007\050\010\052\017\001\002\000\004" +
    "\024\062\001\002\000\004\013\u01fd\001\002\000\004\002" +
    "\001\001\002\000\022\003\016\004\ufffc\013\ufff6\015\ufff9" +
    "\024\ufff3\046\012\050\010\052\017\001\002\000\110\002" +
    "\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\033\uffc5\034\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\004\015\u013d\001\002\000" +
    "\110\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\033\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\001\002\000\004\004\035\001" +
    "\002\000\004\002\033\001\002\000\012\002\uffc6\046\012" +
    "\047\uffc6\050\010\001\002\000\006\002\ufff0\047\ufff0\001" +
    "\002\000\014\002\uff28\046\uff28\047\uff28\050\uff28\052\uff28" +
    "\001\002\000\026\002\uffec\003\016\004\ufffc\013\ufff6\015" +
    "\ufff9\024\ufff3\046\012\047\022\050\010\052\017\001\002" +
    "\000\004\002\ufffe\001\002\000\024\002\uffed\003\016\004" +
    "\ufffc\013\ufff6\015\ufff9\024\ufff3\046\012\050\010\052\017" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\uffee\001" +
    "\002\000\006\002\uffec\047\022\001\002\000\004\002\uffef" +
    "\001\002\000\006\002\uffec\047\022\001\002\000\100\002" +
    "\uffc6\005\uffc6\006\uffc6\011\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\012\047" +
    "\uffc6\050\010\051\uffc6\052\uffc6\053\uffc6\001\002\000\074" +
    "\002\uffc7\005\uffc7\006\uffc7\011\uffc7\014\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\001\002\000\004\002\ufff1\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufffb\047\ufffb" +
    "\001\002\000\004\046\036\001\002\000\004\045\037\001" +
    "\002\000\004\005\040\001\002\000\006\006\041\035\uffb8" +
    "\001\002\000\012\046\uffba\047\uffba\050\uffba\052\uffba\001" +
    "\002\000\004\035\043\001\002\000\004\046\u012b\001\002" +
    "\000\004\006\045\001\002\000\012\046\012\047\uffc6\050" +
    "\010\052\uffc6\001\002\000\006\047\047\052\017\001\002" +
    "\000\030\011\uffc6\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\045\uffc6\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\047\052\017\001\002\000\004\017\052\001" +
    "\002\000\004\046\053\001\002\000\004\004\054\001\002" +
    "\000\006\002\uffb7\047\uffb7\001\002\000\004\017\uffdc\001" +
    "\002\000\024\011\061\017\uffdf\024\062\027\uffe2\030\uffea" +
    "\031\uffe7\045\073\047\047\052\017\001\002\000\006\047" +
    "\047\052\017\001\002\000\012\046\012\047\uffc6\050\010" +
    "\052\uffc6\001\002\000\004\012\u0123\001\002\000\004\046" +
    "\uffc3\001\002\000\006\012\343\046\uff27\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\004\046" +
    "\u0106\001\002\000\004\017\uffde\001\002\000\006\047\047" +
    "\052\017\001\002\000\012\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\004\027\257\001\002\000\004\030\157" +
    "\001\002\000\010\005\123\012\122\046\360\001\002\000" +
    "\004\031\075\001\002\000\004\046\102\001\002\000\012" +
    "\046\uffe6\047\uffe6\050\uffe6\052\uffe6\001\002\000\012\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047\047" +
    "\052\017\001\002\000\004\017\uffe5\001\002\000\004\045" +
    "\104\001\002\000\004\046\354\001\002\000\006\012\122" +
    "\046\347\001\002\000\004\021\106\001\002\000\004\046" +
    "\107\001\002\000\016\005\111\026\112\037\110\045\121" +
    "\051\113\053\116\001\002\000\036\006\uff9f\014\uff9f\016" +
    "\uff9f\020\uff9f\021\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f\001\002\000" +
    "\016\005\111\026\112\037\110\045\121\051\113\053\116" +
    "\001\002\000\004\046\345\001\002\000\036\006\uff9d\014" +
    "\uff9d\016\uff9d\020\uff9d\021\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\001" +
    "\002\000\040\006\uff9c\012\343\014\uff9c\016\uff9c\020\uff9c" +
    "\021\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\052\uff9c\001\002\000\036\006\uffc6" +
    "\014\uffc6\016\uffc6\020\uffc6\021\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\046\012\047\uffc6\050\010\052\uffc6" +
    "\001\002\000\036\006\uff9e\014\uff9e\016\uff9e\020\uff9e\021" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\052\uff9e\001\002\000\036\006\uff9a\014" +
    "\uff9a\016\uff9a\020\uff9a\021\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\046\uff9a\047\uff9a\050\uff9a\052\uff9a\001" +
    "\002\000\012\043\127\044\131\047\143\052\017\001\002" +
    "\000\042\005\123\006\uffa0\012\122\014\uffa0\016\uffa0\020" +
    "\uffa0\021\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\052\uffa0\001\002\000\004\045" +
    "\141\001\002\000\020\005\111\006\124\026\112\037\110" +
    "\045\121\051\113\053\116\001\002\000\036\006\uffaf\014" +
    "\uffaf\016\uffaf\020\uffaf\021\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\001" +
    "\002\000\004\006\140\001\002\000\012\006\uffad\016\130" +
    "\043\127\044\131\001\002\000\022\005\uffc6\026\uffc6\037" +
    "\uffc6\045\uffc6\046\012\050\010\051\uffc6\053\uffc6\001\002" +
    "\000\004\046\134\001\002\000\022\005\uffc6\026\uffc6\037" +
    "\uffc6\045\uffc6\046\012\050\010\051\uffc6\053\uffc6\001\002" +
    "\000\016\005\111\026\112\037\110\045\121\051\113\053" +
    "\116\001\002\000\032\006\uffa3\014\uffa3\016\uffa3\020\uffa3" +
    "\021\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\047" +
    "\uffa3\052\uffa3\001\002\000\016\005\111\026\112\037\110" +
    "\045\121\051\113\053\116\001\002\000\004\006\uffac\001" +
    "\002\000\016\005\111\026\112\037\110\045\121\051\113" +
    "\053\116\001\002\000\032\006\uffa4\014\uffa4\016\uffa4\020" +
    "\uffa4\021\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\131" +
    "\047\uffa4\052\uffa4\001\002\000\036\006\uffae\014\uffae\016" +
    "\uffae\020\uffae\021\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae\001\002\000" +
    "\040\006\uff98\012\uff98\014\uff98\016\uff98\020\uff98\021\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\046\uff98\047" +
    "\uff98\050\uff98\052\uff98\001\002\000\006\047\143\052\017" +
    "\001\002\000\024\011\uffc6\022\uffc6\027\uffc6\030\uffc6\045" +
    "\uffc6\046\012\047\uffc6\050\010\052\uffc6\001\002\000\004" +
    "\022\145\001\002\000\012\046\uff6e\047\uff6e\050\uff6e\052" +
    "\uff6e\001\002\000\020\011\061\022\uff64\027\uff67\030\uff6b" +
    "\045\073\047\143\052\017\001\002\000\004\022\uff63\001" +
    "\002\000\006\047\143\052\017\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\047\143\052" +
    "\017\001\002\000\004\027\257\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\004\030\157\001" +
    "\002\000\012\046\uff6a\047\uff6a\050\uff6a\052\uff6a\001\002" +
    "\000\004\046\160\001\002\000\016\005\162\026\163\037" +
    "\110\045\121\051\113\053\116\001\002\000\004\020\216" +
    "\001\002\000\016\005\162\026\163\037\110\045\121\051" +
    "\113\053\116\001\002\000\004\046\202\001\002\000\006" +
    "\040\174\041\175\001\002\000\026\006\uffa7\014\167\020" +
    "\uffa7\040\uffa7\041\uffa7\042\166\043\127\044\131\047\uffa7" +
    "\052\uffa7\001\002\000\004\046\172\001\002\000\004\046" +
    "\170\001\002\000\016\005\111\026\112\037\110\045\121" +
    "\051\113\053\116\001\002\000\022\006\uffa5\020\uffa5\040" +
    "\uffa5\041\uffa5\043\127\044\131\047\uffa5\052\uffa5\001\002" +
    "\000\016\005\111\026\112\037\110\045\121\051\113\053" +
    "\116\001\002\000\022\006\uffa6\020\uffa6\040\uffa6\041\uffa6" +
    "\043\127\044\131\047\uffa6\052\uffa6\001\002\000\022\005" +
    "\uffc6\026\uffc6\037\uffc6\045\uffc6\046\012\050\010\051\uffc6" +
    "\053\uffc6\001\002\000\022\005\uffc6\026\uffc6\037\uffc6\045" +
    "\uffc6\046\012\050\010\051\uffc6\053\uffc6\001\002\000\016" +
    "\005\111\026\112\037\110\045\121\051\113\053\116\001" +
    "\002\000\012\006\uffab\020\uffab\047\uffab\052\uffab\001\002" +
    "\000\016\005\111\026\112\037\110\045\121\051\113\053" +
    "\116\001\002\000\012\006\uffaa\020\uffaa\047\uffaa\052\uffaa" +
    "\001\002\000\014\005\204\037\110\045\121\051\113\053" +
    "\116\001\002\000\036\006\uffc6\014\uffc6\016\uffc6\020\uffc6" +
    "\021\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\016\005\162" +
    "\026\163\037\110\045\121\051\113\053\116\001\002\000" +
    "\004\006\210\001\002\000\020\006\207\014\167\040\uffa7" +
    "\041\uffa7\042\166\043\127\044\131\001\002\000\036\006" +
    "\uff9b\014\uff9b\016\uff9b\020\uff9b\021\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\046\uff9b\047\uff9b\050\uff9b\052" +
    "\uff9b\001\002\000\016\006\uffc6\020\uffc6\046\012\047\uffc6" +
    "\050\010\052\uffc6\001\002\000\012\006\uffa8\020\uffa8\047" +
    "\uffa8\052\uffa8\001\002\000\032\006\uffa1\014\uffa1\016\uffa1" +
    "\020\uffa1\021\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\047\uffa1\052\uffa1\001\002\000\004\006\214\001\002" +
    "\000\016\006\uffc6\020\uffc6\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\012\006\uffa9\020\uffa9\047\uffa9\052\uffa9" +
    "\001\002\000\006\047\220\052\017\001\002\000\006\047" +
    "\220\052\017\001\002\000\026\011\uffc6\017\uffc6\027\uffc6" +
    "\031\uffc6\034\uffc6\045\uffc6\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\006\017\223\034\uff7b\001\002\000\004" +
    "\034\226\001\002\000\004\046\224\001\002\000\004\030" +
    "\225\001\002\000\012\046\uff7c\047\uff7c\050\uff7c\052\uff7c" +
    "\001\002\000\012\046\uff7a\047\uff7a\050\uff7a\052\uff7a\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\220\052\017\001\002\000\004\017\232\001" +
    "\002\000\004\046\233\001\002\000\004\030\234\001\002" +
    "\000\012\046\uff79\047\uff79\050\uff79\052\uff79\001\002\000" +
    "\022\011\061\017\uff8f\027\uff92\031\uff96\034\uff8f\045\073" +
    "\047\220\052\017\001\002\000\006\017\uff8e\034\uff8e\001" +
    "\002\000\004\027\257\001\002\000\006\047\220\052\017" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\004\031\075\001\002\000\006\047\220\052\017" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\006\047\220\052\017\001\002\000\006\017\uff93" +
    "\034\uff93\001\002\000\006\017\uff8b\034\uff8b\001\002\000" +
    "\012\046\uff95\047\uff95\050\uff95\052\uff95\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047" +
    "\220\052\017\001\002\000\006\017\uff94\034\uff94\001\002" +
    "\000\006\047\220\052\017\001\002\000\006\017\uff97\034" +
    "\uff97\001\002\000\006\017\uff8d\034\uff8d\001\002\000\004" +
    "\046\264\001\002\000\012\046\uff91\047\uff91\050\uff91\052" +
    "\uff91\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6" +
    "\001\002\000\006\047\220\052\017\001\002\000\006\017" +
    "\uff90\034\uff90\001\002\000\004\032\265\001\002\000\004" +
    "\046\266\001\002\000\016\005\162\026\163\037\110\045" +
    "\121\051\113\053\116\001\002\000\006\047\272\052\017" +
    "\001\002\000\004\023\322\001\002\000\006\047\272\052" +
    "\017\001\002\000\024\011\uffc6\023\uffc6\030\uffc6\031\uffc6" +
    "\045\uffc6\046\012\047\uffc6\050\010\052\uffc6\001\002\000" +
    "\020\011\061\023\uff47\030\uff4e\031\uff4a\045\073\047\272" +
    "\052\017\001\002\000\004\023\uff46\001\002\000\006\047" +
    "\272\052\017\001\002\000\012\046\012\047\uffc6\050\010" +
    "\052\uffc6\001\002\000\004\031\075\001\002\000\004\030" +
    "\157\001\002\000\006\047\272\052\017\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047" +
    "\272\052\017\001\002\000\004\023\uff4b\001\002\000\004" +
    "\023\uff43\001\002\000\012\046\uff4d\047\uff4d\050\uff4d\052" +
    "\uff4d\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6" +
    "\001\002\000\006\047\272\052\017\001\002\000\004\023" +
    "\uff4c\001\002\000\012\046\uff49\047\uff49\050\uff49\052\uff49" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\006\047\272\052\017\001\002\000\004\023\uff48" +
    "\001\002\000\006\047\272\052\017\001\002\000\004\023" +
    "\uff4f\001\002\000\004\023\uff45\001\002\000\004\023\uff44" +
    "\001\002\000\012\046\uff51\047\uff51\050\uff51\052\uff51\001" +
    "\002\000\006\017\uff8c\034\uff8c\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\047\143\052" +
    "\017\001\002\000\004\022\uff69\001\002\000\006\047\143" +
    "\052\017\001\002\000\004\022\uff68\001\002\000\012\046" +
    "\uff66\047\uff66\050\uff66\052\uff66\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\047\143\052" +
    "\017\001\002\000\004\022\uff65\001\002\000\004\022\uff60" +
    "\001\002\000\006\047\143\052\017\001\002\000\004\022" +
    "\uff6c\001\002\000\004\022\uff62\001\002\000\004\022\uff61" +
    "\001\002\000\032\006\uffa2\014\uffa2\016\uffa2\020\uffa2\021" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\047\uffa2" +
    "\052\uffa2\001\002\000\004\045\344\001\002\000\040\006" +
    "\uff99\012\uff99\014\uff99\016\uff99\020\uff99\021\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\046\uff99\047\uff99\050" +
    "\uff99\052\uff99\001\002\000\014\005\111\037\110\045\121" +
    "\051\113\053\116\001\002\000\010\006\207\043\127\044" +
    "\131\001\002\000\004\014\350\001\002\000\004\046\uff71" +
    "\001\002\000\004\046\352\001\002\000\016\005\111\026" +
    "\112\037\110\045\121\051\113\053\116\001\002\000\010" +
    "\021\uff70\043\127\044\131\001\002\000\004\014\355\001" +
    "\002\000\004\046\356\001\002\000\016\005\111\026\112" +
    "\037\110\045\121\051\113\053\116\001\002\000\010\021" +
    "\uff6f\043\127\044\131\001\002\000\004\014\361\001\002" +
    "\000\004\046\362\001\002\000\020\005\uff74\011\uff2c\026" +
    "\uff74\037\uff74\045\uff74\051\uff74\053\uff74\001\002\000\004" +
    "\011\366\001\002\000\016\005\111\026\112\037\110\045" +
    "\121\051\113\053\116\001\002\000\012\043\127\044\131" +
    "\047\uff73\052\uff73\001\002\000\004\012\367\001\002\000" +
    "\004\010\370\001\002\000\004\005\371\001\002\000\004" +
    "\006\372\001\002\000\012\046\uff2b\047\uff2b\050\uff2b\052" +
    "\uff2b\001\002\000\012\046\uffe9\047\uffe9\050\uffe9\052\uffe9" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\006\047\047\052\017\001\002\000\004\017\uffe8" +
    "\001\002\000\012\046\uffe1\047\uffe1\050\uffe1\052\uffe1\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\047\052\017\001\002\000\004\017\uffe0\001" +
    "\002\000\006\047\047\052\017\001\002\000\004\017\uffe3" +
    "\001\002\000\004\017\uffdb\001\002\000\004\014\u0107\001" +
    "\002\000\004\046\u0108\001\002\000\020\005\111\011\u0109" +
    "\026\112\037\110\045\121\051\113\053\116\001\002\000" +
    "\004\012\u010b\001\002\000\012\043\127\044\131\047\uff72" +
    "\052\uff72\001\002\000\004\010\u010c\001\002\000\004\005" +
    "\u010d\001\002\000\004\006\u010e\001\002\000\012\046\uff2a" +
    "\047\uff2a\050\uff2a\052\uff2a\001\002\000\006\047\047\052" +
    "\017\001\002\000\004\017\uffe4\001\002\000\004\046\u0112" +
    "\001\002\000\004\045\u0113\001\002\000\006\016\u0116\046" +
    "\u0115\001\002\000\014\002\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\052\uffc2\001\002\000\004\025\u011a\001\002\000\004\046" +
    "\u0117\001\002\000\004\045\uffbf\001\002\000\004\045\u0113" +
    "\001\002\000\014\002\uffbe\046\uffbe\047\uffbe\050\uffbe\052" +
    "\uffbe\001\002\000\004\046\u011b\001\002\000\006\036\u011e" +
    "\045\u011c\001\002\000\016\002\uffbb\016\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\052\uffbb\001\002\000\016\002\uffbd\016\u011f" +
    "\046\uffbd\047\uffbd\050\uffbd\052\uffbd\001\002\000\016\002" +
    "\uffbc\016\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\001\002" +
    "\000\004\046\u0120\001\002\000\004\045\uffc1\001\002\000" +
    "\004\045\u0113\001\002\000\014\002\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\052\uffc0\001\002\000\004\007\u0124\001\002\000" +
    "\004\005\u0125\001\002\000\016\005\111\026\112\037\110" +
    "\045\121\051\113\053\116\001\002\000\010\006\u0127\043" +
    "\127\044\131\001\002\000\012\046\uff29\047\uff29\050\uff29" +
    "\052\uff29\001\002\000\006\047\047\052\017\001\002\000" +
    "\004\017\uffeb\001\002\000\004\017\uffdd\001\002\000\004" +
    "\045\u012c\001\002\000\004\046\u012d\001\002\000\004\025" +
    "\u012e\001\002\000\004\046\u012f\001\002\000\004\036\u0130" +
    "\001\002\000\006\006\uffb6\016\uffb5\001\002\000\004\016" +
    "\u0132\001\002\000\004\046\u0133\001\002\000\004\035\043" +
    "\001\002\000\004\006\uffb4\001\002\000\012\046\012\047" +
    "\uffc6\050\010\052\uffc6\001\002\000\006\047\047\052\017" +
    "\001\002\000\004\017\u0138\001\002\000\004\046\u0139\001" +
    "\002\000\004\004\u013a\001\002\000\006\002\uffb9\047\uffb9" +
    "\001\002\000\006\002\uffec\047\022\001\002\000\004\002" +
    "\ufffa\001\002\000\004\046\u0142\001\002\000\012\002\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\001\002\000\012\002\uffc6\046" +
    "\012\047\uffc6\050\010\001\002\000\006\002\uffec\047\022" +
    "\001\002\000\004\002\ufff7\001\002\000\004\045\u0143\001" +
    "\002\000\004\005\uff26\001\002\000\004\005\u0145\001\002" +
    "\000\006\006\u0146\035\043\001\002\000\012\046\u01ef\047" +
    "\uffc6\050\010\052\uffc6\001\002\000\004\006\u0148\001\002" +
    "\000\012\046\u014a\047\uffc6\050\010\052\uffc6\001\002\000" +
    "\006\047\047\052\017\001\002\000\014\025\u014b\046\uffc4" +
    "\047\uffc4\050\uffc4\052\uffc4\001\002\000\004\046\u014c\001" +
    "\002\000\006\036\u011e\045\u011c\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\047\u0150\052" +
    "\017\001\002\000\006\047\u0150\052\017\001\002\000\032" +
    "\011\uffc6\017\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\033" +
    "\uffc6\045\uffc6\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\004\017\u0152\001\002\000\004\046\u0153\001\002\000" +
    "\004\015\u0154\001\002\000\012\002\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\001\002\000\026\011\061\017\uffce\024\062\027" +
    "\uffd1\030\uffd4\031\uffd9\033\u015c\045\073\047\u0150\052\017" +
    "\001\002\000\006\047\u0150\052\017\001\002\000\004\027" +
    "\u01ad\001\002\000\004\030\u0185\001\002\000\004\031\u016b" +
    "\001\002\000\006\047\u0150\052\017\001\002\000\006\047" +
    "\u0150\052\017\001\002\000\004\046\u0167\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\012\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\004\017\uffcd" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\006\047\u0150\052\017\001\002\000\004\017\uffd5" +
    "\001\002\000\006\047\u0150\052\017\001\002\000\004\017" +
    "\uffd6\001\002\000\006\047\u0150\052\017\001\002\000\004" +
    "\017\uffda\001\002\000\016\005\111\026\112\037\110\045" +
    "\121\051\113\053\116\001\002\000\012\043\127\044\131" +
    "\047\uffc8\052\uffc8\001\002\000\004\017\uffcc\001\002\000" +
    "\004\017\uffcb\001\002\000\004\046\u0170\001\002\000\012" +
    "\046\uffd8\047\uffd8\050\uffd8\052\uffd8\001\002\000\012\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047\u0150" +
    "\052\017\001\002\000\004\017\uffd7\001\002\000\004\045" +
    "\104\001\002\000\004\021\u0172\001\002\000\004\046\u0173" +
    "\001\002\000\016\005\111\026\112\037\110\045\121\051" +
    "\113\053\116\001\002\000\012\043\127\044\131\047\u0177" +
    "\052\017\001\002\000\006\047\u0177\052\017\001\002\000" +
    "\004\022\u01de\001\002\000\026\011\uffc6\022\uffc6\027\uffc6" +
    "\030\uffc6\033\uffc6\045\uffc6\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\022\011\061\022\uff57\027\uff5a\030\uff5e" +
    "\033\u015c\045\073\047\u0177\052\017\001\002\000\006\047" +
    "\u0177\052\017\001\002\000\012\046\012\047\uffc6\050\010" +
    "\052\uffc6\001\002\000\006\047\u0177\052\017\001\002\000" +
    "\004\027\u01ad\001\002\000\004\030\u0185\001\002\000\006" +
    "\047\u0177\052\017\001\002\000\012\046\012\047\uffc6\050" +
    "\010\052\uffc6\001\002\000\004\022\uff56\001\002\000\006" +
    "\047\u0177\052\017\001\002\000\004\022\uff5b\001\002\000" +
    "\004\022\uff52\001\002\000\012\046\uff5d\047\uff5d\050\uff5d" +
    "\052\uff5d\001\002\000\004\046\u0186\001\002\000\016\005" +
    "\162\026\163\037\110\045\121\051\113\053\116\001\002" +
    "\000\004\020\u0188\001\002\000\012\046\012\047\uffc6\050" +
    "\010\052\uffc6\001\002\000\006\047\u018b\052\017\001\002" +
    "\000\006\047\u018b\052\017\001\002\000\030\011\uffc6\017" +
    "\uffc6\027\uffc6\031\uffc6\033\uffc6\034\uffc6\045\uffc6\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\017\u018d\034" +
    "\uff77\001\002\000\004\046\u0196\001\002\000\004\034\u018f" +
    "\001\002\000\012\046\uff76\047\uff76\050\uff76\052\uff76\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\u018b\052\017\001\002\000\004\017\u0193\001" +
    "\002\000\004\046\u0194\001\002\000\004\030\u0195\001\002" +
    "\000\012\046\uff75\047\uff75\050\uff75\052\uff75\001\002\000" +
    "\004\030\u0197\001\002\000\012\046\uff78\047\uff78\050\uff78" +
    "\052\uff78\001\002\000\024\011\061\017\uff82\027\uff85\031" +
    "\uff89\033\u015c\034\uff82\045\073\047\u018b\052\017\001\002" +
    "\000\004\027\u01ad\001\002\000\004\031\u016b\001\002\000" +
    "\006\047\u018b\052\017\001\002\000\012\046\012\047\uffc6" +
    "\050\010\052\uffc6\001\002\000\006\047\u018b\052\017\001" +
    "\002\000\006\047\u018b\052\017\001\002\000\012\046\012" +
    "\047\uffc6\050\010\052\uffc6\001\002\000\006\017\uff81\034" +
    "\uff81\001\002\000\006\047\u018b\052\017\001\002\000\006" +
    "\017\uff86\034\uff86\001\002\000\006\017\uff7d\034\uff7d\001" +
    "\002\000\006\017\uff7f\034\uff7f\001\002\000\006\047\u018b" +
    "\052\017\001\002\000\006\017\uff8a\034\uff8a\001\002\000" +
    "\006\017\uff80\034\uff80\001\002\000\012\046\uff88\047\uff88" +
    "\050\uff88\052\uff88\001\002\000\012\046\012\047\uffc6\050" +
    "\010\052\uffc6\001\002\000\006\047\u018b\052\017\001\002" +
    "\000\006\017\uff87\034\uff87\001\002\000\012\046\uff84\047" +
    "\uff84\050\uff84\052\uff84\001\002\000\004\046\u01ae\001\002" +
    "\000\004\032\u01af\001\002\000\004\046\u01b0\001\002\000" +
    "\016\005\162\026\163\037\110\045\121\051\113\053\116" +
    "\001\002\000\006\047\u01b3\052\017\001\002\000\006\047" +
    "\u01b3\052\017\001\002\000\026\011\uffc6\023\uffc6\030\uffc6" +
    "\031\uffc6\033\uffc6\045\uffc6\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\004\023\u01b5\001\002\000\012\046\uff50" +
    "\047\uff50\050\uff50\052\uff50\001\002\000\022\011\061\023" +
    "\uff3a\030\uff41\031\uff3d\033\u015c\045\073\047\u01b3\052\017" +
    "\001\002\000\006\047\u01b3\052\017\001\002\000\012\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\004\031\u016b" +
    "\001\002\000\004\030\u0185\001\002\000\006\047\u01b3\052" +
    "\017\001\002\000\006\047\u01b3\052\017\001\002\000\004" +
    "\023\uff39\001\002\000\012\046\012\047\uffc6\050\010\052" +
    "\uffc6\001\002\000\006\047\u01b3\052\017\001\002\000\004" +
    "\023\uff3e\001\002\000\004\023\uff35\001\002\000\004\023" +
    "\uff37\001\002\000\012\046\uff40\047\uff40\050\uff40\052\uff40" +
    "\001\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001" +
    "\002\000\006\047\u01b3\052\017\001\002\000\004\023\uff3f" +
    "\001\002\000\012\046\uff3c\047\uff3c\050\uff3c\052\uff3c\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\u01b3\052\017\001\002\000\004\023\uff3b\001" +
    "\002\000\006\047\u01b3\052\017\001\002\000\004\023\uff42" +
    "\001\002\000\004\023\uff38\001\002\000\004\023\uff36\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\u018b\052\017\001\002\000\006\017\uff83\034" +
    "\uff83\001\002\000\006\017\uff7e\034\uff7e\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047" +
    "\u0177\052\017\001\002\000\004\022\uff5c\001\002\000\012" +
    "\046\uff59\047\uff59\050\uff59\052\uff59\001\002\000\012\046" +
    "\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047\u0177" +
    "\052\017\001\002\000\004\022\uff58\001\002\000\004\022" +
    "\uff54\001\002\000\006\047\u0177\052\017\001\002\000\004" +
    "\022\uff5f\001\002\000\004\022\uff55\001\002\000\012\046" +
    "\uff6d\047\uff6d\050\uff6d\052\uff6d\001\002\000\004\022\uff53" +
    "\001\002\000\012\046\uffd3\047\uffd3\050\uffd3\052\uffd3\001" +
    "\002\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002" +
    "\000\006\047\u0150\052\017\001\002\000\004\017\uffd2\001" +
    "\002\000\012\046\uffd0\047\uffd0\050\uffd0\052\uffd0\001\002" +
    "\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002\000" +
    "\006\047\u0150\052\017\001\002\000\004\017\uffcf\001\002" +
    "\000\004\017\uffc9\001\002\000\004\017\uffca\001\002\000" +
    "\004\017\u01eb\001\002\000\004\046\u01ec\001\002\000\004" +
    "\015\u01ed\001\002\000\012\002\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\001\002\000\006\047\047\052\017\001\002\000\014" +
    "\025\u01f0\046\uffc4\047\uffc4\050\uffc4\052\uffc4\001\002\000" +
    "\004\046\u01f1\001\002\000\006\036\u011e\045\u011c\001\002" +
    "\000\012\046\012\047\uffc6\050\010\052\uffc6\001\002\000" +
    "\006\047\u0150\052\017\001\002\000\004\017\u01f5\001\002" +
    "\000\004\046\u01f6\001\002\000\004\015\u01f7\001\002\000" +
    "\012\002\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\004" +
    "\017\u01f9\001\002\000\004\046\u01fa\001\002\000\004\015" +
    "\u01fb\001\002\000\012\002\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\001\002\000\004\002\uffff\001\002\000\004\046\u0202\001" +
    "\002\000\012\002\ufff5\046\ufff5\047\ufff5\050\ufff5\001\002" +
    "\000\012\002\uffc6\046\012\047\uffc6\050\010\001\002\000" +
    "\006\002\uffec\047\022\001\002\000\004\002\ufff4\001\002" +
    "\000\004\045\u0203\001\002\000\012\046\uff34\047\uff34\050" +
    "\uff34\052\uff34\001\002\000\012\046\012\047\uffc6\050\010" +
    "\052\uffc6\001\002\000\006\047\u0206\052\017\001\002\000" +
    "\016\017\uffc6\045\uffc6\046\012\047\uffc6\050\010\052\uffc6" +
    "\001\002\000\006\047\u0206\052\017\001\002\000\004\017" +
    "\uff33\001\002\000\004\017\u020a\001\002\000\004\046\u020b" +
    "\001\002\000\004\013\u020c\001\002\000\012\002\uff32\046" +
    "\uff32\047\uff32\050\uff32\001\002\000\004\017\uff2e\001\002" +
    "\000\012\017\uff30\045\u020f\047\u0206\052\017\001\002\000" +
    "\004\046\u0214\001\002\000\004\017\uff2f\001\002\000\012" +
    "\046\012\047\uffc6\050\010\052\uffc6\001\002\000\006\047" +
    "\u0206\052\017\001\002\000\004\017\uff31\001\002\000\004" +
    "\025\u0215\001\002\000\004\046\u0216\001\002\000\006\036" +
    "\u011e\045\u011c\001\002\000\012\046\uff2d\047\uff2d\050\uff2d" +
    "\052\uff2d\001\002\000\012\002\uffc6\046\012\047\uffc6\050" +
    "\010\001\002\000\006\002\uffec\047\022\001\002\000\004" +
    "\002\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0218\000\022\002\013\003\005\005\017\050\014\055" +
    "\012\057\010\061\004\063\003\001\001\000\004\007\u0217" +
    "\001\001\000\004\043\u01fd\001\001\000\002\001\001\000" +
    "\020\003\u01fb\005\017\050\014\055\012\057\010\061\004" +
    "\063\003\001\001\000\002\001\001\000\004\011\u013d\001" +
    "\001\000\002\001\001\000\004\013\033\001\001\000\002" +
    "\001\001\000\006\005\027\006\026\001\001\000\004\064" +
    "\024\001\001\000\002\001\001\000\022\003\020\004\022" +
    "\005\017\050\014\055\012\057\010\061\004\063\003\001" +
    "\001\000\002\001\001\000\020\003\023\005\017\050\014" +
    "\055\012\057\010\061\004\063\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\025\001\001\000\002" +
    "\001\001\000\004\004\031\001\001\000\006\005\027\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\u013a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\041\001\001" +
    "\000\004\104\u0134\001\001\000\004\014\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\027\006\045" +
    "\001\001\000\006\015\050\050\047\001\001\000\006\005" +
    "\027\006\055\001\001\000\006\015\054\050\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\063\012\066" +
    "\015\065\031\056\046\057\047\067\050\047\051\062\052" +
    "\064\065\071\067\073\071\070\001\001\000\006\015\u0129" +
    "\050\047\001\001\000\006\005\027\006\u0127\001\001\000" +
    "\002\001\001\000\004\101\u0110\001\001\000\002\001\001" +
    "\000\006\005\027\006\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u0104\050\047\001\001\000\006" +
    "\005\027\006\u0102\001\001\000\004\037\376\001\001\000" +
    "\004\020\372\001\001\000\002\001\001\000\004\032\075" +
    "\001\001\000\002\001\001\000\004\070\076\001\001\000" +
    "\006\005\027\006\077\001\001\000\006\015\100\050\047" +
    "\001\001\000\002\001\001\000\010\034\104\051\062\052" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\116\023\114\025" +
    "\117\051\113\001\001\000\002\001\001\000\012\012\116" +
    "\023\114\025\345\051\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\027\006\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\143\050\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\116\023\114\024\124\025\125\051\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\027\006\135\001\001\000\002\001\001\000" +
    "\006\005\027\006\131\001\001\000\012\012\116\023\114" +
    "\025\132\051\113\001\001\000\002\001\001\000\014\012" +
    "\116\023\114\024\134\025\125\051\113\001\001\000\002" +
    "\001\001\000\012\012\116\023\114\025\136\051\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\340\050\141\001\001\000\006\005\027\006" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\151\031\147\035\146\046\150\047\153\050\141\051" +
    "\062\052\064\125\154\127\152\001\001\000\002\001\001" +
    "\000\006\035\337\050\141\001\001\000\006\005\027\006" +
    "\335\001\001\000\006\035\334\050\141\001\001\000\004" +
    "\037\330\001\001\000\006\005\027\006\326\001\001\000" +
    "\004\020\155\001\001\000\004\126\323\001\001\000\002" +
    "\001\001\000\016\012\116\023\114\025\164\026\160\051" +
    "\113\054\163\001\001\000\002\001\001\000\016\012\116" +
    "\023\114\025\205\026\212\051\113\054\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\116\023\114\025" +
    "\170\051\113\001\001\000\002\001\001\000\012\012\116" +
    "\023\114\025\172\051\113\001\001\000\002\001\001\000" +
    "\006\005\027\006\177\001\001\000\006\005\027\006\175" +
    "\001\001\000\014\012\116\023\114\025\164\051\113\054" +
    "\176\001\001\000\002\001\001\000\014\012\116\023\114" +
    "\025\164\051\113\054\200\001\001\000\002\001\001\000" +
    "\010\012\116\023\202\051\113\001\001\000\006\005\027" +
    "\006\211\001\001\000\016\012\116\023\114\025\205\026" +
    "\204\051\113\054\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\027\006\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\027\006\214\001\001\000\002\001\001\000" +
    "\006\027\220\050\216\001\001\000\006\027\322\050\216" +
    "\001\001\000\006\005\027\006\234\001\001\000\004\117" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\226\001\001\000" +
    "\006\005\027\006\227\001\001\000\006\027\230\050\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\242\027\235\031\237" +
    "\046\240\047\243\050\216\051\062\052\064\107\241\111" +
    "\236\001\001\000\002\001\001\000\004\037\257\001\001" +
    "\000\006\027\255\050\216\001\001\000\006\005\027\006" +
    "\253\001\001\000\004\032\247\001\001\000\006\027\246" +
    "\050\216\001\001\000\006\005\027\006\244\001\001\000" +
    "\006\027\245\050\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\250\001\001\000\006\005\027\006" +
    "\251\001\001\000\006\027\252\050\216\001\001\000\002" +
    "\001\001\000\006\027\254\050\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\260" +
    "\001\001\000\006\005\027\006\261\001\001\000\006\027" +
    "\262\050\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\116\023\114\025\164\026" +
    "\266\051\113\054\163\001\001\000\006\041\267\050\270" +
    "\001\001\000\002\001\001\000\006\041\320\050\270\001" +
    "\001\000\006\005\027\006\272\001\001\000\026\012\300" +
    "\031\274\041\273\046\275\047\301\050\270\051\062\052" +
    "\064\135\277\137\276\001\001\000\002\001\001\000\006" +
    "\041\317\050\270\001\001\000\006\005\027\006\315\001" +
    "\001\000\004\032\311\001\001\000\004\020\305\001\001" +
    "\000\006\041\304\050\270\001\001\000\006\005\027\006" +
    "\302\001\001\000\006\041\303\050\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\306\001\001\000" +
    "\006\005\027\006\307\001\001\000\006\041\310\050\270" +
    "\001\001\000\002\001\001\000\004\140\312\001\001\000" +
    "\006\005\027\006\313\001\001\000\006\041\314\050\270" +
    "\001\001\000\002\001\001\000\006\041\316\050\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\027\006" +
    "\324\001\001\000\006\035\325\050\141\001\001\000\002" +
    "\001\001\000\006\035\327\050\141\001\001\000\002\001" +
    "\001\000\004\130\331\001\001\000\006\005\027\006\332" +
    "\001\001\000\006\035\333\050\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\035\336\050\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\116\023\202\051\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\350\001\001\000\002\001\001" +
    "\000\012\012\116\023\114\025\352\051\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\116\023\114\025\356\051\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\123\363" +
    "\147\362\001\001\000\002\001\001\000\012\012\116\023" +
    "\114\025\364\051\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\373\001\001\000\006" +
    "\005\027\006\374\001\001\000\006\015\375\050\047\001" +
    "\001\000\002\001\001\000\004\072\377\001\001\000\006" +
    "\005\027\006\u0100\001\001\000\006\015\u0101\050\047\001" +
    "\001\000\002\001\001\000\006\015\u0103\050\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\116\023\114\025\u0109\051\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u010f\050\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u0117\001\001\000\004\010\u0118\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u0120\001\001\000\004\010\u0121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\116\023\114\025\u0125\051\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u0128\050\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0133\001\001\000\002" +
    "\001\001\000\006\005\027\006\u0135\001\001\000\006\015" +
    "\u0136\050\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u013b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u013e" +
    "\001\001\000\006\005\027\006\u013f\001\001\000\004\004" +
    "\u0140\001\001\000\002\001\001\000\004\053\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0146\001" +
    "\001\000\006\005\027\006\u01ed\001\001\000\002\001\001" +
    "\000\006\005\027\006\u0148\001\001\000\006\015\u01e9\050" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u014c\001\001\000\006\005\027\006\u014d\001\001\000" +
    "\006\016\u0150\050\u014e\001\001\000\006\016\u01e8\050\u014e" +
    "\001\001\000\006\005\027\006\u0154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\u015c\012\u0155\016\u015e\017\u015a\031\u0159\046" +
    "\u015d\047\u015f\050\u014e\051\062\052\064\073\u0158\075\u0157" +
    "\077\u0156\001\001\000\006\016\u01e7\050\u014e\001\001\000" +
    "\004\040\u01e3\001\001\000\004\021\u01df\001\001\000\004" +
    "\033\u016b\001\001\000\006\016\u0169\050\u014e\001\001\000" +
    "\006\016\u0168\050\u014e\001\001\000\002\001\001\000\006" +
    "\005\027\006\u0164\001\001\000\006\005\027\006\u0162\001" +
    "\001\000\002\001\001\000\006\005\027\006\u0160\001\001" +
    "\000\006\016\u0161\050\u014e\001\001\000\002\001\001\000" +
    "\006\016\u0163\050\u014e\001\001\000\002\001\001\000\006" +
    "\016\u0165\050\u014e\001\001\000\002\001\001\000\012\012" +
    "\116\023\114\025\u0167\051\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\u016c\001\001\000\006\005\027\006\u016d\001\001" +
    "\000\006\016\u016e\050\u014e\001\001\000\002\001\001\000" +
    "\010\034\u0170\051\062\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\116\023\114\025\u0173\051" +
    "\113\001\001\000\006\036\u0175\050\u0174\001\001\000\006" +
    "\036\u01de\050\u0174\001\001\000\002\001\001\000\006\005" +
    "\027\006\u0177\001\001\000\030\012\u017d\017\u017a\031\u0178" +
    "\036\u017f\046\u0179\047\u017e\050\u0174\051\062\052\064\131" +
    "\u017c\133\u017b\001\001\000\006\036\u01dc\050\u0174\001\001" +
    "\000\006\005\027\006\u01da\001\001\000\006\036\u01d9\050" +
    "\u0174\001\001\000\004\040\u01d5\001\001\000\004\021\u0183" +
    "\001\001\000\006\036\u0182\050\u0174\001\001\000\006\005" +
    "\027\006\u0180\001\001\000\002\001\001\000\006\036\u0181" +
    "\050\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\u01d2\001\001\000\002\001\001\000\016\012\116" +
    "\023\114\025\164\026\u0186\051\113\054\163\001\001\000" +
    "\002\001\001\000\006\005\027\006\u0188\001\001\000\006" +
    "\030\u018b\050\u0189\001\001\000\006\030\u01d1\050\u0189\001" +
    "\001\000\006\005\027\006\u0197\001\001\000\004\121\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\u018f\001\001\000\006\005\027\006\u0190\001\001\000\006" +
    "\030\u0191\050\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\u019d\017\u019c\030\u019f\031" +
    "\u019a\046\u019b\047\u019e\050\u0189\051\062\052\064\113\u0199" +
    "\115\u0198\001\001\000\004\040\u01ab\001\001\000\004\033" +
    "\u01a7\001\001\000\006\030\u01a6\050\u0189\001\001\000\006" +
    "\005\027\006\u01a4\001\001\000\006\030\u01a3\050\u0189\001" +
    "\001\000\006\030\u01a2\050\u0189\001\001\000\006\005\027" +
    "\006\u01a0\001\001\000\002\001\001\000\006\030\u01a1\050" +
    "\u0189\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\u01a5\050\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\u01a8\001\001\000\006" +
    "\005\027\006\u01a9\001\001\000\006\030\u01aa\050\u0189\001" +
    "\001\000\002\001\001\000\004\116\u01ce\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\116\023\114\025\164\026\u01b0\051\113\054\163\001\001" +
    "\000\006\042\u01b3\050\u01b1\001\001\000\006\042\u01cd\050" +
    "\u01b1\001\001\000\006\005\027\006\u01b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\u01bb\017\u01ba\031" +
    "\u01b6\042\u01bc\046\u01b7\047\u01bd\050\u01b1\051\062\052\064" +
    "\141\u01b9\143\u01b8\001\001\000\006\042\u01cc\050\u01b1\001" +
    "\001\000\006\005\027\006\u01ca\001\001\000\004\033\u01c6" +
    "\001\001\000\004\021\u01c2\001\001\000\006\042\u01c1\050" +
    "\u01b1\001\001\000\006\042\u01c0\050\u01b1\001\001\000\002" +
    "\001\001\000\006\005\027\006\u01be\001\001\000\006\042" +
    "\u01bf\050\u01b1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\142\u01c3\001\001\000\006\005" +
    "\027\006\u01c4\001\001\000\006\042\u01c5\050\u01b1\001\001" +
    "\000\002\001\001\000\004\144\u01c7\001\001\000\006\005" +
    "\027\006\u01c8\001\001\000\006\042\u01c9\050\u01b1\001\001" +
    "\000\002\001\001\000\006\042\u01cb\050\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\027\006\u01cf\001\001\000\006\030\u01d0\050\u0189\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\027" +
    "\006\u01d3\001\001\000\006\036\u01d4\050\u0174\001\001\000" +
    "\002\001\001\000\004\134\u01d6\001\001\000\006\005\027" +
    "\006\u01d7\001\001\000\006\036\u01d8\050\u0174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u01db\050\u0174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u01e0\001\001\000\006" +
    "\005\027\006\u01e1\001\001\000\006\016\u01e2\050\u014e\001" +
    "\001\000\002\001\001\000\004\100\u01e4\001\001\000\006" +
    "\005\027\006\u01e5\001\001\000\006\016\u01e6\050\u014e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01f7\050\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01f1\001\001\000" +
    "\006\005\027\006\u01f2\001\001\000\006\016\u01f3\050\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u01fe\001\001\000\006\005\027" +
    "\006\u01ff\001\001\000\004\004\u0200\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\145\u0203\001\001\000\006" +
    "\005\027\006\u0204\001\001\000\006\044\u0207\050\u0206\001" +
    "\001\000\006\005\027\006\u020d\001\001\000\006\044\u020c" +
    "\050\u0206\001\001\000\004\146\u0208\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u020f\045\u0210\050\u0206\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\027" +
    "\006\u0211\001\001\000\006\044\u0212\050\u0206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u0216\001\001\000\002\001\001\000\006\005\027\006" +
    "\u0218\001\001\000\004\004\u0219\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbasicSintaxisAmbito$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbasicSintaxisAmbito$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbasicSintaxisAmbito$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public static int errors = 0;
     public  int errors_count =0;
     public  int sintax_errors_count =0;
public void report_error(String message, Object info) {
    if (info instanceof String){
        errors++;
      /*System.err.println( info + " "+ message);*/
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
      sintax_errors_count++;
  }
   
  public void report_fatal_error() {
    sintax_errors_count++;
    //report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void error_ambito(String id, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  el identificador: "+id+" ya existe dentro del mismo ambito o es el nombre de un procedimiento-función): Semantic error");
    }

    public void error_ambito_id_no_es_registro (String id, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  el registro: "+id+" no ha sido declarado): Semantic error");
    }

    public void error_ambito_no_existe_funcion (String id, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  la funcion o procedimiento: "+id+" no ha sido declarado): Semantic error");
    }

    public void error_type_up(){
        errors_count++;
        System.err.println("Error (No se permite declaración de estructuras después de una función o procedimiento): Semantic error");
    }

    public void error_ambito_no_existe_var (String id, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  la variable: "+id+" no ha sido declarada): Semantic error");
    }

    public void error_uso_estructuras(String id, String tipo,String registro, int line, int column){
        errors_count++;
        if(!registro.equals("--")){
        System.err.println("Error (line: "+line+", column: "+column+",  la variable: "+id+" en el registro: "+registro+" es del tipo básico o el registro: "
                                    +tipo+" no ha sido declarado): Semantic error");
        }else{
        System.err.println("Error (line: "+line+", column: "+column+",  la variable: "+id+" es del tipo básico o el registro: "
                                    +tipo+" no ha sido declarado): Semantic error");
        }
    }

    public void  error_registro_no_existe_var (String id,String registro, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+",  la variable: "+id+" no ha sido declarada en el registro: "+registro+"): Semantic error");
    }

      
    public TablasDeSimbolos t_simbolos = new TablasDeSimbolos();
    public TablaSimbolos t_principal = new TablaSimbolos("Principal");
    public String ambito_actual ="1.0";
    public String nueva_estructura;
    public int offset = 0;
    public Stack<Integer> stack_offset = new Stack<Integer>();

    public void sumar_ambito(){
            String[] partes = ambito_actual.split("\\.");
            int add = Integer.parseInt(partes[partes.length-1]) + 1;
            ambito_actual = "";
            for(int i=0; i<partes.length-1; i++){
                ambito_actual += partes[i]+".";
            }
            ambito_actual += add;
            
    }

    public void remover_ambito(){
            
            String[] partes = ambito_actual.split("\\.");
            ambito_actual = "";
            for(int i=0; i<partes.length-1; i++){
                if(i==0)
                    ambito_actual += partes[i];
                else
                    ambito_actual += "."+partes[i];
            }
            
    }

        public String remover(String ambito){
            
            String[] partes = ambito_actual.split("\\.");
            String ambito_a = "";
            for(int i=0; i<partes.length-1; i++){
                if(i==0)
                    ambito_a += partes[i];
                else
                    ambito_a += "."+partes[i];
            }

           return ambito_a;
            
    }

     public int index_primer_id;
     public void asignar_offset_ids(){
         Tipo t = t_simbolos.getTabla("Principal").get_ids().get(t_simbolos.getTabla("Principal").get_ids().size()-1).getTipo();
         
         for(int i=index_primer_id; i< t_simbolos.getTabla("Principal").get_ids().size();i++){
            if(t_simbolos.getTabla("Principal").get_ids().get(i).getOffset()==-1){
                t_simbolos.getTabla("Principal").get_ids().get(i).setTipo(t);
                t_simbolos.getTabla("Principal").get_ids().get(i).setOffset(offset);
                offset+=t.getTamano();
            }

         }
         
     }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VbasicSintaxisAmbito$actions {
  private final VbasicSintaxisAmbito parser;

  /** Constructor */
  CUP$VbasicSintaxisAmbito$actions(VbasicSintaxisAmbito parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VbasicSintaxisAmbito$do_action_part00000000(
    int                        CUP$VbasicSintaxisAmbito$act_num,
    java_cup.runtime.lr_parser CUP$VbasicSintaxisAmbito$parser,
    java.util.Stack            CUP$VbasicSintaxisAmbito$stack,
    int                        CUP$VbasicSintaxisAmbito$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbasicSintaxisAmbito$result;

      /* select the action based on the action number */
      switch (CUP$VbasicSintaxisAmbito$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		RESULT = start_val;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbasicSintaxisAmbito$parser.done_parsing();
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal);} sumar_ambito(); ambito_actual+=".0"; stack_offset.push(offset); offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= NT$0 BLOQUE_PROCEDIMIENTO NT$1 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); }sumar_ambito(); ambito_actual+=".0"; stack_offset.push(offset); offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA ::= NT$2 BLOQUE_FUNCION NT$3 INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$4 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); }if(t_simbolos.hay_proc_o_fun()){error_type_up();} sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Programa RESULT =(Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA ::= NT$4 BLOQUE_ESTRUCTURA NT$5 INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Programa RESULT =null;
if(!t_simbolos.existePrincipal()){t_simbolos.addTabla(t_principal); } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROGRAMA ::= NT$6 DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Programa RESULT =null;
 parser.report_error("ERROR","SYNTAX"); 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PROGRAMA ::= error NT$7 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_SUB ::= newline INDENTACION2 NT$8 BLOQUE_IF NT$9 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$10 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_SUB ::= newline INDENTACION2 NT$10 BLOQUE_FOR NT$11 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$12 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset); offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$13 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito();offset=stack_offset.pop(); 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_SUB ::= newline INDENTACION2 NT$12 BLOQUE_WHILE NT$13 INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Tipo dv = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$14 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$14 BLOQUE_FOR_FUNCTION NT$15 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$16 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$17 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito();offset=stack_offset.pop(); 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$16 BLOQUE_IF_FUNCTION NT$17 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$18 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$19 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 remover_ambito();offset=stack_offset.pop(); 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDO_FUNCTION ::= newline INDENTACION2 NT$18 BLOQUE_WHILE_FUNCTION NT$19 INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$20 ::= 
            {
              Tipo RESULT =null;
index_primer_id=t_simbolos.getTabla("Principal").get_ids().size();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_VARIABLE ::= dim NT$20 espacio DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 asignar_offset_ids();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$21 ::= 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
  if(!t_simbolos.existe_id_var_proc(id, remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright, "", remover(ambito_actual) ,offset));
                                                 offset+= t.getTamano();
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio NT$21 DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
  if(!t_simbolos.existe_id_var_proc(id, remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id, new integert(), idleft, idright,"", remover(ambito_actual),-1));
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_VARIABLE2 ::= identificador coma espacio NT$22 DECLARACION_VARIABLE2 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Tipo dv2 = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		  if(!t_simbolos.existe_id_var_proc(id,remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,"", remover(ambito_actual),-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= tipovar 
            {
              Tipo RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 if(tv.toLowerCase().equals("string")){RESULT = new stringt();}
                       if(tv.toLowerCase().equals("boolean")){RESULT = new booleant();}
                        if(tv.toLowerCase().equals("integer")){RESULT = new integert();}
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= identificador 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 if(t_simbolos.existe_id(id,"1", "Principal")){
                                    if(t_simbolos.getTabla("Principal").get_id(id).getTipo().getName().equals("Record")){
                                        RESULT = new Tipo(id);
                                    }else{
                                        error_ambito_id_no_es_registro(id, idleft, idright);
                                        RESULT = new Tipo(id);
                                    }
                                }else{
                                        error_ambito_id_no_es_registro(id, idleft, idright);
                                        RESULT = new Tipo(id);
                                }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$23 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Funcion();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t , idleft, idright,remover(ambito_actual),"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis NT$23 INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(new voidt());
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(new voidt());
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$24 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
 if(!t_simbolos.existe_id(id, "1", "Principal")){
                                                Tipo t = new Funcion();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,remover(ambito_actual),"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis NT$24 LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		ArrayList<Tipo> lp = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(new voidt());
                                                                                                     for(int i=lp.size()-1;i>=0;i--){
                                                                                                        ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(lp.get(i));
                                                                                                    }
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar 
            {
              ArrayList<Tipo> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
                                                Tipo n;
                                                if(t.toLowerCase().equals("string")){
                                                    n = new stringt();
                                                }else if(t.toLowerCase().equals("integer")){
                                                    n = new integert();
                                                }else{
                                                    n = new booleant();
                                                }
                                                if(!t_simbolos.existe_id(id, remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,n, idleft, idright,"",remover(ambito_actual),-1));
                                                t_simbolos.getTabla("Principal").get_id(id).setIsParametro(true);
                                                t_simbolos.getTabla("Principal").get_id(id).setTipoParametro(tp);
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
                                           RESULT = new ArrayList();RESULT.add(n);
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$25 ::= 
            {
              ArrayList<Tipo> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
  
                                             Tipo n;
                                                if(t.toLowerCase().equals("string")){
                                                    n = new stringt();
                                                }else if(t.toLowerCase().equals("integer")){
                                                    n = new integert();
                                                }else{
                                                    n = new booleant();
                                                }
                                            if(!t_simbolos.existe_id(id,remover(ambito_actual), "Principal")){
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,n, idleft, idright, "",remover(ambito_actual),-1));
                                                t_simbolos.getTabla("Principal").get_id(id).setIsParametro(true);
                                                t_simbolos.getTabla("Principal").get_id(id).setTipoParametro(tp);
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
                                           
                                           
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar NT$25 coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Tipo> RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ArrayList<Tipo>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Tipo> lp = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		Tipo n;
                                                if(t.equals("string")){
                                                    n = new stringt();
                                                }else if(t.equals("integer")){
                                                    n = new integert();
                                                }else{
                                                    n = new booleant();
                                                }
                                                RESULT=lp; RESULT.add(n);
                                                
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BLOQUE_FUNCION ::= function espacio CODIGO_FUNCION abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-12)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).right;
		ArrayList<Tipo> lp = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(t);
                                                                                                      for(int i=lp.size()-1;i>=0;i--){
                                                                                                        ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(lp.get(i));
                                                                                                    }
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-14)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE_FUNCION ::= function espacio CODIGO_FUNCION abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(t);
                                                                                                        ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(new voidt());
                                                                                                    
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-13)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUE_FUNCION ::= function espacio CODIGO_FUNCION abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(new voidt());
                                                                                                        ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(new voidt());
                                                                                                    
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUE_FUNCION ::= function espacio CODIGO_FUNCION abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		ArrayList<Tipo> lp = (ArrayList<Tipo>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		 if(t_simbolos.get_id_ambitos(id,"1", "Principal")!=null){
                                                                                                    ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).setRetorno(new voidt());
                                                                                                      for(int i=lp.size()-1;i>=0;i--){
                                                                                                        ((Funcion)t_simbolos.get_id_ambitos(id,"1", "Principal").getTipo()).addParametro(lp.get(i));
                                                                                                    }
                                                                                              } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		 if(!t_simbolos.existe_id(id, "1", "Principal")){
                                                       error_ambito_no_existe_funcion (id, idleft, idright);     
                                                        }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		 if(!t_simbolos.existe_id(id, "1", "Principal")){
                                                       error_ambito_no_existe_funcion (id, idleft, idright);     
                                                        }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_CONDICIONALES ::= EXP_CON_IN oplogor INDENTACION2 EXP_CON_IN 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int ololeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int oloright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String olo = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Node ec2 = (Node)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_CONDICIONALES ::= EXP_CON_IN oplogand INDENTACION2 EXP_CON_IN 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int olaleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int olaright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String ola = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Node ec2 = (Node)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis INDENTACION2 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_CONDICIONALES ::= not espacio abrirparentesis EXP_CONDICIONALES cerrarparentesis INDENTACION2 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_CON_IN ::= EXP 
            {
              Node RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CON_IN",42, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_CON_IN ::= EXP oprel espacio EXP 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CON_IN",42, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_CON_IN ::= EXP asignacion espacio EXP 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP_CON_IN",42, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP opsum INDENTACION2 EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= EXP opmult INDENTACION2 EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		if(!t_simbolos.existe_id_ambitos(id, remover(ambito_actual))){
                                   error_ambito_no_existe_var (id, idleft, idright);     
                              }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES ::= ELEMENTOS_ESTRUCTUA 
            {
              Exp RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 Object[] ob = t_simbolos.existe_id_estructura(ee, remover(ambito_actual));
                                      String s0 = ob[0].toString();
                                      if(!s0.equals("true")){
                                        String s1 = ob[1].toString();
                                        if(s1.equals("var")){
                                            error_ambito_no_existe_var (ee.split("\\.")[0], eeleft, eeright);
                                        }else{
                                            String s4 = ob[4].toString();
                                            if(s4.equals("")){
                                                error_uso_estructuras(ob[3].toString(), ob[2].toString(),ob[5].toString(), eeleft, eeright);
                                            }else{
                                               error_registro_no_existe_var (s4,ob[2].toString(), eeleft, eeright); 
                                            }
                                        }
                                     }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTOS_ESTRUCTUA ::= ELEMENTOS_ESTRUCTUA punto identificador 
            {
              String RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 RESULT=ee+"."+id;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTOS_ESTRUCTUA ::= identificador punto identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		RESULT=""; RESULT+=id+"."+id2;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$26 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$26",69, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$27 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$27",70, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONTENIDO_IF ::= newline INDENTACION2 NT$26 BLOQUE_FOR NT$27 INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$28 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$28",71, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$29 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$29",72, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTENIDO_IF ::= newline INDENTACION2 NT$28 BLOQUE_WHILE NT$29 INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$30 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$30",73, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$31 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$31",74, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 NT$30 BLOQUE_FOR_FUNCTION NT$31 INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$32 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$32",75, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$33 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$33",76, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 NT$32 BLOQUE_WHILE_FUNCTION NT$33 INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$34 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$34",77, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$35 ::= 
            {
              Stmt_If RESULT =(Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$35",78, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF NT$34 Else NT$35 INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-10)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-12)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$36 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$36",79, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$37 ::= 
            {
              Stmt_If RESULT =(Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$37",80, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION NT$36 Else NT$37 INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-11)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-13)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$38 ::= 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
if(!t_simbolos.existe_id_ambitos(id, remover(ambito_actual))){
                                   error_ambito_no_existe_var (id, idleft, idright);     
                              }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$38",81, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio NT$38 EXP 
            {
              Stmt_Asignacion RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Stmt_Asignacion) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BLOQUE_ASIGNACION ::= CODIGO_ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$39 ::= 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
if(!t_simbolos.existe_id_ambitos(id, remover(ambito_actual))){
                                   error_ambito_no_existe_var (id, idleft, idright);     
                              }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$39",82, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion NT$39 espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Stmt_Asignacion_For) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BLOQUE_ASIGNACION_FOR ::= CODIGO_ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$40 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$40",83, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$41 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito(); offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$41",84, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_FOR ::= newline INDENTACION2 NT$40 BLOQUE_IF NT$41 INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$42 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$42",85, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$43 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$43",86, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_FOR ::= newline INDENTACION2 NT$42 BLOQUE_WHILE NT$43 INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$44 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$44",87, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$45 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$45",88, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 NT$44 BLOQUE_IF_FUNCTION NT$45 INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$46 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$46",89, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$47 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$47",90, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 NT$46 BLOQUE_WHILE_FUNCTION NT$47 INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$48 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$48",91, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$49 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$49",92, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONTENIDO_WHILE ::= newline INDENTACION2 NT$48 BLOQUE_IF NT$49 INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$50 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$50",93, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$51 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$51",94, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONTENIDO_WHILE ::= newline INDENTACION2 NT$50 BLOQUE_FOR NT$51 INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$52 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$52",95, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$53 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$53",96, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 NT$52 BLOQUE_IF_FUNCTION NT$53 INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$54 ::= 
            {
              ArrayList<Node> RESULT =null;
sumar_ambito(); ambito_actual+=".0";stack_offset.push(offset);offset=0;
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$54",97, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$55 ::= 
            {
              ArrayList<Node> RESULT =(ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
remover_ambito();offset=stack_offset.pop();
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$55",98, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 NT$54 BLOQUE_FOR_FUNCTION NT$55 INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (ArrayList<Node>) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // NT$56 ::= 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
 if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Registro();
                                                t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,remover(ambito_actual),"1",-1));
                                                t_simbolos.addTabla(new TablaSimbolos(id));
                                                nueva_estructura = id;
                                            }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$56",99, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$57 ::= 
            {
              Stmt_Type RESULT =(Stmt_Type) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;

                                                int tamano=0;
                                                for(int i=0; i<t_simbolos.getTabla(id).get_ids().size();i++){
                                                    tamano+=t_simbolos.getTabla(id).get_ids().get(i).getTipo().getTamano();
                                                }
                                                t_simbolos.getTabla("Principal").get_id(id).getTipo().setTamano(tamano);
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$57",100, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // BLOQUE_ESTRUCTURA ::= type espacio identificador NT$56 INDENTACION2 CONTENIDO_ESTRUCTURA NT$57 end espacio type 
            {
              Stmt_Type RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Stmt_Type) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-7)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		
                                                    for(int i=0; i<t_simbolos.getTabla(id).get_ids().size();i++){
                                                        ((Registro)t_simbolos.getTabla("Principal").get_id(id).getTipo()).addVar(t_simbolos.getTabla(id).get_ids().get(i).getId(),
                                                          t_simbolos.getTabla(id).get_ids().get(i).getTipo());
                                                    }
                                                 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		  if(!t_simbolos.existe_id(id, remover(ambito_actual), nueva_estructura)){
                                                t_simbolos.getTabla(nueva_estructura).add_id(new Token(id,t, idleft, idright,"", remover(ambito_actual),offset));
                                                 offset+= t.getTamano();
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$58 ::= 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-3)).value;
if(!t_simbolos.existe_id_ambitos(id, remover(ambito_actual))){
                                   error_ambito_no_existe_var (id, idleft, idright);     
                              }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("NT$58",101, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio NT$58 console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Stmt_Lectura) ((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BLOQUE_LECTURA ::= CODIGO_ELEMENTOS_ESTRUCTUA espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;

              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-1)).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.elementAt(CUP$VbasicSintaxisAmbito$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CODIGO_ELEMENTOS_ESTRUCTUA ::= ELEMENTOS_ESTRUCTUA 
            {
              Object RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		 Object[] ob = t_simbolos.existe_id_estructura(ee, remover(ambito_actual));
                                      String s0 = ob[0].toString();
                                      if(!s0.equals("true")){
                                        String s1 = ob[1].toString();
                                        if(s1.equals("var")){
                                            error_ambito_no_existe_var (ee.split("\\.")[0], eeleft, eeright);
                                        }else{
                                            String s4 = ob[4].toString();
                                            if(s4.equals("")){
                                                error_uso_estructuras(ob[3].toString(), ob[2].toString(),ob[5].toString(), eeleft, eeright);
                                            }else{
                                               error_registro_no_existe_var (s4,ob[2].toString(), eeleft, eeright); 
                                            }
                                        }
                                     }
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CODIGO_ELEMENTOS_ESTRUCTUA",40, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CODIGO_FUNCION ::= identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicSintaxisAmbito$stack.peek()).value;
		  RESULT=id;
                                       if(!t_simbolos.existe_id(id,"1", "Principal")){
                                                Tipo t = new Funcion();
                                            t_simbolos.getTabla("Principal").add_id(new Token(id,t, idleft, idright,remover(ambito_actual),"1",-1));
                                                
                                           }else{
                                                error_ambito(id, idleft, idright);
                                           } 
              CUP$VbasicSintaxisAmbito$result = parser.getSymbolFactory().newSymbol("CODIGO_FUNCION",41, ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicSintaxisAmbito$stack.peek()), RESULT);
            }
          return CUP$VbasicSintaxisAmbito$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VbasicSintaxisAmbito$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VbasicSintaxisAmbito$do_action(
    int                        CUP$VbasicSintaxisAmbito$act_num,
    java_cup.runtime.lr_parser CUP$VbasicSintaxisAmbito$parser,
    java.util.Stack            CUP$VbasicSintaxisAmbito$stack,
    int                        CUP$VbasicSintaxisAmbito$top)
    throws java.lang.Exception
    {
              return CUP$VbasicSintaxisAmbito$do_action_part00000000(
                               CUP$VbasicSintaxisAmbito$act_num,
                               CUP$VbasicSintaxisAmbito$parser,
                               CUP$VbasicSintaxisAmbito$stack,
                               CUP$VbasicSintaxisAmbito$top);
    }
}

}

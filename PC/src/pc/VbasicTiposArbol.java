
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import pc.tabla.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VbasicTiposArbol extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VbasicTiposArbol() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VbasicTiposArbol(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbasicTiposArbol(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\053\002\000\002\003\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\002\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\015\006\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\004\000\002\016\005\000\002\016\006\000" +
    "\002\016\006\000\002\016\004\000\002\016\006\000\002" +
    "\017\005\000\002\006\004\000\002\006\002\000\002\005" +
    "\003\000\002\005\003\000\002\007\005\000\002\010\012" +
    "\000\002\010\006\000\002\010\007\000\002\022\003\000" +
    "\002\022\003\000\002\054\002\000\002\013\015\000\002" +
    "\055\002\000\002\013\016\000\002\014\011\000\002\014" +
    "\014\000\002\056\002\000\002\011\022\000\002\057\002" +
    "\000\002\011\021\000\002\060\002\000\002\011\015\000" +
    "\002\061\002\000\002\011\016\000\002\012\005\000\002" +
    "\012\006\000\002\024\003\000\002\024\006\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\026\010\000\002\052\003\000" +
    "\002\052\003\000\002\025\006\000\002\025\006\000\002" +
    "\025\004\000\002\025\006\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\005\000\002\023\003\000\002\051\005\000" +
    "\002\051\005\000\002\027\007\000\002\027\007\000\002" +
    "\027\007\000\002\027\007\000\002\027\004\000\002\027" +
    "\005\000\002\027\006\000\002\027\004\000\002\027\006" +
    "\000\002\030\007\000\002\030\007\000\002\030\007\000" +
    "\002\030\007\000\002\030\004\000\002\030\005\000\002" +
    "\030\006\000\002\030\006\000\002\030\004\000\002\030" +
    "\006\000\002\062\002\000\002\020\013\000\002\063\002" +
    "\000\002\020\016\000\002\064\002\000\002\021\014\000" +
    "\002\065\002\000\002\021\017\000\002\031\007\000\002" +
    "\031\007\000\002\034\007\000\002\034\007\000\002\066" +
    "\002\000\002\032\013\000\002\067\002\000\002\033\013" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\035\007\000\002\035\004\000\002\035\005\000\002" +
    "\035\006\000\002\035\004\000\002\035\006\000\002\036" +
    "\007\000\002\036\007\000\002\036\007\000\002\036\007" +
    "\000\002\036\004\000\002\036\005\000\002\036\006\000" +
    "\002\036\006\000\002\036\004\000\002\036\006\000\002" +
    "\070\002\000\002\037\012\000\002\071\002\000\002\040" +
    "\012\000\002\041\007\000\002\041\007\000\002\041\007" +
    "\000\002\041\007\000\002\041\004\000\002\041\005\000" +
    "\002\041\006\000\002\041\004\000\002\041\006\000\002" +
    "\042\007\000\002\042\007\000\002\042\007\000\002\042" +
    "\007\000\002\042\004\000\002\042\005\000\002\042\006" +
    "\000\002\042\006\000\002\042\004\000\002\042\006\000" +
    "\002\043\012\000\002\044\007\000\002\044\004\000\002" +
    "\044\005\000\002\044\004\000\002\045\007\000\002\046" +
    "\013\000\002\046\013\000\002\047\010\000\002\050\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ec\000\024\003\021\004\004\013\020\015\013\024" +
    "\015\046\010\047\006\050\007\052\023\001\002\000\004" +
    "\046\u01dd\001\002\000\004\002\001\001\002\000\022\003" +
    "\021\004\004\013\020\015\013\024\015\046\010\050\007" +
    "\052\023\001\002\000\110\002\uffd8\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\110\002\uffd7\003\uffd7\004\uffd7\005\uffd7\006\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\033\uffd7\034\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\012\002\uffd9" +
    "\046\010\047\uffd9\050\007\001\002\000\004\002\u01d9\001" +
    "\002\000\004\046\110\001\002\000\012\002\uffd9\046\010" +
    "\047\uffd9\050\007\001\002\000\004\046\071\001\002\000" +
    "\012\002\uffd9\046\010\047\uffd9\050\007\001\002\000\012" +
    "\002\uffd9\046\010\047\uffd9\050\007\001\002\000\004\046" +
    "\037\001\002\000\006\002\ufff7\047\ufff7\001\002\000\026" +
    "\002\ufff3\003\021\004\004\013\020\015\013\024\015\046" +
    "\010\047\030\050\007\052\023\001\002\000\014\002\uff53" +
    "\046\uff53\047\uff53\050\uff53\052\uff53\001\002\000\012\002" +
    "\uffd9\046\010\047\uffd9\050\007\001\002\000\006\002\ufff3" +
    "\047\030\001\002\000\100\002\uffd9\005\uffd9\006\uffd9\011" +
    "\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\010\047\uffd9\050\007\051\uffd9\052" +
    "\uffd9\053\uffd9\001\002\000\074\002\uffda\005\uffda\006\uffda" +
    "\011\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\033\uffda\034\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\047\uffda\051\uffda\052\uffda\053\uffda" +
    "\001\002\000\024\002\ufff4\003\021\004\004\013\020\015" +
    "\013\024\015\046\010\050\007\052\023\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\ufff5\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\ufffd\001\002\000\006\002\ufff3" +
    "\047\030\001\002\000\004\002\ufff6\001\002\000\004\045" +
    "\040\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9" +
    "\001\002\000\006\047\043\052\023\001\002\000\006\047" +
    "\043\052\023\001\002\000\016\017\uffd9\045\uffd9\046\010" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\004\017\045\001" +
    "\002\000\004\046\046\001\002\000\004\013\047\001\002" +
    "\000\012\002\uff5c\046\uff5c\047\uff5c\050\uff5c\001\002\000" +
    "\012\017\uff5a\045\051\047\043\052\023\001\002\000\004" +
    "\046\056\001\002\000\004\017\uff59\001\002\000\012\046" +
    "\010\047\uffd9\050\007\052\uffd9\001\002\000\006\047\043" +
    "\052\023\001\002\000\004\017\uff5b\001\002\000\004\025" +
    "\057\001\002\000\004\046\060\001\002\000\006\036\062" +
    "\045\061\001\002\000\016\002\uffd1\016\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\052\uffd1\001\002\000\016\002\uffd2\016\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\001\002\000\012\046" +
    "\uff57\047\uff57\050\uff57\052\uff57\001\002\000\004\017\uff58" +
    "\001\002\000\006\002\ufff3\047\030\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff3\047\030\001\002\000\004" +
    "\002\ufff9\001\002\000\004\045\072\001\002\000\006\016" +
    "\075\046\074\001\002\000\014\002\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\052\uffd6\001\002\000\004\025\100\001\002\000" +
    "\004\046\076\001\002\000\004\045\072\001\002\000\014" +
    "\002\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\001\002\000" +
    "\004\046\101\001\002\000\006\036\062\045\061\001\002" +
    "\000\016\002\uffd3\016\103\046\uffd3\047\uffd3\050\uffd3\052" +
    "\uffd3\001\002\000\004\046\104\001\002\000\004\045\072" +
    "\001\002\000\014\002\uffd5\046\uffd5\047\uffd5\050\uffd5\052" +
    "\uffd5\001\002\000\006\002\ufff3\047\030\001\002\000\004" +
    "\002\ufffb\001\002\000\004\045\111\001\002\000\004\005" +
    "\112\001\002\000\006\006\114\035\113\001\002\000\004" +
    "\046\u01d0\001\002\000\012\046\u01c1\047\uffd9\050\007\052" +
    "\uffd9\001\002\000\004\006\116\001\002\000\012\046\120" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\006\047\uffc4\052" +
    "\uffc4\001\002\000\014\025\121\046\uffd7\047\uffd7\050\uffd7" +
    "\052\uffd7\001\002\000\004\046\122\001\002\000\006\036" +
    "\062\045\061\001\002\000\012\046\010\047\uffd9\050\007" +
    "\052\uffd9\001\002\000\006\047\uffca\052\uffca\001\002\000" +
    "\006\047\127\052\023\001\002\000\006\047\127\052\023" +
    "\001\002\000\032\011\uffd9\017\uffd9\024\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\033\uffd9\045\uffd9\046\010\047\uffd9\050\007" +
    "\052\uffd9\001\002\000\004\017\131\001\002\000\004\046" +
    "\132\001\002\000\004\015\133\001\002\000\012\002\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\001\002\000\026\011\146\017" +
    "\uffe1\024\015\027\150\030\143\031\137\033\144\045\153" +
    "\047\127\052\023\001\002\000\006\047\127\052\023\001" +
    "\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002" +
    "\000\004\046\u0113\001\002\000\006\047\127\052\023\001" +
    "\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002" +
    "\000\006\047\127\052\023\001\002\000\004\046\350\001" +
    "\002\000\004\046\346\001\002\000\012\046\010\047\uffd9" +
    "\050\007\052\uffd9\001\002\000\004\012\337\001\002\000" +
    "\012\046\010\047\uffd9\050\007\052\uffd9\001\002\000\004" +
    "\046\245\001\002\000\012\046\010\047\uffd9\050\007\052" +
    "\uffd9\001\002\000\004\017\uffe0\001\002\000\010\005\176" +
    "\012\175\046\232\001\002\000\012\046\010\047\uffd9\050" +
    "\007\052\uffd9\001\002\000\006\012\156\046\157\001\002" +
    "\000\004\045\227\001\002\000\004\014\160\001\002\000" +
    "\004\046\161\001\002\000\020\005\162\011\166\026\164" +
    "\037\163\045\174\051\165\053\171\001\002\000\016\005" +
    "\162\026\164\037\163\045\174\051\165\053\171\001\002" +
    "\000\036\006\uffb1\014\uffb1\016\uffb1\020\uffb1\021\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\052\uffb1\001\002\000\004\046\222\001\002\000" +
    "\036\006\uffaf\014\uffaf\016\uffaf\020\uffaf\021\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\052\uffaf\001\002\000\004\012\216\001\002\000\040" +
    "\006\uffae\012\156\014\uffae\016\uffae\020\uffae\021\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\046\uffae\047\uffae" +
    "\050\uffae\052\uffae\001\002\000\036\006\uffd9\014\uffd9\016" +
    "\uffd9\020\uffd9\021\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\010\047\uffd9\050\007\052\uffd9\001\002\000" +
    "\036\006\uffb0\014\uffb0\016\uffb0\020\uffb0\021\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\052\uffb0\001\002\000\036\006\uffac\014\uffac\016\uffac" +
    "\020\uffac\021\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\046\uffac\047\uffac\050\uffac\052\uffac\001\002\000\012" +
    "\043\202\044\204\047\uff8d\052\uff8d\001\002\000\042\005" +
    "\176\006\uffb2\012\175\014\uffb2\016\uffb2\020\uffb2\021\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\052\uffb2\001\002\000\004\045\214\001\002" +
    "\000\020\005\162\006\177\026\164\037\163\045\174\051" +
    "\165\053\171\001\002\000\036\006\uffc2\014\uffc2\016\uffc2" +
    "\020\uffc2\021\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\001\002\000\004" +
    "\006\213\001\002\000\012\006\uffc0\016\203\043\202\044" +
    "\204\001\002\000\022\005\uffd9\026\uffd9\037\uffd9\045\uffd9" +
    "\046\010\050\007\051\uffd9\053\uffd9\001\002\000\004\046" +
    "\207\001\002\000\022\005\uffd9\026\uffd9\037\uffd9\045\uffd9" +
    "\046\010\050\007\051\uffd9\053\uffd9\001\002\000\016\005" +
    "\162\026\164\037\163\045\174\051\165\053\171\001\002" +
    "\000\032\006\uffb5\014\uffb5\016\uffb5\020\uffb5\021\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\047\uffb5\052\uffb5" +
    "\001\002\000\016\005\162\026\164\037\163\045\174\051" +
    "\165\053\171\001\002\000\004\006\uffbf\001\002\000\016" +
    "\005\162\026\164\037\163\045\174\051\165\053\171\001" +
    "\002\000\032\006\uffb6\014\uffb6\016\uffb6\020\uffb6\021\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\204\047\uffb6\052" +
    "\uffb6\001\002\000\036\006\uffc1\014\uffc1\016\uffc1\020\uffc1" +
    "\021\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\052\uffc1\001\002\000\040\006\uffaa" +
    "\012\uffaa\014\uffaa\016\uffaa\020\uffaa\021\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\052\uffaa\001\002\000\032\006\uffb4\014\uffb4\016\uffb4\020" +
    "\uffb4\021\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\047\uffb4\052\uffb4\001\002\000\004\010\217\001\002\000" +
    "\004\005\220\001\002\000\004\006\221\001\002\000\012" +
    "\046\uff55\047\uff55\050\uff55\052\uff55\001\002\000\014\005" +
    "\162\037\163\045\174\051\165\053\171\001\002\000\036" +
    "\006\uffd9\014\uffd9\016\uffd9\020\uffd9\021\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\046\010\047\uffd9\050\007" +
    "\052\uffd9\001\002\000\032\006\uffb3\014\uffb3\016\uffb3\020" +
    "\uffb3\021\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\047\uffb3\052\uffb3\001\002\000\010\006\226\043\202\044" +
    "\204\001\002\000\036\006\uffad\014\uffad\016\uffad\020\uffad" +
    "\021\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046" +
    "\uffad\047\uffad\050\uffad\052\uffad\001\002\000\040\006\uffab" +
    "\012\uffab\014\uffab\016\uffab\020\uffab\021\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab" +
    "\052\uffab\001\002\000\006\047\127\052\023\001\002\000" +
    "\004\017\uffe4\001\002\000\004\014\233\001\002\000\004" +
    "\046\234\001\002\000\020\005\162\011\235\026\164\037" +
    "\163\045\174\051\165\053\171\001\002\000\004\012\237" +
    "\001\002\000\012\043\202\044\204\047\uff8e\052\uff8e\001" +
    "\002\000\004\010\240\001\002\000\004\005\241\001\002" +
    "\000\004\006\242\001\002\000\012\046\uff56\047\uff56\050" +
    "\uff56\052\uff56\001\002\000\006\047\127\052\023\001\002" +
    "\000\004\017\uffe5\001\002\000\004\032\246\001\002\000" +
    "\004\046\247\001\002\000\016\005\250\026\252\037\163" +
    "\045\174\051\165\053\171\001\002\000\016\005\250\026" +
    "\252\037\163\045\174\051\165\053\171\001\002\000\012" +
    "\040\uffb7\041\uffb7\047\uff71\052\uff71\001\002\000\004\046" +
    "\272\001\002\000\006\040\263\041\264\001\002\000\026" +
    "\006\uffb8\014\256\020\uffb8\040\uffb8\041\uffb8\042\255\043" +
    "\202\044\204\047\uffb8\052\uffb8\001\002\000\004\046\261" +
    "\001\002\000\004\046\257\001\002\000\016\005\162\026" +
    "\164\037\163\045\174\051\165\053\171\001\002\000\022" +
    "\006\uffbd\020\uffbd\040\uffbd\041\uffbd\043\202\044\204\047" +
    "\uffbd\052\uffbd\001\002\000\016\005\162\026\164\037\163" +
    "\045\174\051\165\053\171\001\002\000\022\006\uffbe\020" +
    "\uffbe\040\uffbe\041\uffbe\043\202\044\204\047\uffbe\052\uffbe" +
    "\001\002\000\022\005\uffd9\026\uffd9\037\uffd9\045\uffd9\046" +
    "\010\050\007\051\uffd9\053\uffd9\001\002\000\022\005\uffd9" +
    "\026\uffd9\037\uffd9\045\uffd9\046\010\050\007\051\uffd9\053" +
    "\uffd9\001\002\000\016\005\250\026\252\037\163\045\174" +
    "\051\165\053\171\001\002\000\016\006\uffb7\020\uffb7\040" +
    "\uffb7\041\uffb7\047\uffb7\052\uffb7\001\002\000\016\006\uffbc" +
    "\020\uffbc\040\263\041\uffbc\047\uffbc\052\uffbc\001\002\000" +
    "\016\005\250\026\252\037\163\045\174\051\165\053\171" +
    "\001\002\000\016\006\uffbb\020\uffbb\040\uffbb\041\uffbb\047" +
    "\uffbb\052\uffbb\001\002\000\014\005\273\037\163\045\174" +
    "\051\165\053\171\001\002\000\016\005\250\026\252\037" +
    "\163\045\174\051\165\053\171\001\002\000\010\006\276" +
    "\040\uffb7\041\uffb7\001\002\000\020\006\226\014\256\040" +
    "\uffb8\041\uffb8\042\255\043\202\044\204\001\002\000\022" +
    "\006\uffd9\020\uffd9\040\uffd9\041\uffd9\046\010\047\uffd9\050" +
    "\007\052\uffd9\001\002\000\016\006\uffb9\020\uffb9\040\uffb9" +
    "\041\uffb9\047\uffb9\052\uffb9\001\002\000\006\047\302\052" +
    "\023\001\002\000\006\047\302\052\023\001\002\000\026" +
    "\011\uffd9\023\uffd9\030\uffd9\031\uffd9\033\uffd9\045\uffd9\046" +
    "\010\047\uffd9\050\007\052\uffd9\001\002\000\004\023\304" +
    "\001\002\000\012\046\uff70\047\uff70\050\uff70\052\uff70\001" +
    "\002\000\022\011\146\023\uff62\030\143\031\137\033\144" +
    "\045\153\047\302\052\023\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\006\047\302\052\023" +
    "\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002" +
    "\000\006\047\302\052\023\001\002\000\006\047\302\052" +
    "\023\001\002\000\004\023\uff61\001\002\000\012\046\010" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\006\047\302\052" +
    "\023\001\002\000\004\023\uff64\001\002\000\004\023\uff5d" +
    "\001\002\000\004\023\uff5f\001\002\000\006\047\302\052" +
    "\023\001\002\000\004\023\uff65\001\002\000\006\047\302" +
    "\052\023\001\002\000\004\023\uff66\001\002\000\004\023" +
    "\uff60\001\002\000\006\047\302\052\023\001\002\000\004" +
    "\023\uff63\001\002\000\004\023\uff5e\001\002\000\010\006" +
    "\333\040\uffb7\041\uffb7\001\002\000\022\006\uffd9\020\uffd9" +
    "\040\uffd9\041\uffd9\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\016\006\uffba\020\uffba\040\uffba\041\uffba\047\uffba" +
    "\052\uffba\001\002\000\006\047\127\052\023\001\002\000" +
    "\004\017\uffe2\001\002\000\004\007\340\001\002\000\004" +
    "\005\341\001\002\000\016\005\162\026\164\037\163\045" +
    "\174\051\165\053\171\001\002\000\010\006\343\043\202" +
    "\044\204\001\002\000\012\046\uff54\047\uff54\050\uff54\052" +
    "\uff54\001\002\000\006\047\127\052\023\001\002\000\004" +
    "\017\uffe7\001\002\000\016\005\162\026\164\037\163\045" +
    "\174\051\165\053\171\001\002\000\012\043\202\044\204" +
    "\047\uffdb\052\uffdb\001\002\000\016\005\250\026\252\037" +
    "\163\045\174\051\165\053\171\001\002\000\010\020\352" +
    "\040\uffb7\041\uffb7\001\002\000\012\046\010\047\uffd9\050" +
    "\007\052\uffd9\001\002\000\006\047\355\052\023\001\002" +
    "\000\006\047\355\052\023\001\002\000\030\011\uffd9\017" +
    "\uffd9\027\uffd9\031\uffd9\033\uffd9\034\uffd9\045\uffd9\046\010" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\006\017\357\034" +
    "\360\001\002\000\004\046\uff92\001\002\000\012\046\uff90" +
    "\047\uff90\050\uff90\052\uff90\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\006\047\355\052\023" +
    "\001\002\000\004\017\364\001\002\000\004\046\365\001" +
    "\002\000\004\030\366\001\002\000\012\046\uff8f\047\uff8f" +
    "\050\uff8f\052\uff8f\001\002\000\004\046\370\001\002\000" +
    "\004\030\371\001\002\000\012\046\uff91\047\uff91\050\uff91" +
    "\052\uff91\001\002\000\024\011\146\017\uff9c\027\150\031" +
    "\137\033\144\034\uff9c\045\153\047\355\052\023\001\002" +
    "\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002\000" +
    "\006\047\355\052\023\001\002\000\012\046\010\047\uffd9" +
    "\050\007\052\uffd9\001\002\000\012\046\010\047\uffd9\050" +
    "\007\052\uffd9\001\002\000\006\047\355\052\023\001\002" +
    "\000\006\047\355\052\023\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\006\017\uff9b\034\uff9b" +
    "\001\002\000\006\047\355\052\023\001\002\000\006\017" +
    "\uff9e\034\uff9e\001\002\000\006\017\uff97\034\uff97\001\002" +
    "\000\006\017\uff99\034\uff99\001\002\000\006\047\355\052" +
    "\023\001\002\000\006\017\uff9d\034\uff9d\001\002\000\006" +
    "\047\355\052\023\001\002\000\006\017\uffa0\034\uffa0\001" +
    "\002\000\006\017\uff9a\034\uff9a\001\002\000\006\047\355" +
    "\052\023\001\002\000\006\017\uff9f\034\uff9f\001\002\000" +
    "\006\017\uff98\034\uff98\001\002\000\004\017\uffdf\001\002" +
    "\000\006\047\127\052\023\001\002\000\004\017\uffe6\001" +
    "\002\000\004\017\uffde\001\002\000\004\045\u0114\001\002" +
    "\000\006\012\175\046\u0138\001\002\000\004\021\u011b\001" +
    "\002\000\006\012\156\046\u0117\001\002\000\004\014\u0118" +
    "\001\002\000\004\046\u0119\001\002\000\016\005\162\026" +
    "\164\037\163\045\174\051\165\053\171\001\002\000\010" +
    "\021\uff8b\043\202\044\204\001\002\000\004\046\u011c\001" +
    "\002\000\016\005\162\026\164\037\163\045\174\051\165" +
    "\053\171\001\002\000\012\043\202\044\204\047\uff88\052" +
    "\uff88\001\002\000\006\047\u0121\052\023\001\002\000\006" +
    "\047\u0121\052\023\001\002\000\004\022\u0136\001\002\000" +
    "\026\011\uffd9\022\uffd9\027\uffd9\030\uffd9\033\uffd9\045\uffd9" +
    "\046\010\047\uffd9\050\007\052\uffd9\001\002\000\022\011" +
    "\146\022\uff79\027\150\030\143\033\144\045\153\047\u0121" +
    "\052\023\001\002\000\006\047\u0121\052\023\001\002\000" +
    "\012\046\010\047\uffd9\050\007\052\uffd9\001\002\000\012" +
    "\046\010\047\uffd9\050\007\052\uffd9\001\002\000\012\046" +
    "\010\047\uffd9\050\007\052\uffd9\001\002\000\006\047\u0121" +
    "\052\023\001\002\000\006\047\u0121\052\023\001\002\000" +
    "\012\046\010\047\uffd9\050\007\052\uffd9\001\002\000\004" +
    "\022\uff78\001\002\000\006\047\u0121\052\023\001\002\000" +
    "\004\022\uff7b\001\002\000\004\022\uff74\001\002\000\004" +
    "\022\uff76\001\002\000\006\047\u0121\052\023\001\002\000" +
    "\004\022\uff7a\001\002\000\006\047\u0121\052\023\001\002" +
    "\000\004\022\uff7d\001\002\000\006\047\u0121\052\023\001" +
    "\002\000\004\022\uff7c\001\002\000\004\022\uff77\001\002" +
    "\000\012\046\uff87\047\uff87\050\uff87\052\uff87\001\002\000" +
    "\004\022\uff75\001\002\000\004\014\u0139\001\002\000\004" +
    "\046\u013a\001\002\000\016\005\162\026\164\037\163\045" +
    "\174\051\165\053\171\001\002\000\010\021\uff8c\043\202" +
    "\044\204\001\002\000\006\047\127\052\023\001\002\000" +
    "\004\017\uffe3\001\002\000\004\017\uffdc\001\002\000\004" +
    "\017\uffdd\001\002\000\006\047\u0142\052\023\001\002\000" +
    "\006\047\u0142\052\023\001\002\000\030\011\uffd9\017\uffd9" +
    "\024\uffd9\027\uffd9\030\uffd9\031\uffd9\045\uffd9\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\004\017\u0144\001\002" +
    "\000\004\046\u0145\001\002\000\004\015\u0146\001\002\000" +
    "\012\002\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000\024" +
    "\011\146\017\uffec\024\015\027\u0150\030\u014d\031\u014a\045" +
    "\153\047\u0142\052\023\001\002\000\006\047\u0142\052\023" +
    "\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\004\046\u019f\001\002\000\006\047\u0142\052\023" +
    "\001\002\000\004\017\uffeb\001\002\000\004\046\u017a\001" +
    "\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002" +
    "\000\012\046\010\047\uffd9\050\007\052\uffd9\001\002\000" +
    "\004\046\u015a\001\002\000\012\046\010\047\uffd9\050\007" +
    "\052\uffd9\001\002\000\012\046\010\047\uffd9\050\007\052" +
    "\uffd9\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9" +
    "\001\002\000\006\047\u0142\052\023\001\002\000\004\017" +
    "\uffee\001\002\000\006\047\u0142\052\023\001\002\000\004" +
    "\017\uffed\001\002\000\006\047\u0142\052\023\001\002\000" +
    "\004\017\ufff2\001\002\000\004\032\u015b\001\002\000\004" +
    "\046\u015c\001\002\000\016\005\250\026\252\037\163\045" +
    "\174\051\165\053\171\001\002\000\012\040\uffb7\041\uffb7" +
    "\047\uff73\052\uff73\001\002\000\006\047\u0161\052\023\001" +
    "\002\000\004\023\u0175\001\002\000\006\047\u0161\052\023" +
    "\001\002\000\024\011\uffd9\023\uffd9\030\uffd9\031\uffd9\045" +
    "\uffd9\046\010\047\uffd9\050\007\052\uffd9\001\002\000\020" +
    "\011\146\023\uff6b\030\u014d\031\u014a\045\153\047\u0161\052" +
    "\023\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9" +
    "\001\002\000\004\023\uff6a\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\006\047\u0161\052\023" +
    "\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\006\047\u0161\052\023\001\002\000\012\046\010" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\006\047\u0161\052" +
    "\023\001\002\000\004\023\uff6d\001\002\000\004\023\uff67" +
    "\001\002\000\006\047\u0161\052\023\001\002\000\004\023" +
    "\uff6f\001\002\000\004\023\uff69\001\002\000\006\047\u0161" +
    "\052\023\001\002\000\004\023\uff6e\001\002\000\006\047" +
    "\u0161\052\023\001\002\000\004\023\uff6c\001\002\000\004" +
    "\023\uff68\001\002\000\012\046\uff72\047\uff72\050\uff72\052" +
    "\uff72\001\002\000\006\047\u0142\052\023\001\002\000\004" +
    "\017\uffef\001\002\000\006\047\u0142\052\023\001\002\000" +
    "\004\017\ufff0\001\002\000\016\005\250\026\252\037\163" +
    "\045\174\051\165\053\171\001\002\000\010\020\u017c\040" +
    "\uffb7\041\uffb7\001\002\000\006\047\u017e\052\023\001\002" +
    "\000\006\047\u017e\052\023\001\002\000\026\011\uffd9\017" +
    "\uffd9\027\uffd9\031\uffd9\034\uffd9\045\uffd9\046\010\047\uffd9" +
    "\050\007\052\uffd9\001\002\000\006\017\u0180\034\u0181\001" +
    "\002\000\004\046\uff96\001\002\000\012\046\uff94\047\uff94" +
    "\050\uff94\052\uff94\001\002\000\012\046\010\047\uffd9\050" +
    "\007\052\uffd9\001\002\000\006\047\u017e\052\023\001\002" +
    "\000\004\017\u0185\001\002\000\004\046\u0186\001\002\000" +
    "\004\030\u0187\001\002\000\012\046\uff93\047\uff93\050\uff93" +
    "\052\uff93\001\002\000\004\046\u0189\001\002\000\004\030" +
    "\u018a\001\002\000\012\046\uff95\047\uff95\050\uff95\052\uff95" +
    "\001\002\000\022\011\146\017\uffa5\027\u0150\031\u014a\034" +
    "\uffa5\045\153\047\u017e\052\023\001\002\000\006\017\uffa4" +
    "\034\uffa4\001\002\000\012\046\010\047\uffd9\050\007\052" +
    "\uffd9\001\002\000\006\047\u017e\052\023\001\002\000\012" +
    "\046\010\047\uffd9\050\007\052\uffd9\001\002\000\012\046" +
    "\010\047\uffd9\050\007\052\uffd9\001\002\000\006\047\u017e" +
    "\052\023\001\002\000\012\046\010\047\uffd9\050\007\052" +
    "\uffd9\001\002\000\006\047\u017e\052\023\001\002\000\006" +
    "\017\uffa7\034\uffa7\001\002\000\006\017\uffa1\034\uffa1\001" +
    "\002\000\006\047\u017e\052\023\001\002\000\006\017\uffa9" +
    "\034\uffa9\001\002\000\006\047\u017e\052\023\001\002\000" +
    "\006\017\uffa6\034\uffa6\001\002\000\006\017\uffa3\034\uffa3" +
    "\001\002\000\006\047\u017e\052\023\001\002\000\006\017" +
    "\uffa8\034\uffa8\001\002\000\006\017\uffa2\034\uffa2\001\002" +
    "\000\004\017\uffea\001\002\000\004\045\u0114\001\002\000" +
    "\004\021\u01a1\001\002\000\004\046\u01a2\001\002\000\016" +
    "\005\162\026\164\037\163\045\174\051\165\053\171\001" +
    "\002\000\012\043\202\044\204\047\uff8a\052\uff8a\001\002" +
    "\000\006\047\u01a6\052\023\001\002\000\006\047\u01a6\052" +
    "\023\001\002\000\024\011\uffd9\022\uffd9\027\uffd9\030\uffd9" +
    "\045\uffd9\046\010\047\uffd9\050\007\052\uffd9\001\002\000" +
    "\004\022\u01a8\001\002\000\012\046\uff89\047\uff89\050\uff89" +
    "\052\uff89\001\002\000\020\011\146\022\uff82\027\u0150\030" +
    "\u014d\045\153\047\u01a6\052\023\001\002\000\012\046\010" +
    "\047\uffd9\050\007\052\uffd9\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\004\022\uff81\001\002" +
    "\000\006\047\u01a6\052\023\001\002\000\012\046\010\047" +
    "\uffd9\050\007\052\uffd9\001\002\000\006\047\u01a6\052\023" +
    "\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\006\047\u01a6\052\023\001\002\000\004\022\uff84" +
    "\001\002\000\004\022\uff7e\001\002\000\006\047\u01a6\052" +
    "\023\001\002\000\004\022\uff86\001\002\000\004\022\uff80" +
    "\001\002\000\006\047\u01a6\052\023\001\002\000\004\022" +
    "\uff83\001\002\000\006\047\u01a6\052\023\001\002\000\004" +
    "\022\uff85\001\002\000\004\022\uff7f\001\002\000\006\047" +
    "\u0142\052\023\001\002\000\004\017\ufff1\001\002\000\004" +
    "\017\uffe8\001\002\000\004\017\uffe9\001\002\000\006\047" +
    "\uffc6\052\uffc6\001\002\000\014\025\u01c2\046\uffd7\047\uffd7" +
    "\050\uffd7\052\uffd7\001\002\000\004\046\u01c3\001\002\000" +
    "\006\036\062\045\061\001\002\000\012\046\010\047\uffd9" +
    "\050\007\052\uffd9\001\002\000\006\047\uffc8\052\uffc8\001" +
    "\002\000\006\047\127\052\023\001\002\000\004\017\u01c8" +
    "\001\002\000\004\046\u01c9\001\002\000\004\015\u01ca\001" +
    "\002\000\012\002\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002" +
    "\000\006\047\u0142\052\023\001\002\000\004\017\u01cd\001" +
    "\002\000\004\046\u01ce\001\002\000\004\015\u01cf\001\002" +
    "\000\012\002\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002\000" +
    "\004\045\u01d1\001\002\000\004\046\u01d2\001\002\000\004" +
    "\025\u01d3\001\002\000\004\046\u01d4\001\002\000\004\036" +
    "\u01d5\001\002\000\006\006\uffcc\016\u01d6\001\002\000\004" +
    "\046\u01d7\001\002\000\004\035\113\001\002\000\004\006" +
    "\uffcb\001\002\000\004\002\000\001\002\000\006\002\ufff3" +
    "\047\030\001\002\000\004\002\ufff8\001\002\000\004\002" +
    "\uffff\001\002\000\004\045\u01de\001\002\000\004\005\u01df" +
    "\001\002\000\006\006\u01e0\035\113\001\002\000\012\046" +
    "\010\047\uffd9\050\007\052\uffd9\001\002\000\004\006\u01e2" +
    "\001\002\000\012\046\010\047\uffd9\050\007\052\uffd9\001" +
    "\002\000\006\047\uffce\052\uffce\001\002\000\006\047\u0142" +
    "\052\023\001\002\000\004\017\u01e6\001\002\000\004\046" +
    "\u01e7\001\002\000\004\004\u01e8\001\002\000\012\002\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\001\002\000\006\047\uffd0\052" +
    "\uffd0\001\002\000\006\047\u0142\052\023\001\002\000\004" +
    "\017\u01ec\001\002\000\004\046\u01ed\001\002\000\004\004" +
    "\u01ee\001\002\000\012\002\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ec\000\022\002\011\003\004\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01db\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\u01d9\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\025\006\105" +
    "\001\001\000\002\001\001\000\006\005\025\006\066\001" +
    "\001\000\006\005\025\006\064\001\001\000\002\001\001" +
    "\000\004\053\034\001\001\000\022\003\032\004\033\005" +
    "\021\007\015\011\013\013\016\043\023\050\010\001\001" +
    "\000\002\001\001\000\006\005\025\006\024\001\001\000" +
    "\004\004\030\001\001\000\006\005\025\006\026\001\001" +
    "\000\002\001\001\000\020\003\031\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\025\006\040\001\001\000\006\044\043\050" +
    "\041\001\001\000\006\044\063\050\041\001\001\000\006" +
    "\005\025\006\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\051" +
    "\045\052\050\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\025\006\053\001\001\000\006\044\054" +
    "\050\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\065\001\001\000\002\001\001\000\004\004\067" +
    "\001\001\000\002\001\001\000\004\010\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\104\001\001\000\002\001" +
    "\001\000\004\004\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\114\001\001\000" +
    "\002\001\001\000\006\005\025\006\u01bf\001\001\000\002" +
    "\001\001\000\006\005\025\006\116\001\001\000\004\061" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\122\001\001\000\006\005\025\006\123\001\001\000" +
    "\004\056\124\001\001\000\006\016\127\050\125\001\001" +
    "\000\006\016\u013e\050\125\001\001\000\006\005\025\006" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\144\012\134\016" +
    "\151\017\141\021\135\031\137\033\140\040\146\046\150" +
    "\047\153\050\125\051\154\001\001\000\006\016\u013d\050" +
    "\125\001\001\000\006\005\025\006\u013b\001\001\000\002" +
    "\001\001\000\006\016\u0111\050\125\001\001\000\006\005" +
    "\025\006\u010f\001\001\000\006\016\u010e\050\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\025\006" +
    "\343\001\001\000\002\001\001\000\006\005\025\006\334" +
    "\001\001\000\002\001\001\000\006\005\025\006\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\025" +
    "\006\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\171\023\167" +
    "\025\172\051\166\001\001\000\012\012\171\023\167\025" +
    "\224\051\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\025\006\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\171\023\167\024\177\025\200\051\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\025\006\210\001\001\000\002\001\001" +
    "\000\006\005\025\006\204\001\001\000\012\012\171\023" +
    "\167\025\205\051\166\001\001\000\002\001\001\000\014" +
    "\012\171\023\167\024\207\025\200\051\166\001\001\000" +
    "\002\001\001\000\012\012\171\023\167\025\211\051\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\171\023" +
    "\222\051\166\001\001\000\006\005\025\006\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\230\050\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\171\023\167\025\235\051\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\243\050\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\171\023\167\025\253\026\250\051\166" +
    "\052\252\001\001\000\016\012\171\023\167\025\274\026" +
    "\331\051\166\052\252\001\001\000\004\071\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\171\023\167" +
    "\025\257\051\166\001\001\000\002\001\001\000\012\012" +
    "\171\023\167\025\261\051\166\001\001\000\002\001\001" +
    "\000\006\005\025\006\267\001\001\000\006\005\025\006" +
    "\264\001\001\000\016\012\171\023\167\025\253\026\265" +
    "\051\166\052\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\171\023\167\025\253\026\265\051\166" +
    "\052\270\001\001\000\002\001\001\000\010\012\171\023" +
    "\222\051\166\001\001\000\016\012\171\023\167\025\274" +
    "\026\273\051\166\052\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\025\006\276\001\001\000\002" +
    "\001\001\000\006\042\302\050\300\001\001\000\006\042" +
    "\330\050\300\001\001\000\006\005\025\006\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\312\017" +
    "\311\021\310\031\306\033\305\042\313\046\307\047\314" +
    "\050\300\051\154\001\001\000\006\005\025\006\326\001" +
    "\001\000\006\042\325\050\300\001\001\000\006\005\025" +
    "\006\323\001\001\000\006\005\025\006\321\001\001\000" +
    "\006\042\320\050\300\001\001\000\006\042\317\050\300" +
    "\001\001\000\002\001\001\000\006\005\025\006\315\001" +
    "\001\000\006\042\316\050\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\322\050" +
    "\300\001\001\000\002\001\001\000\006\042\324\050\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\327\050\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\333\001\001\000" +
    "\002\001\001\000\006\016\335\050\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\171\023\167\025\341\051\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\344\050\125\001\001\000" +
    "\002\001\001\000\012\012\171\023\167\025\346\051\166" +
    "\001\001\000\002\001\001\000\016\012\171\023\167\025" +
    "\253\026\350\051\166\052\252\001\001\000\002\001\001" +
    "\000\006\005\025\006\352\001\001\000\006\030\355\050" +
    "\353\001\001\000\006\030\u010d\050\353\001\001\000\006" +
    "\005\025\006\371\001\001\000\002\001\001\000\004\064" +
    "\366\001\001\000\004\065\360\001\001\000\006\005\025" +
    "\006\361\001\001\000\006\030\362\050\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\377\017\376\030\u0101\031\373\033\372" +
    "\040\375\046\374\047\u0100\050\353\051\154\001\001\000" +
    "\006\005\025\006\u010b\001\001\000\006\030\u010a\050\353" +
    "\001\001\000\006\005\025\006\u0108\001\001\000\006\005" +
    "\025\006\u0106\001\001\000\006\030\u0105\050\353\001\001" +
    "\000\006\030\u0104\050\353\001\001\000\006\005\025\006" +
    "\u0102\001\001\000\002\001\001\000\006\030\u0103\050\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u0107\050\353\001\001\000\002\001\001" +
    "\000\006\030\u0109\050\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\u010c\050\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u0110\050\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\u0114\051\u0115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\171\023\167\025\u0119\051\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\171" +
    "\023\167\025\u011c\051\166\001\001\000\004\067\u011d\001" +
    "\001\000\006\036\u011f\050\u011e\001\001\000\006\036\u0136" +
    "\050\u011e\001\001\000\002\001\001\000\006\005\025\006" +
    "\u0121\001\001\000\026\012\u0127\017\u0126\021\u0123\031\u0122" +
    "\036\u0129\040\u0125\046\u0124\047\u0128\050\u011e\051\154\001" +
    "\001\000\006\036\u0134\050\u011e\001\001\000\006\005\025" +
    "\006\u0132\001\001\000\006\005\025\006\u0130\001\001\000" +
    "\006\005\025\006\u012e\001\001\000\006\036\u012d\050\u011e" +
    "\001\001\000\006\036\u012c\050\u011e\001\001\000\006\005" +
    "\025\006\u012a\001\001\000\002\001\001\000\006\036\u012b" +
    "\050\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\u012f\050\u011e\001\001\000\002" +
    "\001\001\000\006\036\u0131\050\u011e\001\001\000\002\001" +
    "\001\000\006\036\u0133\050\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\171\023\167" +
    "\025\u013a\051\166\001\001\000\002\001\001\000\006\016" +
    "\u013c\050\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0142\050\u0140\001\001\000" +
    "\006\015\u01be\050\u0140\001\001\000\006\005\025\006\u0146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\u014e\012\u0147\015\u014b" +
    "\020\u0148\031\u014a\032\u014d\037\u0151\046\u0150\047\u0152\050" +
    "\u0140\051\154\001\001\000\006\015\u01bd\050\u0140\001\001" +
    "\000\006\005\025\006\u01bb\001\001\000\002\001\001\000" +
    "\006\015\u019d\050\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\025\006\u0177\001\001\000\006\005" +
    "\025\006\u0175\001\001\000\002\001\001\000\006\005\025" +
    "\006\u0157\001\001\000\006\005\025\006\u0155\001\001\000" +
    "\006\005\025\006\u0153\001\001\000\006\015\u0154\050\u0140" +
    "\001\001\000\002\001\001\000\006\015\u0156\050\u0140\001" +
    "\001\000\002\001\001\000\006\015\u0158\050\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\171\023\167\025\253\026\u015c\051\166\052\252" +
    "\001\001\000\004\070\u015d\001\001\000\006\041\u015e\050" +
    "\u015f\001\001\000\002\001\001\000\006\041\u0173\050\u015f" +
    "\001\001\000\006\005\025\006\u0161\001\001\000\024\012" +
    "\u0167\020\u0164\031\u0165\032\u0162\041\u0163\046\u0166\047\u0168" +
    "\050\u015f\051\154\001\001\000\006\005\025\006\u0171\001" +
    "\001\000\002\001\001\000\006\005\025\006\u016f\001\001" +
    "\000\006\041\u016e\050\u015f\001\001\000\006\005\025\006" +
    "\u016c\001\001\000\006\041\u016b\050\u015f\001\001\000\006" +
    "\005\025\006\u0169\001\001\000\006\041\u016a\050\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\u016d" +
    "\050\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\u0170\050\u015f\001\001\000\002\001\001\000\006" +
    "\041\u0172\050\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u0176\050\u0140\001\001" +
    "\000\002\001\001\000\006\015\u0178\050\u0140\001\001\000" +
    "\002\001\001\000\016\012\171\023\167\025\253\026\u017a" +
    "\051\166\052\252\001\001\000\002\001\001\000\006\027" +
    "\u017e\050\u017c\001\001\000\006\027\u019c\050\u017c\001\001" +
    "\000\006\005\025\006\u018a\001\001\000\002\001\001\000" +
    "\004\062\u0187\001\001\000\004\063\u0181\001\001\000\006" +
    "\005\025\006\u0182\001\001\000\006\027\u0183\050\u017c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\u0190\027\u018b\031\u018d\032\u018c" +
    "\037\u018e\046\u018f\047\u0191\050\u017c\051\154\001\001\000" +
    "\002\001\001\000\006\005\025\006\u019a\001\001\000\006" +
    "\027\u0199\050\u017c\001\001\000\006\005\025\006\u0197\001" +
    "\001\000\006\005\025\006\u0195\001\001\000\006\027\u0194" +
    "\050\u017c\001\001\000\006\005\025\006\u0192\001\001\000" +
    "\006\027\u0193\050\u017c\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u0196\050\u017c\001\001\000\002\001" +
    "\001\000\006\027\u0198\050\u017c\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\u019b\050\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u019f\051\u0115\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\171\023\167\025\u01a2\051\166\001\001" +
    "\000\004\066\u01a3\001\001\000\006\035\u01a6\050\u01a4\001" +
    "\001\000\006\035\u01ba\050\u01a4\001\001\000\006\005\025" +
    "\006\u01a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\u01ae\020\u01a9\031\u01ac\035\u01ab\037\u01aa\046\u01ad" +
    "\047\u01af\050\u01a4\051\154\001\001\000\006\005\025\006" +
    "\u01b8\001\001\000\006\005\025\006\u01b6\001\001\000\002" +
    "\001\001\000\006\035\u01b5\050\u01a4\001\001\000\006\005" +
    "\025\006\u01b3\001\001\000\006\035\u01b2\050\u01a4\001\001" +
    "\000\006\005\025\006\u01b0\001\001\000\006\035\u01b1\050" +
    "\u01a4\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\u01b4\050\u01a4\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u01b7\050\u01a4\001\001\000\002\001\001" +
    "\000\006\035\u01b9\050\u01a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01bc\050\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u01ca\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01c3\001\001\000\006\005\025\006\u01c4\001\001\000" +
    "\004\057\u01c5\001\001\000\006\016\u01c6\050\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01cb\050\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u01d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u01da\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u01e0\001\001\000\006\005\025\006\u01e8\001" +
    "\001\000\002\001\001\000\006\005\025\006\u01e2\001\001" +
    "\000\004\055\u01e3\001\001\000\006\015\u01e4\050\u0140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\u01e9\001\001\000\006\015" +
    "\u01ea\050\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbasicTiposArbol$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbasicTiposArbol$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbasicTiposArbol$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        if (info instanceof String){} else {}
    }
   
    public void report_fatal_error() {
        throw new RuntimeException("Fatal Syntax Error");
    }

    TablasDeSimbolos tds;
    public void setTablasDeSimbolos(TablasDeSimbolos t){
        tds=t;
    }

    public  int errors_count =0;
    public void error_tipos_diferentes_exp(String exp1,String exp2,  String op, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo realizar la operación: "+op+", la expresión: "+exp1+" y la expresión: "+exp2+" son tipos diferentes): Semantic error");
    }

    public void error_tipo_no_numerico_exp(String exp1,String exp2, String op, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo realizar la operación: "+op+", la expresión: "+exp1+" y la expresión: "+exp2+" no son de tipo númerico): Semantic error");
    }
    public void error_argumentos_incorrectos (String id,String argsenviados,String argsesperados, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", se encontraron los argumentos de tipo: "+argsenviados+" en la llamada al procedimiento o función: "+id+", donde se esperaba: "+argsesperados+"): Semantic error");
    }

    public void error_write (String exp,String tipo, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puede imprimir la expresión: "+exp+" que es de tipo: "+tipo+"): Semantic error");
    }

    public void error_read (String id,String tipo, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puede asignar la lectura a la variable: "+id+" de tipo: "+tipo+"): Semantic error");
    }

    public void error_asignacion (String id, String tipoid, String exp, String tipoexp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo asignar a la variable: "+id+" de tipo: "+tipoid+", la expresión: "+exp+" de tipo: "+tipoexp+"): Semantic error");
    }

    public void  error_asignacion_for (int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", la asignación en el for tiene que ser de tipo númerico): Semantic error");
    }

    public void error_tipo_no_numerico(String exp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", expresión: "+exp+" no es de tipo númerico): Semantic error");
    }

    public void error_tipo_no_booleano (String exp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", expresión: "+exp+" no es de tipo booleano): Semantic error");
    }
    public void error_no_main(){
        errors_count++;
        System.err.println("Error (No se encontro el procedimiento main): Semantic error");
    }
    public void error_valor_return (String id, String tipoid, String exp, String tipoexp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", el tipo de retorno de la función: "+id+" es: "+tipoid+", y la expresión: "+exp+" es de tipo: "+tipoexp+"): Semantic error");
    }

    public void error_op_not(String valor, String tipo, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puede utilizar el operador "+"'not'"+" de tipo Boolean, con: "+valor+" que es de tipo: "+tipo+"): Semantic error");
    }

    
    public Programa programaT;
    public String ambito_actual="1";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VbasicTiposArbol$actions {
  private final VbasicTiposArbol parser;

  /** Constructor */
  CUP$VbasicTiposArbol$actions(VbasicTiposArbol parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action_part00000000(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbasicTiposArbol$result;

      /* select the action based on the action number */
      switch (CUP$VbasicTiposArbol$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		programaT = p; if(!tds.hay_main()){ error_no_main();} 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = start_val;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbasicTiposArbol$parser.done_parsing();
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p; programaT = p; if(!tds.hay_main()){ error_no_main();}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=p2; RESULT.addNode(bp); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(be);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addListNode(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Programa RESULT =null;
 parser.report_error("ERROR","SYNTAX"); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA ::= error NT$0 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Return("return"); RESULT.addNode(e);
                                            boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){              
                                            String id_funcion = tds.get_id_segun_ambito_hijos(ambito_actual);
                                                if(!id_funcion.equals("")){
                                                if(!((Funcion)tds.getTabla("Principal").get_id(id_funcion).getTipo()).getRetorno().toString().equals(e.getTipo_tabla().toString())){
                                                    error_valor_return(id_funcion, ((Funcion)tds.getTabla("Principal").get_id(id_funcion).getTipo()).getRetorno().toString(), e.getVal(), e.getTipo_tabla().toString(), eleft, eright );
                                                }
                                            }}
                                      
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); Stmt_Variable temp = (Stmt_Variable)RESULT.get(RESULT.size()-2); RESULT.get(RESULT.size()-1).addNode(temp.getTipo()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= tipovar 
            {
              Node RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(tv);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS ::= identificador 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(id);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 NT$1 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 NT$2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = lp; RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$3 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 NT$3 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-15)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$4 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 NT$4 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-14)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 NT$5 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters"));  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 NT$6 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp);  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments"));
                                                                               Token tok = tds.get_id_ambitos(id, "1", "Principal");
                                                                               if(!tok.equals("")){
                                                                               if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals("Void")){
                                                                                    RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                               }else{
                                                                                     RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                     error_argumentos_incorrectos(id, "Void",((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                               }} 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments")); RESULT.getArguments().addListNode(a);
                                                                                                    Tipo t = new Producto();
                                                                                                    for(int i=RESULT.getArguments().getListNode().size()-1; i>=0; i--){
                                                                                                        ((Producto)t).addArgumento(RESULT.getArguments().getListNode().get(i).getTipo_tabla());
                                                                                                    }
                                                                                                    Token tok = tds.get_id_ambitos(id, "1", "Principal");
                                                                                                    if(tok!=null){
                                                                                                    if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals(t.toString())){
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                    }else{
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                        error_argumentos_incorrectos(id,t.toString(),((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                                                    }}
                                                                                                    
                                                                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e);  RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =a; RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e); RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_CONDICIONALES ::= EXP oprel espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(opr); RESULT.addNode(e); RESULT.addNode(e2);
                    boolean existen_ids = true;
                                    if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                    if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                        if(e.getTipo_tabla().toString().equals("Integer")){
                            RESULT.setTipo_tabla(new booleant());}
                        else{
                            ///ya tiene tipo void por default 
                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),opr, eleft, eright);
                        }

                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), opr,eleft, eright);
                      }
                    }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_CONDICIONALES ::= EXP asignacion espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition("="); RESULT.addNode(e); RESULT.addNode(e2);
                    boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                     if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                        RESULT.setTipo_tabla(new booleant());
                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), "=",eleft, eright);
                      }

                     }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_CONDICIONALES ::= EXP_CON_IN oplogor INDENTACION2 EXP_CON_IN 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int ololeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int oloright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String olo = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node ec2 = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(olo); RESULT.addNode(ec); RESULT.addNode(ec2);
                        if(ec.getTipo_tabla().toString().equals(ec2.getTipo_tabla().toString())){
                        if(ec.getTipo_tabla().toString().equals("Boolean")){
                            RESULT.setTipo_tabla(new booleant());}
                        else{
                            ///ya tiene tipo void por default 
                            error_tipo_no_numerico_exp(ec.getVal(), ec2.getVal(),olo, ecleft, ecright);
                        }

                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(ec.getVal(), ec2.getVal(), olo,ecleft, ecright);
                      }
                    
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP_CONDICIONALES ::= EXP_CON_IN oplogand INDENTACION2 EXP_CON_IN 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int olaleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int olaright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ola = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node ec2 = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(ola); RESULT.addNode(ec); RESULT.addNode(ec2);
                        if(ec.getTipo_tabla().toString().equals(ec2.getTipo_tabla().toString())){
                        if(ec.getTipo_tabla().toString().equals("Boolean")){
                            RESULT.setTipo_tabla(new booleant());}
                        else{
                            ///ya tiene tipo void por default 
                            error_tipo_no_numerico_exp(ec.getVal(), ec2.getVal(),ola, ecleft, ecright);
                        }

                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(ec.getVal(), ec2.getVal(), ola,ecleft, ecright);
                      }
                    
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis INDENTACION2 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		RESULT = ec; RESULT.setTipo_tabla(ec.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP_CONDICIONALES ::= not espacio abrirparentesis EXP_CONDICIONALES cerrarparentesis INDENTACION2 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		RESULT = new Not("not"); RESULT.addNode(ec); RESULT.setTipo_tabla(ec.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP_CON_IN ::= EXP 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(e.getVal()); boolean existen_ids = true;
                                    if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                                        if(e.getTipo_tabla().toString().equals("Boolean")){
                            RESULT.setTipo_tabla(new booleant());}
                                    }
                                    
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CON_IN",40, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP_CON_IN ::= EXP_CONDICIONALES 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ec;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CON_IN",40, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= EXP opsum INDENTACION2 EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(os); RESULT.addNode(e); RESULT.addNode(e2); 
                                    boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                                    if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),os, eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(),os, eleft, eright);
                                        
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= EXP opmult INDENTACION2 EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(om); RESULT.addNode(e); RESULT.addNode(e2);
                                        boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                                       if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),om, eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(),om, eleft, eright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT =  v; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Not("not"); RESULT.addNode(v); RESULT.setTipo_tabla(v.getTipo_tabla()); 
                                                        if(!(v.getTipo_tabla().toString().equals("Boolean"))){
                                                            error_op_not(v.getVal(),v.getTipo_tabla().toString(), vleft, vright);
                                                        }

                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(id);RESULT.setTypeIdentificador(true);RESULT.setTipo_tabla((tds.get_id_ambitos(id, ambito_actual, "Principal")!=null?tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo():new voidt()));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(tf); RESULT.setTipo_tabla(new booleant()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(n); RESULT.setTipo_tabla(new integert()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(c);  RESULT.setTipo_tabla(new stringt()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORES ::= ELEMENTOS_ESTRUCTUA 
            {
              Exp RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(ee); RESULT.setTipo_tabla((tds.get_id_estructura(ee, ambito_actual)!=null?tds.get_id_estructura(ee, ambito_actual).getTipo():new voidt()));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = e; RESULT.setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT = bllf; RESULT.setTipo_tabla(bllf.getTipo_tabla()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTOS_ESTRUCTUA ::= ELEMENTOS_ESTRUCTUA punto identificador 
            {
              String RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT=ee+"."+id; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTOS_ESTRUCTUA ::= identificador punto identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=""; RESULT+=id+"."+id2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$7 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end NT$7 espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$8 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF Else NT$8 INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$9 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end NT$9 espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$10 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION Else NT$10 INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
                                                                        boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){
                                                                        Token tok = tds.get_id_ambitos(id, ambito_actual, "Principal");
                                                                        if(tok!=null){
                                                                            if(!(tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                            error_asignacion(id,tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), idleft, idright);
                                                                            }
                                                                       }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BLOQUE_ASIGNACION ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
                                                                          boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){     
                                                                     Token tok = tds.get_id_estructura(ee, ambito_actual);
                                                                        if(tok!=null){
                                                                                if(!(tds.get_id_estructura(ee, ambito_actual).getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                            error_asignacion(ee,tds.get_id_estructura(ee, ambito_actual).getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), eeleft, eeright);
                                                                       }}
                                                                        }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
                                                                          boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){         
                                                                         Token tok = tds.get_id_ambitos(id, ambito_actual, "Principal");
                                                                        if(tok!=null){
                                                                                    if((tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                                        if(!(e.getTipo_tabla().toString().equals("Integer"))){
                                                                                            error_asignacion_for( idleft, idright);
                                                                                        }
                                                                                    }else{
                                                                                        error_asignacion(id,tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), idleft, idright);
                                                                                    }}
                                                                           } 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE_ASIGNACION_FOR ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
                                                                                  boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){   
                                                                         Token tok = tds.get_id_estructura(ee, ambito_actual);
                                                                        if(tok!=null){
                                                                                    if((tds.get_id_estructura(ee, ambito_actual).getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                                    if(!(e.getTipo_tabla().toString().equals("Integer"))){
                                                                                            error_asignacion_for( eeleft, eeright);
                                                                                        }
                                                                       }else{
                                                                            error_asignacion(ee,tds.get_id_estructura(ee, ambito_actual).getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), eeleft, eeright);
                                                                       }}}
                                                                                  
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$11 ::= 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!e.getTipo_tabla().toString().equals("Integer")){error_tipo_no_numerico(e.getVal(), eleft, eright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP NT$11 CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Stmt_For) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$12 ::= 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!e.getTipo_tabla().toString().equals("Integer")){error_tipo_no_numerico(e.getVal(), eleft, eright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP NT$12 CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Stmt_For) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$13 ::= 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES NT$13 CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Stmt_While) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$14 ::= 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES NT$14 CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Stmt_While) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Type("type"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(ce); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(dve);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Variable("var"); RESULT.addNode(new Node(id)); RESULT.addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(id)); 
                                        Token tok =  tds.get_id_ambitos(id, ambito_actual, "Principal");
                                        if(tok!=null){
                                        String ti = tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString();
                                        if(ti.equals("String")||
                                           ti.equals("Integer")||
                                           ti.equals("Boolean")){
                                      }else{
                                        error_read(id,ti, idleft, idright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BLOQUE_LECTURA ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(ee));
                                        Token tok = tds.get_id_estructura(ee, ambito_actual);
                                        String ti = tds.get_id_estructura(ee, ambito_actual).getTipo().toString();
                                        if(tok!=null){
                                        
                                        if(ti.equals("String")||
                                           ti.equals("Integer")||
                                           ti.equals("Boolean")){
                                      }else{
                                        error_read(ee,ti, eeleft, eeright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Escritura("write"); RESULT.addNode(e);
                                                    boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){
                                                    if(e.getTipo_tabla().toString().equals("String") ||
                                                       e.getTipo_tabla().toString().equals("Integer") ||
                                                      e.getTipo_tabla().toString().equals("Boolean") ){
                                                    }else{
                                                         error_write(e.getVal(),e.getTipo_tabla().toString(), eleft, eright);
                                                    }
                                                    }
                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Comentario("comment"); RESULT.addNode(new Node(c));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VbasicTiposArbol$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
              return CUP$VbasicTiposArbol$do_action_part00000000(
                               CUP$VbasicTiposArbol$act_num,
                               CUP$VbasicTiposArbol$parser,
                               CUP$VbasicTiposArbol$stack,
                               CUP$VbasicTiposArbol$top);
    }
}

}

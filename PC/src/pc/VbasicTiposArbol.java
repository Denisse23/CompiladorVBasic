
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import pc.tabla.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VbasicTiposArbol extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VbasicTiposArbol() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VbasicTiposArbol(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbasicTiposArbol(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\052\002\000\002\003\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\002\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\015\006\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\007" +
    "\000\002\016\004\000\002\016\005\000\002\016\006\000" +
    "\002\016\006\000\002\016\004\000\002\016\006\000\002" +
    "\017\005\000\002\006\004\000\002\006\002\000\002\005" +
    "\003\000\002\005\003\000\002\007\005\000\002\010\012" +
    "\000\002\010\006\000\002\010\007\000\002\022\003\000" +
    "\002\022\003\000\002\053\002\000\002\013\015\000\002" +
    "\054\002\000\002\013\016\000\002\014\011\000\002\014" +
    "\014\000\002\055\002\000\002\011\022\000\002\056\002" +
    "\000\002\011\021\000\002\057\002\000\002\011\015\000" +
    "\002\060\002\000\002\011\016\000\002\012\005\000\002" +
    "\012\006\000\002\024\003\000\002\024\006\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\025\006" +
    "\000\002\025\006\000\002\025\004\000\002\025\006\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\003\000\002\051\005\000\002\051\005\000\002\027\007" +
    "\000\002\027\007\000\002\027\007\000\002\027\007\000" +
    "\002\027\004\000\002\027\005\000\002\027\006\000\002" +
    "\027\004\000\002\027\006\000\002\030\007\000\002\030" +
    "\007\000\002\030\007\000\002\030\007\000\002\030\004" +
    "\000\002\030\005\000\002\030\006\000\002\030\006\000" +
    "\002\030\004\000\002\030\006\000\002\061\002\000\002" +
    "\020\013\000\002\062\002\000\002\020\016\000\002\063" +
    "\002\000\002\021\014\000\002\064\002\000\002\021\017" +
    "\000\002\031\007\000\002\031\007\000\002\034\007\000" +
    "\002\034\007\000\002\065\002\000\002\032\013\000\002" +
    "\066\002\000\002\033\013\000\002\035\007\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\004" +
    "\000\002\035\005\000\002\035\006\000\002\035\004\000" +
    "\002\035\006\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\036\004\000\002\036" +
    "\005\000\002\036\006\000\002\036\006\000\002\036\004" +
    "\000\002\036\006\000\002\067\002\000\002\037\012\000" +
    "\002\070\002\000\002\040\012\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\041\007\000\002\041" +
    "\004\000\002\041\005\000\002\041\006\000\002\041\004" +
    "\000\002\041\006\000\002\042\007\000\002\042\007\000" +
    "\002\042\007\000\002\042\007\000\002\042\004\000\002" +
    "\042\005\000\002\042\006\000\002\042\006\000\002\042" +
    "\004\000\002\042\006\000\002\043\012\000\002\044\007" +
    "\000\002\044\004\000\002\044\005\000\002\044\004\000" +
    "\002\045\007\000\002\046\013\000\002\046\013\000\002" +
    "\047\010\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\024\003\021\004\004\013\020\015\013\024" +
    "\015\045\010\046\006\047\007\051\023\001\002\000\004" +
    "\045\u01cd\001\002\000\004\002\001\001\002\000\022\003" +
    "\021\004\004\013\020\015\013\024\015\045\010\047\007" +
    "\051\023\001\002\000\074\002\uffd8\003\uffd8\004\uffd8\006" +
    "\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\001" +
    "\002\000\074\002\uffd7\003\uffd7\004\uffd7\006\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\033\uffd7\034\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\012" +
    "\002\uffd9\045\010\046\uffd9\047\007\001\002\000\004\002" +
    "\u01c9\001\002\000\004\045\110\001\002\000\012\002\uffd9" +
    "\045\010\046\uffd9\047\007\001\002\000\004\045\071\001" +
    "\002\000\012\002\uffd9\045\010\046\uffd9\047\007\001\002" +
    "\000\012\002\uffd9\045\010\046\uffd9\047\007\001\002\000" +
    "\004\045\037\001\002\000\006\002\ufff7\046\ufff7\001\002" +
    "\000\026\002\ufff3\003\021\004\004\013\020\015\013\024" +
    "\015\045\010\046\030\047\007\051\023\001\002\000\014" +
    "\002\uff58\045\uff58\046\uff58\047\uff58\051\uff58\001\002\000" +
    "\012\002\uffd9\045\010\046\uffd9\047\007\001\002\000\006" +
    "\002\ufff3\046\030\001\002\000\064\002\uffd9\006\uffd9\011" +
    "\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\060\002\uffda\006" +
    "\uffda\011\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\033" +
    "\uffda\034\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\046\uffda\051\uffda\001\002\000\024\002\ufff4\003\021\004" +
    "\004\013\020\015\013\024\015\045\010\047\007\051\023" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufff5\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\ufffd\001\002" +
    "\000\006\002\ufff3\046\030\001\002\000\004\002\ufff6\001" +
    "\002\000\004\044\040\001\002\000\012\045\010\046\uffd9" +
    "\047\007\051\uffd9\001\002\000\006\046\043\051\023\001" +
    "\002\000\006\046\043\051\023\001\002\000\016\017\uffd9" +
    "\044\uffd9\045\010\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\004\017\045\001\002\000\004\045\046\001\002\000\004" +
    "\013\047\001\002\000\012\002\uff61\045\uff61\046\uff61\047" +
    "\uff61\001\002\000\012\017\uff5f\044\051\046\043\051\023" +
    "\001\002\000\004\045\056\001\002\000\004\017\uff5e\001" +
    "\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\006\046\043\051\023\001\002\000\004\017\uff60\001" +
    "\002\000\004\025\057\001\002\000\004\045\060\001\002" +
    "\000\006\036\062\044\061\001\002\000\016\002\uffd1\016" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\051\uffd1\001\002\000\016" +
    "\002\uffd2\016\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\001" +
    "\002\000\012\045\uff5c\046\uff5c\047\uff5c\051\uff5c\001\002" +
    "\000\004\017\uff5d\001\002\000\006\002\ufff3\046\030\001" +
    "\002\000\004\002\ufffc\001\002\000\006\002\ufff3\046\030" +
    "\001\002\000\004\002\ufff9\001\002\000\004\044\072\001" +
    "\002\000\006\016\075\045\074\001\002\000\014\002\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000\004\025" +
    "\100\001\002\000\004\045\076\001\002\000\004\044\072" +
    "\001\002\000\014\002\uffd4\045\uffd4\046\uffd4\047\uffd4\051" +
    "\uffd4\001\002\000\004\045\101\001\002\000\006\036\062" +
    "\044\061\001\002\000\016\002\uffd3\016\103\045\uffd3\046" +
    "\uffd3\047\uffd3\051\uffd3\001\002\000\004\045\104\001\002" +
    "\000\004\044\072\001\002\000\014\002\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\001\002\000\006\002\ufff3\046\030" +
    "\001\002\000\004\002\ufffb\001\002\000\004\044\111\001" +
    "\002\000\004\005\112\001\002\000\006\006\114\035\113" +
    "\001\002\000\004\045\u01c0\001\002\000\012\045\u01b1\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\004\006\116\001\002" +
    "\000\012\045\120\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\006\046\uffc4\051\uffc4\001\002\000\014\025\121\045\uffd7" +
    "\046\uffd7\047\uffd7\051\uffd7\001\002\000\004\045\122\001" +
    "\002\000\006\036\062\044\061\001\002\000\012\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\006\046\uffca\051" +
    "\uffca\001\002\000\006\046\127\051\023\001\002\000\006" +
    "\046\127\051\023\001\002\000\032\011\uffd9\017\uffd9\024" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\044\uffd9\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\004\017\131\001" +
    "\002\000\004\045\132\001\002\000\004\015\133\001\002" +
    "\000\012\002\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002\000" +
    "\026\011\146\017\uffe1\024\015\027\150\030\143\031\137" +
    "\033\144\044\153\046\127\051\023\001\002\000\006\046" +
    "\127\051\023\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\004\045\u0103\001\002\000\006\046" +
    "\127\051\023\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\006\046\127\051\023\001\002\000" +
    "\004\045\330\001\002\000\004\045\326\001\002\000\012" +
    "\045\010\046\uffd9\047\007\051\uffd9\001\002\000\004\012" +
    "\317\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\004\045\245\001\002\000\012\045\010\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\004\017\uffe0\001\002" +
    "\000\010\005\176\012\175\045\232\001\002\000\012\045" +
    "\010\046\uffd9\047\007\051\uffd9\001\002\000\006\012\156" +
    "\045\157\001\002\000\004\044\227\001\002\000\004\014" +
    "\160\001\002\000\004\045\161\001\002\000\020\005\163" +
    "\011\166\026\164\037\162\044\174\050\165\052\171\001" +
    "\002\000\034\006\uffb6\014\uffb6\016\uffb6\020\uffb6\021\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\051\uffb6\001\002\000\016\005\163\026\164\037\162" +
    "\044\174\050\165\052\171\001\002\000\004\045\222\001" +
    "\002\000\034\006\uffb4\014\uffb4\016\uffb4\020\uffb4\021\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\051\uffb4\001\002\000\004\012\216\001\002\000\036" +
    "\006\uffb3\012\156\014\uffb3\016\uffb3\020\uffb3\021\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\051\uffb3\001\002\000\034\006\uffd9\014\uffd9\016\uffd9\020" +
    "\uffd9\021\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\034\006\uffb5\014" +
    "\uffb5\016\uffb5\020\uffb5\021\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\001\002\000" +
    "\034\006\uffb1\014\uffb1\016\uffb1\020\uffb1\021\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\051" +
    "\uffb1\001\002\000\012\042\202\043\204\046\uff92\051\uff92" +
    "\001\002\000\040\005\176\006\uffb7\012\175\014\uffb7\016" +
    "\uffb7\020\uffb7\021\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\051\uffb7\001\002\000\004\044" +
    "\214\001\002\000\020\005\163\006\177\026\164\037\162" +
    "\044\174\050\165\052\171\001\002\000\034\006\uffc2\014" +
    "\uffc2\016\uffc2\020\uffc2\021\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\001\002\000" +
    "\004\006\213\001\002\000\012\006\uffc0\016\203\042\202" +
    "\043\204\001\002\000\004\045\211\001\002\000\004\045" +
    "\207\001\002\000\004\045\205\001\002\000\016\005\163" +
    "\026\164\037\162\044\174\050\165\052\171\001\002\000" +
    "\030\006\uffba\014\uffba\016\uffba\020\uffba\021\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\204\046\uffba\051\uffba\001\002\000" +
    "\016\005\163\026\164\037\162\044\174\050\165\052\171" +
    "\001\002\000\004\006\uffbf\001\002\000\016\005\163\026" +
    "\164\037\162\044\174\050\165\052\171\001\002\000\030" +
    "\006\uffbb\014\uffbb\016\uffbb\020\uffbb\021\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\204\046\uffbb\051\uffbb\001\002\000\034" +
    "\006\uffc1\014\uffc1\016\uffc1\020\uffc1\021\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1" +
    "\001\002\000\036\006\uffaf\012\uffaf\014\uffaf\016\uffaf\020" +
    "\uffaf\021\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\051\uffaf\001\002\000\030\006\uffb9\014" +
    "\uffb9\016\uffb9\020\uffb9\021\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\046\uffb9\051\uffb9\001\002\000\004\010\217\001" +
    "\002\000\004\005\220\001\002\000\004\006\221\001\002" +
    "\000\012\045\uff5a\046\uff5a\047\uff5a\051\uff5a\001\002\000" +
    "\014\005\163\037\162\044\174\050\165\052\171\001\002" +
    "\000\034\006\uffd9\014\uffd9\016\uffd9\020\uffd9\021\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\030\006\uffb8\014\uffb8\016\uffb8\020" +
    "\uffb8\021\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\046\uffb8" +
    "\051\uffb8\001\002\000\010\006\226\042\202\043\204\001" +
    "\002\000\034\006\uffb2\014\uffb2\016\uffb2\020\uffb2\021\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\051\uffb2\001\002\000\036\006\uffb0\012\uffb0\014\uffb0" +
    "\016\uffb0\020\uffb0\021\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\001\002\000\006" +
    "\046\127\051\023\001\002\000\004\017\uffe4\001\002\000" +
    "\004\014\233\001\002\000\004\045\234\001\002\000\020" +
    "\005\163\011\235\026\164\037\162\044\174\050\165\052" +
    "\171\001\002\000\004\012\237\001\002\000\012\042\202" +
    "\043\204\046\uff93\051\uff93\001\002\000\004\010\240\001" +
    "\002\000\004\005\241\001\002\000\004\006\242\001\002" +
    "\000\012\045\uff5b\046\uff5b\047\uff5b\051\uff5b\001\002\000" +
    "\006\046\127\051\023\001\002\000\004\017\uffe5\001\002" +
    "\000\004\032\246\001\002\000\004\045\247\001\002\000" +
    "\016\005\163\026\164\037\162\044\174\050\165\052\171" +
    "\001\002\000\010\040\260\046\uff76\051\uff76\001\002\000" +
    "\012\014\253\041\252\042\202\043\204\001\002\000\004" +
    "\045\256\001\002\000\004\045\254\001\002\000\016\005" +
    "\163\026\164\037\162\044\174\050\165\052\171\001\002" +
    "\000\016\020\uffbd\040\uffbd\042\202\043\204\046\uffbd\051" +
    "\uffbd\001\002\000\016\005\163\026\164\037\162\044\174" +
    "\050\165\052\171\001\002\000\016\020\uffbe\040\uffbe\042" +
    "\202\043\204\046\uffbe\051\uffbe\001\002\000\004\045\313" +
    "\001\002\000\006\046\262\051\023\001\002\000\026\011" +
    "\uffd9\023\uffd9\030\uffd9\031\uffd9\033\uffd9\044\uffd9\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\006\046\262\051" +
    "\023\001\002\000\004\023\265\001\002\000\012\045\uff75" +
    "\046\uff75\047\uff75\051\uff75\001\002\000\004\023\uff63\001" +
    "\002\000\022\011\146\023\uff67\030\143\031\137\033\144" +
    "\044\153\046\262\051\023\001\002\000\012\045\010\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\006\046\262\051\023" +
    "\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001" +
    "\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\006\046\262\051\023\001\002\000\006\046\262\051" +
    "\023\001\002\000\004\023\uff66\001\002\000\012\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\006\046\262\051" +
    "\023\001\002\000\004\023\uff69\001\002\000\004\023\uff62" +
    "\001\002\000\004\023\uff64\001\002\000\006\046\262\051" +
    "\023\001\002\000\004\023\uff6b\001\002\000\006\046\262" +
    "\051\023\001\002\000\004\023\uff6a\001\002\000\004\023" +
    "\uff65\001\002\000\006\046\262\051\023\001\002\000\004" +
    "\023\uff68\001\002\000\016\005\163\026\164\037\162\044" +
    "\174\050\165\052\171\001\002\000\012\020\uffbc\040\260" +
    "\046\uffbc\051\uffbc\001\002\000\006\046\127\051\023\001" +
    "\002\000\004\017\uffe2\001\002\000\004\007\320\001\002" +
    "\000\004\005\321\001\002\000\016\005\163\026\164\037" +
    "\162\044\174\050\165\052\171\001\002\000\010\006\323" +
    "\042\202\043\204\001\002\000\012\045\uff59\046\uff59\047" +
    "\uff59\051\uff59\001\002\000\006\046\127\051\023\001\002" +
    "\000\004\017\uffe7\001\002\000\016\005\163\026\164\037" +
    "\162\044\174\050\165\052\171\001\002\000\012\042\202" +
    "\043\204\046\uffdb\051\uffdb\001\002\000\016\005\163\026" +
    "\164\037\162\044\174\050\165\052\171\001\002\000\006" +
    "\020\332\040\260\001\002\000\012\045\010\046\uffd9\047" +
    "\007\051\uffd9\001\002\000\006\046\334\051\023\001\002" +
    "\000\030\011\uffd9\017\uffd9\027\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\044\uffd9\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\006\046\334\051\023\001\002\000\006\017\337\034" +
    "\340\001\002\000\004\045\uff97\001\002\000\012\045\uff95" +
    "\046\uff95\047\uff95\051\uff95\001\002\000\012\045\010\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\006\046\334\051\023" +
    "\001\002\000\004\017\344\001\002\000\004\045\345\001" +
    "\002\000\004\030\346\001\002\000\012\045\uff94\046\uff94" +
    "\047\uff94\051\uff94\001\002\000\004\045\350\001\002\000" +
    "\004\030\351\001\002\000\012\045\uff96\046\uff96\047\uff96" +
    "\051\uff96\001\002\000\006\017\uff9d\034\uff9d\001\002\000" +
    "\024\011\146\017\uffa1\027\150\031\137\033\144\034\uffa1" +
    "\044\153\046\334\051\023\001\002\000\012\045\010\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\006\046\334\051\023" +
    "\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001" +
    "\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\006\046\334\051\023\001\002\000\006\046\334\051" +
    "\023\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\017\uffa0\034\uffa0\001\002\000\006\046" +
    "\334\051\023\001\002\000\006\017\uffa3\034\uffa3\001\002" +
    "\000\006\017\uff9c\034\uff9c\001\002\000\006\017\uff9e\034" +
    "\uff9e\001\002\000\006\046\334\051\023\001\002\000\006" +
    "\017\uffa2\034\uffa2\001\002\000\006\046\334\051\023\001" +
    "\002\000\006\017\uffa5\034\uffa5\001\002\000\006\017\uff9f" +
    "\034\uff9f\001\002\000\006\046\334\051\023\001\002\000" +
    "\006\017\uffa4\034\uffa4\001\002\000\004\017\uffdf\001\002" +
    "\000\006\046\127\051\023\001\002\000\004\017\uffe6\001" +
    "\002\000\004\017\uffde\001\002\000\004\044\u0104\001\002" +
    "\000\006\012\175\045\u0128\001\002\000\004\021\u010b\001" +
    "\002\000\006\012\156\045\u0107\001\002\000\004\014\u0108" +
    "\001\002\000\004\045\u0109\001\002\000\016\005\163\026" +
    "\164\037\162\044\174\050\165\052\171\001\002\000\010" +
    "\021\uff90\042\202\043\204\001\002\000\004\045\u010c\001" +
    "\002\000\016\005\163\026\164\037\162\044\174\050\165" +
    "\052\171\001\002\000\012\042\202\043\204\046\uff8d\051" +
    "\uff8d\001\002\000\006\046\u0110\051\023\001\002\000\004" +
    "\022\u0127\001\002\000\026\011\uffd9\022\uffd9\027\uffd9\030" +
    "\uffd9\033\uffd9\044\uffd9\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\046\u0110\051\023\001\002\000\004\022" +
    "\uff7a\001\002\000\022\011\146\022\uff7e\027\150\030\143" +
    "\033\144\044\153\046\u0110\051\023\001\002\000\006\046" +
    "\u0110\051\023\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\012\045\010\046\uffd9\047\007\051" +
    "\uffd9\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\046\u0110\051\023\001\002\000\006\046" +
    "\u0110\051\023\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\004\022\uff7d\001\002\000\006\046" +
    "\u0110\051\023\001\002\000\004\022\uff80\001\002\000\004" +
    "\022\uff79\001\002\000\004\022\uff7b\001\002\000\006\046" +
    "\u0110\051\023\001\002\000\004\022\uff7f\001\002\000\006" +
    "\046\u0110\051\023\001\002\000\004\022\uff82\001\002\000" +
    "\006\046\u0110\051\023\001\002\000\004\022\uff81\001\002" +
    "\000\004\022\uff7c\001\002\000\012\045\uff8c\046\uff8c\047" +
    "\uff8c\051\uff8c\001\002\000\004\014\u0129\001\002\000\004" +
    "\045\u012a\001\002\000\016\005\163\026\164\037\162\044" +
    "\174\050\165\052\171\001\002\000\010\021\uff91\042\202" +
    "\043\204\001\002\000\006\046\127\051\023\001\002\000" +
    "\004\017\uffe3\001\002\000\004\017\uffdc\001\002\000\004" +
    "\017\uffdd\001\002\000\006\046\u0132\051\023\001\002\000" +
    "\006\046\u0132\051\023\001\002\000\030\011\uffd9\017\uffd9" +
    "\024\uffd9\027\uffd9\030\uffd9\031\uffd9\044\uffd9\045\010\046" +
    "\uffd9\047\007\051\uffd9\001\002\000\004\017\u0134\001\002" +
    "\000\004\045\u0135\001\002\000\004\015\u0136\001\002\000" +
    "\012\002\uffc3\045\uffc3\046\uffc3\047\uffc3\001\002\000\024" +
    "\011\146\017\uffec\024\015\027\u0140\030\u013d\031\u013a\044" +
    "\153\046\u0132\051\023\001\002\000\006\046\u0132\051\023" +
    "\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001" +
    "\002\000\004\045\u018f\001\002\000\006\046\u0132\051\023" +
    "\001\002\000\004\017\uffeb\001\002\000\004\045\u016a\001" +
    "\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\004\045\u014a\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\012\045\010\046\uffd9\047\007\051" +
    "\uffd9\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\046\u0132\051\023\001\002\000\004\017" +
    "\uffee\001\002\000\006\046\u0132\051\023\001\002\000\004" +
    "\017\uffed\001\002\000\006\046\u0132\051\023\001\002\000" +
    "\004\017\ufff2\001\002\000\004\032\u014b\001\002\000\004" +
    "\045\u014c\001\002\000\016\005\163\026\164\037\162\044" +
    "\174\050\165\052\171\001\002\000\010\040\260\046\uff78" +
    "\051\uff78\001\002\000\006\046\u0151\051\023\001\002\000" +
    "\004\023\u0165\001\002\000\006\046\u0151\051\023\001\002" +
    "\000\024\011\uffd9\023\uffd9\030\uffd9\031\uffd9\044\uffd9\045" +
    "\010\046\uffd9\047\007\051\uffd9\001\002\000\020\011\146" +
    "\023\uff70\030\u013d\031\u013a\044\153\046\u0151\051\023\001" +
    "\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002" +
    "\000\004\023\uff6f\001\002\000\012\045\010\046\uffd9\047" +
    "\007\051\uffd9\001\002\000\006\046\u0151\051\023\001\002" +
    "\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\006\046\u0151\051\023\001\002\000\012\045\010\046\uffd9" +
    "\047\007\051\uffd9\001\002\000\006\046\u0151\051\023\001" +
    "\002\000\004\023\uff72\001\002\000\004\023\uff6c\001\002" +
    "\000\006\046\u0151\051\023\001\002\000\004\023\uff74\001" +
    "\002\000\004\023\uff6e\001\002\000\006\046\u0151\051\023" +
    "\001\002\000\004\023\uff73\001\002\000\006\046\u0151\051" +
    "\023\001\002\000\004\023\uff71\001\002\000\004\023\uff6d" +
    "\001\002\000\012\045\uff77\046\uff77\047\uff77\051\uff77\001" +
    "\002\000\006\046\u0132\051\023\001\002\000\004\017\uffef" +
    "\001\002\000\006\046\u0132\051\023\001\002\000\004\017" +
    "\ufff0\001\002\000\016\005\163\026\164\037\162\044\174" +
    "\050\165\052\171\001\002\000\006\020\u016c\040\260\001" +
    "\002\000\006\046\u016e\051\023\001\002\000\006\046\u016e" +
    "\051\023\001\002\000\026\011\uffd9\017\uffd9\027\uffd9\031" +
    "\uffd9\034\uffd9\044\uffd9\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\017\u0170\034\u0171\001\002\000\004\045" +
    "\uff9b\001\002\000\012\045\uff99\046\uff99\047\uff99\051\uff99" +
    "\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9\001" +
    "\002\000\006\046\u016e\051\023\001\002\000\004\017\u0175" +
    "\001\002\000\004\045\u0176\001\002\000\004\030\u0177\001" +
    "\002\000\012\045\uff98\046\uff98\047\uff98\051\uff98\001\002" +
    "\000\004\045\u0179\001\002\000\004\030\u017a\001\002\000" +
    "\012\045\uff9a\046\uff9a\047\uff9a\051\uff9a\001\002\000\022" +
    "\011\146\017\uffaa\027\u0140\031\u013a\034\uffaa\044\153\046" +
    "\u016e\051\023\001\002\000\006\017\uffa9\034\uffa9\001\002" +
    "\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\006\046\u016e\051\023\001\002\000\012\045\010\046\uffd9" +
    "\047\007\051\uffd9\001\002\000\012\045\010\046\uffd9\047" +
    "\007\051\uffd9\001\002\000\006\046\u016e\051\023\001\002" +
    "\000\012\045\010\046\uffd9\047\007\051\uffd9\001\002\000" +
    "\006\046\u016e\051\023\001\002\000\006\017\uffac\034\uffac" +
    "\001\002\000\006\017\uffa6\034\uffa6\001\002\000\006\046" +
    "\u016e\051\023\001\002\000\006\017\uffae\034\uffae\001\002" +
    "\000\006\046\u016e\051\023\001\002\000\006\017\uffab\034" +
    "\uffab\001\002\000\006\017\uffa8\034\uffa8\001\002\000\006" +
    "\046\u016e\051\023\001\002\000\006\017\uffad\034\uffad\001" +
    "\002\000\006\017\uffa7\034\uffa7\001\002\000\004\017\uffea" +
    "\001\002\000\004\044\u0104\001\002\000\004\021\u0191\001" +
    "\002\000\004\045\u0192\001\002\000\016\005\163\026\164" +
    "\037\162\044\174\050\165\052\171\001\002\000\012\042" +
    "\202\043\204\046\uff8f\051\uff8f\001\002\000\006\046\u0196" +
    "\051\023\001\002\000\006\046\u0196\051\023\001\002\000" +
    "\024\011\uffd9\022\uffd9\027\uffd9\030\uffd9\044\uffd9\045\010" +
    "\046\uffd9\047\007\051\uffd9\001\002\000\004\022\u0198\001" +
    "\002\000\012\045\uff8e\046\uff8e\047\uff8e\051\uff8e\001\002" +
    "\000\020\011\146\022\uff87\027\u0140\030\u013d\044\153\046" +
    "\u0196\051\023\001\002\000\012\045\010\046\uffd9\047\007" +
    "\051\uffd9\001\002\000\012\045\010\046\uffd9\047\007\051" +
    "\uffd9\001\002\000\004\022\uff86\001\002\000\006\046\u0196" +
    "\051\023\001\002\000\012\045\010\046\uffd9\047\007\051" +
    "\uffd9\001\002\000\006\046\u0196\051\023\001\002\000\012" +
    "\045\010\046\uffd9\047\007\051\uffd9\001\002\000\006\046" +
    "\u0196\051\023\001\002\000\004\022\uff89\001\002\000\004" +
    "\022\uff83\001\002\000\006\046\u0196\051\023\001\002\000" +
    "\004\022\uff8b\001\002\000\004\022\uff85\001\002\000\006" +
    "\046\u0196\051\023\001\002\000\004\022\uff88\001\002\000" +
    "\006\046\u0196\051\023\001\002\000\004\022\uff8a\001\002" +
    "\000\004\022\uff84\001\002\000\006\046\u0132\051\023\001" +
    "\002\000\004\017\ufff1\001\002\000\004\017\uffe8\001\002" +
    "\000\004\017\uffe9\001\002\000\006\046\uffc6\051\uffc6\001" +
    "\002\000\014\025\u01b2\045\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\001\002\000\004\045\u01b3\001\002\000\006\036\062\044" +
    "\061\001\002\000\012\045\010\046\uffd9\047\007\051\uffd9" +
    "\001\002\000\006\046\uffc8\051\uffc8\001\002\000\006\046" +
    "\127\051\023\001\002\000\004\017\u01b8\001\002\000\004" +
    "\045\u01b9\001\002\000\004\015\u01ba\001\002\000\012\002" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000\006\046\u0132" +
    "\051\023\001\002\000\004\017\u01bd\001\002\000\004\045" +
    "\u01be\001\002\000\004\015\u01bf\001\002\000\012\002\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\001\002\000\004\044\u01c1\001" +
    "\002\000\004\045\u01c2\001\002\000\004\025\u01c3\001\002" +
    "\000\004\045\u01c4\001\002\000\004\036\u01c5\001\002\000" +
    "\006\006\uffcc\016\u01c6\001\002\000\004\045\u01c7\001\002" +
    "\000\004\035\113\001\002\000\004\006\uffcb\001\002\000" +
    "\004\002\000\001\002\000\006\002\ufff3\046\030\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\uffff\001\002\000" +
    "\004\044\u01ce\001\002\000\004\005\u01cf\001\002\000\006" +
    "\006\u01d0\035\113\001\002\000\012\045\010\046\uffd9\047" +
    "\007\051\uffd9\001\002\000\004\006\u01d2\001\002\000\012" +
    "\045\010\046\uffd9\047\007\051\uffd9\001\002\000\006\046" +
    "\uffce\051\uffce\001\002\000\006\046\u0132\051\023\001\002" +
    "\000\004\017\u01d6\001\002\000\004\045\u01d7\001\002\000" +
    "\004\004\u01d8\001\002\000\012\002\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\001\002\000\006\046\uffd0\051\uffd0\001\002\000" +
    "\006\046\u0132\051\023\001\002\000\004\017\u01dc\001\002" +
    "\000\004\045\u01dd\001\002\000\004\004\u01de\001\002\000" +
    "\012\002\uffcf\045\uffcf\046\uffcf\047\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01dc\000\022\002\011\003\004\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01cb\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\u01c9\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\025\006\105" +
    "\001\001\000\002\001\001\000\006\005\025\006\066\001" +
    "\001\000\006\005\025\006\064\001\001\000\002\001\001" +
    "\000\004\052\034\001\001\000\022\003\032\004\033\005" +
    "\021\007\015\011\013\013\016\043\023\050\010\001\001" +
    "\000\002\001\001\000\006\005\025\006\024\001\001\000" +
    "\004\004\030\001\001\000\006\005\025\006\026\001\001" +
    "\000\002\001\001\000\020\003\031\005\021\007\015\011" +
    "\013\013\016\043\023\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\025\006\040\001\001\000\006\044\043\050" +
    "\041\001\001\000\006\044\063\050\041\001\001\000\006" +
    "\005\025\006\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\051" +
    "\045\052\050\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\025\006\053\001\001\000\006\044\054" +
    "\050\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\065\001\001\000\002\001\001\000\004\004\067" +
    "\001\001\000\002\001\001\000\004\010\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\104\001\001\000\002\001" +
    "\001\000\004\004\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\114\001\001\000" +
    "\002\001\001\000\006\005\025\006\u01af\001\001\000\002" +
    "\001\001\000\006\005\025\006\116\001\001\000\004\060" +
    "\u012f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\122\001\001\000\006\005\025\006\123\001\001\000" +
    "\004\055\124\001\001\000\006\016\127\050\125\001\001" +
    "\000\006\016\u012e\050\125\001\001\000\006\005\025\006" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\144\012\134\016" +
    "\151\017\141\021\135\031\137\033\140\040\146\046\150" +
    "\047\153\050\125\051\154\001\001\000\006\016\u012d\050" +
    "\125\001\001\000\006\005\025\006\u012b\001\001\000\002" +
    "\001\001\000\006\016\u0101\050\125\001\001\000\006\005" +
    "\025\006\377\001\001\000\006\016\376\050\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\025\006" +
    "\323\001\001\000\002\001\001\000\006\005\025\006\314" +
    "\001\001\000\002\001\001\000\006\005\025\006\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\025" +
    "\006\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\171\023\167" +
    "\025\172\051\166\001\001\000\002\001\001\000\012\012" +
    "\171\023\167\025\224\051\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\025\006\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\171\023\167\024\177\025\200\051\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\171\023\167\025\205\051\166\001\001\000" +
    "\002\001\001\000\014\012\171\023\167\024\207\025\200" +
    "\051\166\001\001\000\002\001\001\000\012\012\171\023" +
    "\167\025\211\051\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\171\023\222\051\166\001\001\000\006\005" +
    "\025\006\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\230\050" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\171\023\167\025\235\051\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\243\050\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\171\023\167\025" +
    "\250\026\247\051\166\001\001\000\004\070\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\171\023\167\025\254\051\166\001\001\000\002" +
    "\001\001\000\012\012\171\023\167\025\256\051\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\263" +
    "\050\262\001\001\000\006\005\025\006\266\001\001\000" +
    "\006\042\265\050\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\274\017\273\021" +
    "\271\031\270\033\267\042\275\046\272\047\276\050\262" +
    "\051\154\001\001\000\006\005\025\006\310\001\001\000" +
    "\006\042\307\050\262\001\001\000\006\005\025\006\305" +
    "\001\001\000\006\005\025\006\303\001\001\000\006\042" +
    "\302\050\262\001\001\000\006\042\301\050\262\001\001" +
    "\000\002\001\001\000\006\005\025\006\277\001\001\000" +
    "\006\042\300\050\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\304\050\262\001" +
    "\001\000\002\001\001\000\006\042\306\050\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\311\050" +
    "\262\001\001\000\002\001\001\000\014\012\171\023\167" +
    "\025\250\026\313\051\166\001\001\000\002\001\001\000" +
    "\006\016\315\050\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\171\023\167\025" +
    "\321\051\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\324\050\125\001\001\000\002\001\001\000" +
    "\012\012\171\023\167\025\326\051\166\001\001\000\002" +
    "\001\001\000\014\012\171\023\167\025\250\026\330\051" +
    "\166\001\001\000\002\001\001\000\006\005\025\006\332" +
    "\001\001\000\006\030\335\050\334\001\001\000\006\005" +
    "\025\006\352\001\001\000\006\030\351\050\334\001\001" +
    "\000\002\001\001\000\004\063\346\001\001\000\004\064" +
    "\340\001\001\000\006\005\025\006\341\001\001\000\006" +
    "\030\342\050\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\360\017\357\030\362\031\354\033\353\040\356" +
    "\046\355\047\361\050\334\051\154\001\001\000\006\005" +
    "\025\006\374\001\001\000\006\030\373\050\334\001\001" +
    "\000\006\005\025\006\371\001\001\000\006\005\025\006" +
    "\367\001\001\000\006\030\366\050\334\001\001\000\006" +
    "\030\365\050\334\001\001\000\006\005\025\006\363\001" +
    "\001\000\002\001\001\000\006\030\364\050\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\370\050\334\001\001\000\002\001\001\000\006" +
    "\030\372\050\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\375\050\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0100\050\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\u0104\051\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\171" +
    "\023\167\025\u0109\051\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\171\023\167\025\u010c\051\166" +
    "\001\001\000\004\066\u010d\001\001\000\006\036\u010e\050" +
    "\u0110\001\001\000\002\001\001\000\006\005\025\006\u0112" +
    "\001\001\000\006\036\u0111\050\u0110\001\001\000\002\001" +
    "\001\000\026\012\u0118\017\u0117\021\u0114\031\u0113\036\u011a" +
    "\040\u0116\046\u0115\047\u0119\050\u0110\051\154\001\001\000" +
    "\006\036\u0125\050\u0110\001\001\000\006\005\025\006\u0123" +
    "\001\001\000\006\005\025\006\u0121\001\001\000\006\005" +
    "\025\006\u011f\001\001\000\006\036\u011e\050\u0110\001\001" +
    "\000\006\036\u011d\050\u0110\001\001\000\006\005\025\006" +
    "\u011b\001\001\000\002\001\001\000\006\036\u011c\050\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\u0120\050\u0110\001\001\000\002\001\001" +
    "\000\006\036\u0122\050\u0110\001\001\000\002\001\001\000" +
    "\006\036\u0124\050\u0110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\171\023\167\025\u012a\051\166\001\001" +
    "\000\002\001\001\000\006\016\u012c\050\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0132\050\u0130\001\001\000\006\015\u01ae\050\u0130\001" +
    "\001\000\006\005\025\006\u0136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\u013e\012\u0137\015\u013b\020\u0138\031\u013a\032\u013d" +
    "\037\u0141\046\u0140\047\u0142\050\u0130\051\154\001\001\000" +
    "\006\015\u01ad\050\u0130\001\001\000\006\005\025\006\u01ab" +
    "\001\001\000\002\001\001\000\006\015\u018d\050\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\025" +
    "\006\u0167\001\001\000\006\005\025\006\u0165\001\001\000" +
    "\002\001\001\000\006\005\025\006\u0147\001\001\000\006" +
    "\005\025\006\u0145\001\001\000\006\005\025\006\u0143\001" +
    "\001\000\006\015\u0144\050\u0130\001\001\000\002\001\001" +
    "\000\006\015\u0146\050\u0130\001\001\000\002\001\001\000" +
    "\006\015\u0148\050\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\171\023\167\025" +
    "\250\026\u014c\051\166\001\001\000\004\067\u014d\001\001" +
    "\000\006\041\u014e\050\u014f\001\001\000\002\001\001\000" +
    "\006\041\u0163\050\u014f\001\001\000\006\005\025\006\u0151" +
    "\001\001\000\024\012\u0157\020\u0154\031\u0155\032\u0152\041" +
    "\u0153\046\u0156\047\u0158\050\u014f\051\154\001\001\000\006" +
    "\005\025\006\u0161\001\001\000\002\001\001\000\006\005" +
    "\025\006\u015f\001\001\000\006\041\u015e\050\u014f\001\001" +
    "\000\006\005\025\006\u015c\001\001\000\006\041\u015b\050" +
    "\u014f\001\001\000\006\005\025\006\u0159\001\001\000\006" +
    "\041\u015a\050\u014f\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u015d\050\u014f\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\u0160\050\u014f\001\001\000" +
    "\002\001\001\000\006\041\u0162\050\u014f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u0166\050\u0130\001\001\000\002\001\001\000\006\015\u0168" +
    "\050\u0130\001\001\000\002\001\001\000\014\012\171\023" +
    "\167\025\250\026\u016a\051\166\001\001\000\002\001\001" +
    "\000\006\027\u016e\050\u016c\001\001\000\006\027\u018c\050" +
    "\u016c\001\001\000\006\005\025\006\u017a\001\001\000\002" +
    "\001\001\000\004\061\u0177\001\001\000\004\062\u0171\001" +
    "\001\000\006\005\025\006\u0172\001\001\000\006\027\u0173" +
    "\050\u016c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\u0180\027\u017b\031" +
    "\u017d\032\u017c\037\u017e\046\u017f\047\u0181\050\u016c\051\154" +
    "\001\001\000\002\001\001\000\006\005\025\006\u018a\001" +
    "\001\000\006\027\u0189\050\u016c\001\001\000\006\005\025" +
    "\006\u0187\001\001\000\006\005\025\006\u0185\001\001\000" +
    "\006\027\u0184\050\u016c\001\001\000\006\005\025\006\u0182" +
    "\001\001\000\006\027\u0183\050\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0186\050\u016c\001\001" +
    "\000\002\001\001\000\006\027\u0188\050\u016c\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\u018b\050\u016c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\u018f\051\u0105\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\171\023\167\025\u0192\051" +
    "\166\001\001\000\004\065\u0193\001\001\000\006\035\u0196" +
    "\050\u0194\001\001\000\006\035\u01aa\050\u0194\001\001\000" +
    "\006\005\025\006\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\u019e\020\u0199\031\u019c\035\u019b\037" +
    "\u019a\046\u019d\047\u019f\050\u0194\051\154\001\001\000\006" +
    "\005\025\006\u01a8\001\001\000\006\005\025\006\u01a6\001" +
    "\001\000\002\001\001\000\006\035\u01a5\050\u0194\001\001" +
    "\000\006\005\025\006\u01a3\001\001\000\006\035\u01a2\050" +
    "\u0194\001\001\000\006\005\025\006\u01a0\001\001\000\006" +
    "\035\u01a1\050\u0194\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u01a4\050\u0194\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\u01a7\050\u0194\001\001\000" +
    "\002\001\001\000\006\035\u01a9\050\u0194\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u01ac\050\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u01ba\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u01b3\001\001\000\006\005\025\006\u01b4" +
    "\001\001\000\004\056\u01b5\001\001\000\006\016\u01b6\050" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u01bb\050\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u01ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u01d0\001\001\000\006\005\025" +
    "\006\u01d8\001\001\000\002\001\001\000\006\005\025\006" +
    "\u01d2\001\001\000\004\054\u01d3\001\001\000\006\015\u01d4" +
    "\050\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\u01d9\001\001" +
    "\000\006\015\u01da\050\u0130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbasicTiposArbol$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbasicTiposArbol$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbasicTiposArbol$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        if (info instanceof String){} else {}
    }
   
    public void report_fatal_error() {
        throw new RuntimeException("Fatal Syntax Error");
    }

    TablasDeSimbolos tds;
    public void setTablasDeSimbolos(TablasDeSimbolos t){
        tds=t;
    }

    public  int errors_count =0;
    public void error_tipos_diferentes_exp(String exp1,String exp2,  String op, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo realizar la operación: "+op+", la expresión: "+exp1+" y la expresión: "+exp2+" son tipos diferentes): Semantic error");
    }

    public void error_tipo_no_numerico_exp(String exp1,String exp2, String op, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo realizar la operación: "+op+", la expresión: "+exp1+" y la expresión: "+exp2+" no son de tipo númerico): Semantic error");
    }
    public void error_argumentos_incorrectos (String id,String argsenviados,String argsesperados, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", se encontraron los argumentos de tipo: "+argsenviados+" en la llamada al procedimiento o función: "+id+", donde se esperaba: "+argsesperados+"): Semantic error");
    }

    public void error_write (String exp,String tipo, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puede imprimir la expresión: "+exp+" que es de tipo: "+tipo+"): Semantic error");
    }

    public void error_read (String id,String tipo, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puede asignar la lectura a la variable: "+id+" de tipo: "+tipo+"): Semantic error");
    }

    public void error_asignacion (String id, String tipoid, String exp, String tipoexp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se pudo asignar a la variable: "+id+" de tipo: "+tipoid+", la expresión: "+exp+" de tipo: "+tipoexp+"): Semantic error");
    }

    public void  error_asignacion_for (int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", la asignación en el for tiene que ser de tipo númerico): Semantic error");
    }

    public void error_tipo_no_numerico(String exp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", expresión: "+exp+" no es de tipo númerico): Semantic error");
    }

    public void error_tipo_no_booleano (String exp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", expresión: "+exp+" no es de tipo booleano): Semantic error");
    }
    public void error_no_main(){
        errors_count++;
        System.err.println("Error (No se encontro el procedimiento main): Semantic error");
    }
    public void error_valor_return (String id, String tipoid, String exp, String tipoexp, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", el tipo de retorno de la función: "+id+" es: "+tipoid+", y la expresión: "+exp+" es de tipo: "+tipoexp+"): Semantic error");
    }

    
    public Programa programaT;
    public String ambito_actual="1";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VbasicTiposArbol$actions {
  private final VbasicTiposArbol parser;

  /** Constructor */
  CUP$VbasicTiposArbol$actions(VbasicTiposArbol parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action_part00000000(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbasicTiposArbol$result;

      /* select the action based on the action number */
      switch (CUP$VbasicTiposArbol$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		programaT = p; if(!tds.hay_main()){ error_no_main();} 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = start_val;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbasicTiposArbol$parser.done_parsing();
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p; programaT = p; if(!tds.hay_main()){ error_no_main();}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=p2; RESULT.addNode(bp); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(be);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addListNode(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Programa RESULT =null;
 parser.report_error("ERROR","SYNTAX"); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA ::= error NT$0 PROGRAMA2 
            {
              Programa RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Programa) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Return("return"); RESULT.addNode(e);
                                            boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){              
                                            String id_funcion = tds.get_id_segun_ambito_hijos(ambito_actual);
                                                if(!id_funcion.equals("")){
                                                if(!((Funcion)tds.getTabla("Principal").get_id(id_funcion).getTipo()).getRetorno().toString().equals(e.getTipo_tabla().toString())){
                                                    error_valor_return(id_funcion, ((Funcion)tds.getTabla("Principal").get_id(id_funcion).getTipo()).getRetorno().toString(), e.getVal(), e.getTipo_tabla().toString(), eleft, eright );
                                                }
                                            }}
                                      
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); Stmt_Variable temp = (Stmt_Variable)RESULT.get(RESULT.size()-2); RESULT.get(RESULT.size()-1).addNode(temp.getTipo()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOS ::= tipovar 
            {
              Node RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(tv);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOS ::= identificador 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(id);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 NT$1 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$2 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 NT$2 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = lp; RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$3 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 NT$3 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-15)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$4 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 NT$4 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-14)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$5 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 NT$5 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters"));  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$6 ::= 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
ambito_actual=(tds.get_ambito_hijos_id(id).equals("")?ambito_actual:tds.get_ambito_hijos_id(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 NT$6 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Stmt_Funcion) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp);  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments"));
                                                                               Token tok = tds.get_id_ambitos(id, "1", "Principal");
                                                                               if(!tok.equals("")){
                                                                               if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals("Void")){
                                                                                    RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                               }else{
                                                                                     RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                     error_argumentos_incorrectos(id, "Void",((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                               }} 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments")); RESULT.getArguments().addListNode(a);
                                                                                                    Tipo t = new Producto();
                                                                                                    for(int i=RESULT.getArguments().getListNode().size()-1; i>=0; i--){
                                                                                                        ((Producto)t).addArgumento(RESULT.getArguments().getListNode().get(i).getTipo_tabla());
                                                                                                    }
                                                                                                    Token tok = tds.get_id_ambitos(id, "1", "Principal");
                                                                                                    if(tok!=null){
                                                                                                    if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals(t.toString())){
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                    }else{
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                        error_argumentos_incorrectos(id,t.toString(),((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                                                    }}
                                                                                                    
                                                                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e);  RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =a; RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e); RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_CONDICIONALES ::= EXP oprel espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(opr); RESULT.addNode(e); RESULT.addNode(e2);
                    boolean existen_ids = true;
                                    if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                    if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                        if(e.getTipo_tabla().toString().equals("Integer")){
                            RESULT.setTipo_tabla(new booleant());}
                        else{
                            ///ya tiene tipo void por default 
                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),opr, eleft, eright);
                        }

                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), opr,eleft, eright);
                      }
                    }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_CONDICIONALES ::= EXP asignacion espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition("="); RESULT.addNode(e); RESULT.addNode(e2);
                    boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                     if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                        RESULT.setTipo_tabla(new booleant());
                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), "=",eleft, eright);
                      }

                     }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP_CONDICIONALES ::= EXP_CONDICIONALES oplog espacio EXP_CONDICIONALES 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec2 = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(ol); RESULT.addNode(ec); RESULT.addNode(ec2);
                        if(ec.getTipo_tabla().toString().equals(ec2.getTipo_tabla().toString())){
                        if(ec.getTipo_tabla().toString().equals("Boolean")){
                            RESULT.setTipo_tabla(new booleant());}
                        else{
                            ///ya tiene tipo void por default 
                            error_tipo_no_numerico_exp(ec.getVal(), ec2.getVal(),ol, ecleft, ecright);
                        }

                     }else{
                        ///ya tiene tipo void por default 
                        error_tipos_diferentes_exp(ec.getVal(), ec2.getVal(), ol,ecleft, ecright);
                      }
                    
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= EXP opsum espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(os); RESULT.addNode(e); RESULT.addNode(e2); 
                                    boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                                    if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),os, eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(),os, eleft, eright);
                                        
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= EXP opmult espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(om); RESULT.addNode(e); RESULT.addNode(e2);
                                        boolean existen_ids = true;
                                     if((e.isTypeIdentificador() && tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null)
                                     || (e2.isTypeIdentificador() &&tds.get_id_ambitos(e2.getVal(), ambito_actual, "Principal")==null )){
                                             existen_ids = false;
                                    }
                                    if(existen_ids){
                                       if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(),om, eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(),om, eleft, eright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT =  v; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Not("not"); RESULT.addNode(v); RESULT.setTipo_tabla(v.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(id);RESULT.setTypeIdentificador(true);RESULT.setTipo_tabla((tds.get_id_ambitos(id, ambito_actual, "Principal")!=null?tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo():new voidt()));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(tf); RESULT.setTipo_tabla(new booleant()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(n); RESULT.setTipo_tabla(new integert()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(c);  RESULT.setTipo_tabla(new stringt()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VALORES ::= ELEMENTOS_ESTRUCTUA 
            {
              Exp RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(ee); RESULT.setTipo_tabla((tds.get_id_estructura(ee, ambito_actual)!=null?tds.get_id_estructura(ee, ambito_actual).getTipo():new voidt()));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = e; RESULT.setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT = bllf; RESULT.setTipo_tabla(bllf.getTipo_tabla()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTOS_ESTRUCTUA ::= ELEMENTOS_ESTRUCTUA punto identificador 
            {
              String RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT=ee+"."+id; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTOS_ESTRUCTUA ::= identificador punto identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=""; RESULT+=id+"."+id2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$7 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end NT$7 espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$8 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF Else NT$8 INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$9 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$9",49, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end NT$9 espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$10 ::= 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$10",50, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION Else NT$10 INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Stmt_If) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
                                                                        boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){
                                                                        Token tok = tds.get_id_ambitos(id, ambito_actual, "Principal");
                                                                        if(tok!=null){
                                                                            if(!(tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                            error_asignacion(id,tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), idleft, idright);
                                                                            }
                                                                       }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUE_ASIGNACION ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
                                                                          boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){     
                                                                     Token tok = tds.get_id_estructura(ee, ambito_actual);
                                                                        if(tok!=null){
                                                                                if(!(tds.get_id_estructura(ee, ambito_actual).getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                            error_asignacion(ee,tds.get_id_estructura(ee, ambito_actual).getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), eeleft, eeright);
                                                                       }}
                                                                        }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
                                                                          boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){         
                                                                         Token tok = tds.get_id_ambitos(id, ambito_actual, "Principal");
                                                                        if(tok!=null){
                                                                                    if((tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                                        if(!(e.getTipo_tabla().toString().equals("Integer"))){
                                                                                            error_asignacion_for( idleft, idright);
                                                                                        }
                                                                                    }else{
                                                                                        error_asignacion(id,tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), idleft, idright);
                                                                                    }}
                                                                           } 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BLOQUE_ASIGNACION_FOR ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
                                                                                  boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){   
                                                                         Token tok = tds.get_id_estructura(ee, ambito_actual);
                                                                        if(tok!=null){
                                                                                    if((tds.get_id_estructura(ee, ambito_actual).getTipo().toString().equals(e.getTipo_tabla().toString()))){
                                                                                    if(!(e.getTipo_tabla().toString().equals("Integer"))){
                                                                                            error_asignacion_for( eeleft, eeright);
                                                                                        }
                                                                       }else{
                                                                            error_asignacion(ee,tds.get_id_estructura(ee, ambito_actual).getTipo().toString(), e.getVal(), e.getTipo_tabla().toString(), eeleft, eeright);
                                                                       }}}
                                                                                  
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$11 ::= 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!e.getTipo_tabla().toString().equals("Integer")){error_tipo_no_numerico(e.getVal(), eleft, eright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$11",51, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP NT$11 CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Stmt_For) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$12 ::= 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!e.getTipo_tabla().toString().equals("Integer")){error_tipo_no_numerico(e.getVal(), eleft, eright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$12",52, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP NT$12 CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Stmt_For) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$13 ::= 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$13",53, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES NT$13 CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Stmt_While) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$14 ::= 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
if(!ec.getTipo_tabla().toString().equals("Boolean")){error_tipo_no_booleano(ec.getVal(), ecleft, ecright);}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$14",54, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES NT$14 CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Stmt_While) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Type("type"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(ce); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(dve);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Variable("var"); RESULT.addNode(new Node(id)); RESULT.addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(id)); 
                                        Token tok =  tds.get_id_ambitos(id, ambito_actual, "Principal");
                                        if(tok!=null){
                                        String ti = tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo().toString();
                                        if(ti.equals("String")||
                                           ti.equals("Integer")||
                                           ti.equals("Boolean")){
                                      }else{
                                        error_read(id,ti, idleft, idright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // BLOQUE_LECTURA ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(ee));
                                        Token tok = tds.get_id_estructura(ee, ambito_actual);
                                        String ti = tds.get_id_estructura(ee, ambito_actual).getTipo().toString();
                                        if(tok!=null){
                                        
                                        if(ti.equals("String")||
                                           ti.equals("Integer")||
                                           ti.equals("Boolean")){
                                      }else{
                                        error_read(ee,ti, eeleft, eeright);
                                      }}
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Escritura("write"); RESULT.addNode(e);
                                                    boolean existen_ids = true;
                                                                if(e.isTypeIdentificador()){
                                                                if(tds.get_id_ambitos(e.getVal(), ambito_actual, "Principal")==null )
                                                                    existen_ids = false;
                                                                    }
                                                                        if(existen_ids){
                                                    if(e.getTipo_tabla().toString().equals("String") ||
                                                       e.getTipo_tabla().toString().equals("Integer") ||
                                                      e.getTipo_tabla().toString().equals("Boolean") ){
                                                    }else{
                                                         error_write(e.getVal(),e.getTipo_tabla().toString(), eleft, eright);
                                                    }
                                                    }
                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Comentario("comment"); RESULT.addNode(new Node(c));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VbasicTiposArbol$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
              return CUP$VbasicTiposArbol$do_action_part00000000(
                               CUP$VbasicTiposArbol$act_num,
                               CUP$VbasicTiposArbol$parser,
                               CUP$VbasicTiposArbol$stack,
                               CUP$VbasicTiposArbol$top);
    }
}

}

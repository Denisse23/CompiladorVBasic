
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import pc.Tipos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class VbasicTiposArbol extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public VbasicTiposArbol() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public VbasicTiposArbol(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public VbasicTiposArbol(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\002\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\015\005\000\002\015\006\000" +
    "\002\015\004\000\002\015\006\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\004\000\002\016\005" +
    "\000\002\016\006\000\002\016\006\000\002\016\004\000" +
    "\002\016\006\000\002\017\005\000\002\006\004\000\002" +
    "\006\002\000\002\005\003\000\002\005\003\000\002\007" +
    "\005\000\002\010\012\000\002\010\006\000\002\010\007" +
    "\000\002\022\003\000\002\022\003\000\002\052\002\000" +
    "\002\013\015\000\002\053\002\000\002\013\016\000\002" +
    "\014\011\000\002\014\014\000\002\011\021\000\002\011" +
    "\020\000\002\011\014\000\002\011\015\000\002\012\005" +
    "\000\002\012\006\000\002\024\003\000\002\024\006\000" +
    "\002\026\006\000\002\026\006\000\002\026\006\000\002" +
    "\025\006\000\002\025\006\000\002\025\004\000\002\025" +
    "\006\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\005\000" +
    "\002\023\003\000\002\051\005\000\002\051\005\000\002" +
    "\027\007\000\002\027\007\000\002\027\007\000\002\027" +
    "\007\000\002\027\004\000\002\027\005\000\002\027\006" +
    "\000\002\027\004\000\002\027\006\000\002\030\007\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\004\000\002\030\005\000\002\030\006\000\002\030" +
    "\006\000\002\030\004\000\002\030\006\000\002\020\012" +
    "\000\002\020\015\000\002\021\013\000\002\021\016\000" +
    "\002\031\007\000\002\031\007\000\002\034\013\000\002" +
    "\034\007\000\002\034\007\000\002\032\012\000\002\033" +
    "\012\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\004\000\002\035\005\000" +
    "\002\035\006\000\002\035\004\000\002\035\006\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\004\000\002\036\005\000\002\036\006" +
    "\000\002\036\006\000\002\036\004\000\002\036\006\000" +
    "\002\037\011\000\002\040\011\000\002\041\007\000\002" +
    "\041\007\000\002\041\007\000\002\041\007\000\002\041" +
    "\004\000\002\041\005\000\002\041\006\000\002\041\004" +
    "\000\002\041\006\000\002\042\007\000\002\042\007\000" +
    "\002\042\007\000\002\042\007\000\002\042\004\000\002" +
    "\042\005\000\002\042\006\000\002\042\006\000\002\042" +
    "\004\000\002\042\006\000\002\043\012\000\002\044\007" +
    "\000\002\044\004\000\002\044\005\000\002\044\004\000" +
    "\002\045\007\000\002\046\013\000\002\046\013\000\002" +
    "\046\007\000\002\047\010\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d7\000\022\004\004\013\020\015\013\024\014\045" +
    "\010\046\006\047\007\051\021\001\002\000\004\045\u01c8" +
    "\001\002\000\004\002\001\001\002\000\020\004\004\013" +
    "\020\015\013\024\014\045\010\047\007\051\021\001\002" +
    "\000\072\002\uffda\004\uffda\006\uffda\011\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\051\uffda\001\002\000\072\002\uffd9\004" +
    "\uffd9\006\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\051" +
    "\uffd9\001\002\000\012\002\uffdb\045\010\046\uffdb\047\007" +
    "\001\002\000\004\002\u01c4\001\002\000\004\045\105\001" +
    "\002\000\004\045\070\001\002\000\012\002\uffdb\045\010" +
    "\046\uffdb\047\007\001\002\000\012\002\uffdb\045\010\046" +
    "\uffdb\047\007\001\002\000\012\002\uffdb\045\010\046\uffdb" +
    "\047\007\001\002\000\004\045\034\001\002\000\014\002" +
    "\uff64\045\uff64\046\uff64\047\uff64\051\uff64\001\002\000\024" +
    "\002\ufff5\004\004\013\020\015\013\024\014\045\010\046" +
    "\027\047\007\051\021\001\002\000\012\002\uffdb\045\010" +
    "\046\uffdb\047\007\001\002\000\006\002\ufff5\046\027\001" +
    "\002\000\064\002\uffdb\006\uffdb\011\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\060\002\uffdc\006\uffdc\011\uffdc\014\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\051\uffdc\001" +
    "\002\000\022\002\ufff6\004\004\013\020\015\013\024\014" +
    "\045\010\047\007\051\021\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufff7\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\ufffd\001\002\000\004\044\035\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\037\051\021\001\002\000\016\017\uffdb\044\uffdb\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046\037" +
    "\051\021\001\002\000\004\017\042\001\002\000\004\045" +
    "\043\001\002\000\004\013\044\001\002\000\012\002\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\001\002\000\004\017\uff6a\001" +
    "\002\000\012\017\uff6c\044\047\046\037\051\021\001\002" +
    "\000\004\045\054\001\002\000\004\017\uff6b\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\037\051\021\001\002\000\004\017\uff6d\001\002\000" +
    "\004\025\055\001\002\000\004\045\056\001\002\000\006" +
    "\036\060\044\057\001\002\000\016\002\uffd3\016\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\051\uffd3\001\002\000\016\002\uffd4" +
    "\016\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002\000" +
    "\012\045\uff69\046\uff69\047\uff69\051\uff69\001\002\000\006" +
    "\002\ufff5\046\027\001\002\000\004\002\ufffc\001\002\000" +
    "\006\002\ufff5\046\027\001\002\000\004\002\ufff9\001\002" +
    "\000\006\002\ufff5\046\027\001\002\000\004\002\ufffb\001" +
    "\002\000\004\044\071\001\002\000\006\016\074\045\073" +
    "\001\002\000\014\002\uffd8\045\uffd8\046\uffd8\047\uffd8\051" +
    "\uffd8\001\002\000\004\025\077\001\002\000\004\045\075" +
    "\001\002\000\004\044\071\001\002\000\014\002\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000\004\045\100" +
    "\001\002\000\006\036\060\044\057\001\002\000\016\002" +
    "\uffd5\016\102\045\uffd5\046\uffd5\047\uffd5\051\uffd5\001\002" +
    "\000\004\045\103\001\002\000\004\044\071\001\002\000" +
    "\014\002\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002" +
    "\000\004\044\106\001\002\000\004\005\107\001\002\000" +
    "\006\006\111\035\110\001\002\000\004\045\u01bb\001\002" +
    "\000\012\045\u01ae\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\004\006\113\001\002\000\012\045\115\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\u0133\051\021\001\002\000" +
    "\014\025\116\045\uffd9\046\uffd9\047\uffd9\051\uffd9\001\002" +
    "\000\004\045\117\001\002\000\006\036\060\044\057\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\006\046\122\051\021\001\002\000\032\011\uffdb\017" +
    "\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\044\uffdb" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\122\051\021\001\002\000\004\017\125\001\002\000\004" +
    "\045\126\001\002\000\004\015\127\001\002\000\012\002" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000\004\017\uffdf" +
    "\001\002\000\026\011\143\017\uffe3\024\014\027\145\030" +
    "\140\031\134\033\141\044\151\046\122\051\021\001\002" +
    "\000\006\046\122\051\021\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\045\u0100\001\002" +
    "\000\006\046\122\051\021\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\122\051\021" +
    "\001\002\000\004\045\327\001\002\000\004\045\325\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\004\012\313\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\004\045\242\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004\017" +
    "\uffe2\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\010\005\173\012\172\045\225\001\002\000" +
    "\006\012\153\045\154\001\002\000\004\044\224\001\002" +
    "\000\004\014\155\001\002\000\004\045\156\001\002\000" +
    "\020\005\160\011\163\026\161\037\157\044\171\050\162" +
    "\052\166\001\002\000\034\006\uffbc\014\uffbc\016\uffbc\020" +
    "\uffbc\021\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\051\uffbc\001\002\000\016\005\160\026" +
    "\161\037\157\044\171\050\162\052\166\001\002\000\004" +
    "\045\217\001\002\000\034\006\uffba\014\uffba\016\uffba\020" +
    "\uffba\021\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba" +
    "\046\uffba\047\uffba\051\uffba\001\002\000\004\012\213\001" +
    "\002\000\036\006\uffb9\012\153\014\uffb9\016\uffb9\020\uffb9" +
    "\021\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\051\uffb9\001\002\000\034\006\uffdb\014\uffdb" +
    "\016\uffdb\020\uffdb\021\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\045\010\046\uffdb\047\007\051\uffdb\001\002\000\034" +
    "\006\uffbb\014\uffbb\016\uffbb\020\uffbb\021\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb" +
    "\001\002\000\034\006\uffb7\014\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\051\uffb7\001\002\000\012\042\177\043\201\046" +
    "\uff9c\051\uff9c\001\002\000\040\005\173\006\uffbd\012\172" +
    "\014\uffbd\016\uffbd\020\uffbd\021\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd\001\002" +
    "\000\004\044\211\001\002\000\020\005\160\006\174\026" +
    "\161\037\157\044\171\050\162\052\166\001\002\000\034" +
    "\006\uffc8\014\uffc8\016\uffc8\020\uffc8\021\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8" +
    "\001\002\000\004\006\210\001\002\000\012\006\uffc6\016" +
    "\200\042\177\043\201\001\002\000\004\045\206\001\002" +
    "\000\004\045\204\001\002\000\004\045\202\001\002\000" +
    "\016\005\160\026\161\037\157\044\171\050\162\052\166" +
    "\001\002\000\030\006\uffc0\014\uffc0\016\uffc0\020\uffc0\021" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\201\046\uffc0\051\uffc0" +
    "\001\002\000\016\005\160\026\161\037\157\044\171\050" +
    "\162\052\166\001\002\000\004\006\uffc5\001\002\000\016" +
    "\005\160\026\161\037\157\044\171\050\162\052\166\001" +
    "\002\000\030\006\uffc1\014\uffc1\016\uffc1\020\uffc1\021\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\201\046\uffc1\051\uffc1\001" +
    "\002\000\034\006\uffc7\014\uffc7\016\uffc7\020\uffc7\021\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\051\uffc7\001\002\000\036\006\uffb5\012\uffb5\014\uffb5" +
    "\016\uffb5\020\uffb5\021\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\001\002\000\030" +
    "\006\uffbf\014\uffbf\016\uffbf\020\uffbf\021\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\046\uffbf\051\uffbf\001\002\000\004" +
    "\010\214\001\002\000\004\005\215\001\002\000\004\006" +
    "\216\001\002\000\012\045\uff67\046\uff67\047\uff67\051\uff67" +
    "\001\002\000\014\005\160\037\157\044\171\050\162\052" +
    "\166\001\002\000\034\006\uffdb\014\uffdb\016\uffdb\020\uffdb" +
    "\021\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\030\006\uffbe\014\uffbe" +
    "\016\uffbe\020\uffbe\021\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\046\uffbe\051\uffbe\001\002\000\010\006\223\042\177" +
    "\043\201\001\002\000\034\006\uffb8\014\uffb8\016\uffb8\020" +
    "\uffb8\021\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\001\002\000\036\006\uffb6\012" +
    "\uffb6\014\uffb6\016\uffb6\020\uffb6\021\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\001" +
    "\002\000\004\014\226\001\002\000\004\045\227\001\002" +
    "\000\020\005\160\011\230\026\161\037\157\044\171\050" +
    "\162\052\166\001\002\000\004\012\232\001\002\000\012" +
    "\042\177\043\201\046\uff9d\051\uff9d\001\002\000\004\010" +
    "\233\001\002\000\004\005\234\001\002\000\004\006\235" +
    "\001\002\000\012\045\uff68\046\uff68\047\uff68\051\uff68\001" +
    "\002\000\006\046\122\051\021\001\002\000\004\017\uffe6" +
    "\001\002\000\006\046\122\051\021\001\002\000\004\017" +
    "\uffe7\001\002\000\004\032\243\001\002\000\004\045\244" +
    "\001\002\000\016\005\160\026\161\037\157\044\171\050" +
    "\162\052\166\001\002\000\010\040\257\046\256\051\021" +
    "\001\002\000\012\014\250\041\247\042\177\043\201\001" +
    "\002\000\004\045\253\001\002\000\004\045\251\001\002" +
    "\000\016\005\160\026\161\037\157\044\171\050\162\052" +
    "\166\001\002\000\016\020\uffc3\040\uffc3\042\177\043\201" +
    "\046\uffc3\051\uffc3\001\002\000\016\005\160\026\161\037" +
    "\157\044\171\050\162\052\166\001\002\000\016\020\uffc4" +
    "\040\uffc4\042\177\043\201\046\uffc4\051\uffc4\001\002\000" +
    "\006\046\256\051\021\001\002\000\026\011\uffdb\023\uffdb" +
    "\030\uffdb\031\uffdb\033\uffdb\044\uffdb\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\004\045\262\001\002\000\004" +
    "\023\261\001\002\000\012\045\uff82\046\uff82\047\uff82\051" +
    "\uff82\001\002\000\016\005\160\026\161\037\157\044\171" +
    "\050\162\052\166\001\002\000\012\020\uffc2\040\257\046" +
    "\uffc2\051\uffc2\001\002\000\022\011\143\023\uff74\030\140" +
    "\031\134\033\141\044\151\046\256\051\021\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\256\051\021\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\256\051\021\001\002\000" +
    "\006\046\256\051\021\001\002\000\004\023\uff73\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\046\256\051\021\001\002\000\004\023\uff76\001\002" +
    "\000\004\023\uff6f\001\002\000\004\023\uff71\001\002\000" +
    "\006\046\256\051\021\001\002\000\004\023\uff78\001\002" +
    "\000\006\046\256\051\021\001\002\000\004\023\uff77\001" +
    "\002\000\004\023\uff72\001\002\000\006\046\256\051\021" +
    "\001\002\000\004\023\uff75\001\002\000\004\023\uff70\001" +
    "\002\000\006\046\122\051\021\001\002\000\004\017\uffe4" +
    "\001\002\000\006\007\314\010\315\001\002\000\004\005" +
    "\320\001\002\000\004\005\316\001\002\000\004\006\317" +
    "\001\002\000\012\045\uff66\046\uff66\047\uff66\051\uff66\001" +
    "\002\000\016\005\160\026\161\037\157\044\171\050\162" +
    "\052\166\001\002\000\010\006\322\042\177\043\201\001" +
    "\002\000\012\045\uff65\046\uff65\047\uff65\051\uff65\001\002" +
    "\000\006\046\122\051\021\001\002\000\004\017\uffe9\001" +
    "\002\000\016\005\160\026\161\037\157\044\171\050\162" +
    "\052\166\001\002\000\012\042\177\043\201\046\uffdd\051" +
    "\uffdd\001\002\000\016\005\160\026\161\037\157\044\171" +
    "\050\162\052\166\001\002\000\006\020\331\040\257\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\006\046\334\051\021\001\002\000\006\046\334\051" +
    "\021\001\002\000\030\011\uffdb\017\uffdb\027\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\044\uffdb\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\017\336\034\337\001\002\000\004" +
    "\045\345\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\046\334\051\021\001\002\000\004" +
    "\017\342\001\002\000\004\045\343\001\002\000\004\030" +
    "\344\001\002\000\012\045\uff9e\046\uff9e\047\uff9e\051\uff9e" +
    "\001\002\000\004\030\346\001\002\000\012\045\uff9f\046" +
    "\uff9f\047\uff9f\051\uff9f\001\002\000\024\011\143\017\uffa7" +
    "\027\145\031\134\033\141\034\uffa7\044\151\046\334\051" +
    "\021\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\334\051\021\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\006\046\334\051" +
    "\021\001\002\000\006\046\334\051\021\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\017" +
    "\uffa6\034\uffa6\001\002\000\006\046\334\051\021\001\002" +
    "\000\006\017\uffa9\034\uffa9\001\002\000\006\017\uffa2\034" +
    "\uffa2\001\002\000\006\017\uffa4\034\uffa4\001\002\000\006" +
    "\046\334\051\021\001\002\000\006\017\uffa8\034\uffa8\001" +
    "\002\000\006\046\334\051\021\001\002\000\006\017\uffab" +
    "\034\uffab\001\002\000\006\017\uffa5\034\uffa5\001\002\000" +
    "\006\046\334\051\021\001\002\000\006\017\uffaa\034\uffaa" +
    "\001\002\000\006\017\uffa3\034\uffa3\001\002\000\004\017" +
    "\uffe1\001\002\000\006\046\122\051\021\001\002\000\004" +
    "\017\uffe8\001\002\000\004\017\uffe0\001\002\000\004\044" +
    "\u0101\001\002\000\006\012\172\045\u0124\001\002\000\004" +
    "\021\u0108\001\002\000\006\012\153\045\u0104\001\002\000" +
    "\004\014\u0105\001\002\000\004\045\u0106\001\002\000\016" +
    "\005\160\026\161\037\157\044\171\050\162\052\166\001" +
    "\002\000\010\021\uff99\042\177\043\201\001\002\000\004" +
    "\045\u0109\001\002\000\016\005\160\026\161\037\157\044" +
    "\171\050\162\052\166\001\002\000\012\042\177\043\201" +
    "\046\u010d\051\021\001\002\000\004\022\u0123\001\002\000" +
    "\006\046\u010d\051\021\001\002\000\026\011\uffdb\022\uffdb" +
    "\027\uffdb\030\uffdb\033\uffdb\044\uffdb\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\022\011\143\022\uff89\027\145" +
    "\030\140\033\141\044\151\046\u010d\051\021\001\002\000" +
    "\006\046\u010d\051\021\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\u010d\051\021\001\002\000" +
    "\006\046\u010d\051\021\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\004\022\uff88\001\002\000" +
    "\006\046\u010d\051\021\001\002\000\004\022\uff8b\001\002" +
    "\000\004\022\uff84\001\002\000\004\022\uff86\001\002\000" +
    "\006\046\u010d\051\021\001\002\000\004\022\uff8a\001\002" +
    "\000\006\046\u010d\051\021\001\002\000\004\022\uff8c\001" +
    "\002\000\006\046\u010d\051\021\001\002\000\004\022\uff8d" +
    "\001\002\000\004\022\uff87\001\002\000\004\022\uff85\001" +
    "\002\000\012\045\uff97\046\uff97\047\uff97\051\uff97\001\002" +
    "\000\006\014\u0126\025\u0125\001\002\000\004\045\u0129\001" +
    "\002\000\004\045\u0127\001\002\000\016\005\160\026\161" +
    "\037\157\044\171\050\162\052\166\001\002\000\010\021" +
    "\uff9a\042\177\043\201\001\002\000\006\036\060\044\057" +
    "\001\002\000\004\045\u012b\001\002\000\004\014\u012c\001" +
    "\002\000\004\045\u012d\001\002\000\016\005\160\026\161" +
    "\037\157\044\171\050\162\052\166\001\002\000\010\021" +
    "\uff9b\042\177\043\201\001\002\000\006\046\122\051\021" +
    "\001\002\000\004\017\uffe5\001\002\000\004\017\uffde\001" +
    "\002\000\006\046\u0133\051\021\001\002\000\030\011\uffdb" +
    "\017\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\044\uffdb\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\017\u0135" +
    "\001\002\000\004\045\u0136\001\002\000\004\015\u0137\001" +
    "\002\000\012\002\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002" +
    "\000\024\011\143\017\uffee\024\014\027\u0141\030\u013e\031" +
    "\u013b\044\151\046\u0133\051\021\001\002\000\006\046\u0133" +
    "\051\021\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\004\045\u018d\001\002\000\006\046\u0133" +
    "\051\021\001\002\000\004\017\uffed\001\002\000\004\045" +
    "\u016a\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\004\045\u014b\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\u0133\051\021\001\002\000" +
    "\004\017\ufff0\001\002\000\006\046\u0133\051\021\001\002" +
    "\000\004\017\uffef\001\002\000\006\046\u0133\051\021\001" +
    "\002\000\004\017\ufff4\001\002\000\004\032\u014c\001\002" +
    "\000\004\045\u014d\001\002\000\016\005\160\026\161\037" +
    "\157\044\171\050\162\052\166\001\002\000\010\040\257" +
    "\046\u0150\051\021\001\002\000\004\023\u0165\001\002\000" +
    "\024\011\uffdb\023\uffdb\030\uffdb\031\uffdb\044\uffdb\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u0150\051" +
    "\021\001\002\000\004\023\uff7a\001\002\000\020\011\143" +
    "\023\uff7d\030\u013e\031\u013b\044\151\046\u0150\051\021\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\004\023\uff7c\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\u0150\051\021\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\046\u0150\051\021\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\006\046\u0150\051\021\001" +
    "\002\000\004\023\uff7f\001\002\000\004\023\uff79\001\002" +
    "\000\006\046\u0150\051\021\001\002\000\004\023\uff81\001" +
    "\002\000\004\023\uff7b\001\002\000\006\046\u0150\051\021" +
    "\001\002\000\004\023\uff80\001\002\000\006\046\u0150\051" +
    "\021\001\002\000\004\023\uff7e\001\002\000\012\045\uff83" +
    "\046\uff83\047\uff83\051\uff83\001\002\000\006\046\u0133\051" +
    "\021\001\002\000\004\017\ufff1\001\002\000\006\046\u0133" +
    "\051\021\001\002\000\004\017\ufff2\001\002\000\016\005" +
    "\160\026\161\037\157\044\171\050\162\052\166\001\002" +
    "\000\006\020\u016c\040\257\001\002\000\006\046\u016e\051" +
    "\021\001\002\000\006\046\u016e\051\021\001\002\000\026" +
    "\011\uffdb\017\uffdb\027\uffdb\031\uffdb\034\uffdb\044\uffdb\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\017\u0170" +
    "\034\u0171\001\002\000\004\045\u0177\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046\u016e" +
    "\051\021\001\002\000\004\017\u0174\001\002\000\004\045" +
    "\u0175\001\002\000\004\030\u0176\001\002\000\012\045\uffa0" +
    "\046\uffa0\047\uffa0\051\uffa0\001\002\000\004\030\u0178\001" +
    "\002\000\012\045\uffa1\046\uffa1\047\uffa1\051\uffa1\001\002" +
    "\000\022\011\143\017\uffb0\027\u0141\031\u013b\034\uffb0\044" +
    "\151\046\u016e\051\021\001\002\000\006\017\uffaf\034\uffaf" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u016e\051\021\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\u016e\051\021" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u016e\051\021\001\002\000\006\017\uffb2" +
    "\034\uffb2\001\002\000\006\017\uffac\034\uffac\001\002\000" +
    "\006\046\u016e\051\021\001\002\000\006\017\uffb4\034\uffb4" +
    "\001\002\000\006\046\u016e\051\021\001\002\000\006\017" +
    "\uffb1\034\uffb1\001\002\000\006\017\uffae\034\uffae\001\002" +
    "\000\006\046\u016e\051\021\001\002\000\006\017\uffb3\034" +
    "\uffb3\001\002\000\006\017\uffad\034\uffad\001\002\000\004" +
    "\017\uffec\001\002\000\004\044\u0101\001\002\000\004\021" +
    "\u018f\001\002\000\004\045\u0190\001\002\000\016\005\160" +
    "\026\161\037\157\044\171\050\162\052\166\001\002\000" +
    "\012\042\177\043\201\046\u0193\051\021\001\002\000\006" +
    "\046\u0193\051\021\001\002\000\024\011\uffdb\022\uffdb\027" +
    "\uffdb\030\uffdb\044\uffdb\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\004\022\u0195\001\002\000\012\045\uff98\046" +
    "\uff98\047\uff98\051\uff98\001\002\000\020\011\143\022\uff92" +
    "\027\u0141\030\u013e\044\151\046\u0193\051\021\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\u0193\051\021\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\004\022\uff91\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u0193\051\021\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\u0193\051\021\001\002\000" +
    "\004\022\uff94\001\002\000\004\022\uff8e\001\002\000\006" +
    "\046\u0193\051\021\001\002\000\004\022\uff96\001\002\000" +
    "\006\046\u0193\051\021\001\002\000\004\022\uff93\001\002" +
    "\000\004\022\uff90\001\002\000\006\046\u0193\051\021\001" +
    "\002\000\004\022\uff95\001\002\000\004\022\uff8f\001\002" +
    "\000\006\046\u0133\051\021\001\002\000\004\017\ufff3\001" +
    "\002\000\004\017\uffea\001\002\000\004\017\uffeb\001\002" +
    "\000\006\046\u0133\051\021\001\002\000\014\025\u01af\045" +
    "\uffd9\046\uffd9\047\uffd9\051\uffd9\001\002\000\004\045\u01b0" +
    "\001\002\000\006\036\060\044\057\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046\122" +
    "\051\021\001\002\000\004\017\u01b4\001\002\000\004\045" +
    "\u01b5\001\002\000\004\015\u01b6\001\002\000\012\002\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\001\002\000\004\017\u01b8\001" +
    "\002\000\004\045\u01b9\001\002\000\004\015\u01ba\001\002" +
    "\000\012\002\uffca\045\uffca\046\uffca\047\uffca\001\002\000" +
    "\004\044\u01bc\001\002\000\004\045\u01bd\001\002\000\004" +
    "\025\u01be\001\002\000\004\045\u01bf\001\002\000\004\036" +
    "\u01c0\001\002\000\006\006\uffce\016\u01c1\001\002\000\004" +
    "\045\u01c2\001\002\000\004\035\110\001\002\000\004\006" +
    "\uffcd\001\002\000\004\002\000\001\002\000\006\002\ufff5" +
    "\046\027\001\002\000\004\002\ufff8\001\002\000\004\002" +
    "\uffff\001\002\000\004\044\u01c9\001\002\000\004\005\u01ca" +
    "\001\002\000\006\006\u01cb\035\110\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\006\u01cd" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\uffd0\051\uffd0\001\002\000\006\046\u0133" +
    "\051\021\001\002\000\004\017\u01d1\001\002\000\004\045" +
    "\u01d2\001\002\000\004\004\u01d3\001\002\000\012\002\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\001\002\000\006\046\uffd2\051" +
    "\uffd2\001\002\000\006\046\u0133\051\021\001\002\000\004" +
    "\017\u01d7\001\002\000\004\045\u01d8\001\002\000\004\004" +
    "\u01d9\001\002\000\012\002\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d7\000\022\002\011\003\004\005\021\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01c6\005\021\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\065\001\001\000\006\005\024\006\063\001" +
    "\001\000\006\005\024\006\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\031\004\032\005\021\007" +
    "\015\011\014\013\016\043\022\050\010\001\001\000\006" +
    "\005\024\006\023\001\001\000\004\004\027\001\001\000" +
    "\006\005\024\006\025\001\001\000\002\001\001\000\020" +
    "\003\030\005\021\007\015\011\014\013\016\043\022\050" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\024\006\035\001\001\000\006\044\040\050\037\001\001" +
    "\000\006\005\024\006\045\001\001\000\006\044\044\050" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\047\045\050\050\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\051\001\001\000\006\044" +
    "\052\050\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\062" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\004\004\066\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\111\001\001\000\002\001\001" +
    "\000\006\005\024\006\u01ac\001\001\000\002\001\001\000" +
    "\006\005\024\006\113\001\001\000\006\015\u0133\050\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\117\001\001\000\006\005\024\006\120\001\001\000\006" +
    "\016\123\050\122\001\001\000\006\005\024\006\130\001" +
    "\001\000\006\016\127\050\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\141\012\131\016\146\017\136" +
    "\021\132\031\134\033\135\040\143\046\145\047\147\050" +
    "\122\051\151\001\001\000\006\016\u0130\050\122\001\001" +
    "\000\006\005\024\006\u012e\001\001\000\002\001\001\000" +
    "\006\016\376\050\122\001\001\000\006\005\024\006\374" +
    "\001\001\000\006\016\373\050\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\024\006\322\001\001" +
    "\000\002\001\001\000\006\005\024\006\310\001\001\000" +
    "\002\001\001\000\006\005\024\006\237\001\001\000\002" +
    "\001\001\000\006\005\024\006\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\166\023\164\025\167\051" +
    "\163\001\001\000\002\001\001\000\012\012\166\023\164" +
    "\025\221\051\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\024" +
    "\006\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\166\023\164\024\174\025\175\051\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\166\023\164\025\202\051\163\001\001\000\002\001\001" +
    "\000\014\012\166\023\164\024\204\025\175\051\163\001" +
    "\001\000\002\001\001\000\012\012\166\023\164\025\206" +
    "\051\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\166\023\217\051\163\001\001\000\006\005\024\006\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\166\023\164\025\230\051\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\236\050\122\001\001\000\002\001\001\000\006\016\240" +
    "\050\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\166\023\164\025\245\026\244" +
    "\051\163\001\001\000\006\042\257\050\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\166\023\164\025\251\051\163\001\001\000\002\001" +
    "\001\000\012\012\166\023\164\025\253\051\163\001\001" +
    "\000\002\001\001\000\006\042\307\050\254\001\001\000" +
    "\006\005\024\006\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\166\023\164\025" +
    "\245\026\262\051\163\001\001\000\002\001\001\000\026" +
    "\012\271\017\270\021\266\031\265\033\264\042\272\046" +
    "\267\047\273\050\254\051\151\001\001\000\006\005\024" +
    "\006\305\001\001\000\006\042\304\050\254\001\001\000" +
    "\006\005\024\006\302\001\001\000\006\005\024\006\300" +
    "\001\001\000\006\042\277\050\254\001\001\000\006\042" +
    "\276\050\254\001\001\000\002\001\001\000\006\005\024" +
    "\006\274\001\001\000\006\042\275\050\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\301\050\254\001\001\000\002\001\001\000\006\042" +
    "\303\050\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\042\306\050\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\311\050\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\166" +
    "\023\164\025\320\051\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\323\050\122\001\001\000\002" +
    "\001\001\000\012\012\166\023\164\025\325\051\163\001" +
    "\001\000\002\001\001\000\014\012\166\023\164\025\245" +
    "\026\327\051\163\001\001\000\002\001\001\000\006\005" +
    "\024\006\331\001\001\000\006\030\334\050\332\001\001" +
    "\000\006\030\372\050\332\001\001\000\006\005\024\006" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\337\001\001\000\006\030\340\050\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\354\017\353\030\356\031\350\033\347\040\352" +
    "\046\351\047\355\050\332\051\151\001\001\000\006\005" +
    "\024\006\370\001\001\000\006\030\367\050\332\001\001" +
    "\000\006\005\024\006\365\001\001\000\006\005\024\006" +
    "\363\001\001\000\006\030\362\050\332\001\001\000\006" +
    "\030\361\050\332\001\001\000\006\005\024\006\357\001" +
    "\001\000\002\001\001\000\006\030\360\050\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\364\050\332\001\001\000\002\001\001\000\006" +
    "\030\366\050\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\371\050\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\375\050" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0101\051\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\166\023\164\025\u0106\051\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\166\023\164" +
    "\025\u0109\051\163\001\001\000\006\036\u010a\050\u010b\001" +
    "\001\000\002\001\001\000\006\036\u0121\050\u010b\001\001" +
    "\000\006\005\024\006\u010d\001\001\000\026\012\u0113\017" +
    "\u0112\021\u0110\031\u010e\036\u0115\040\u0111\046\u010f\047\u0114" +
    "\050\u010b\051\151\001\001\000\006\036\u0120\050\u010b\001" +
    "\001\000\006\005\024\006\u011e\001\001\000\006\005\024" +
    "\006\u011c\001\001\000\006\005\024\006\u011a\001\001\000" +
    "\006\036\u0119\050\u010b\001\001\000\006\036\u0118\050\u010b" +
    "\001\001\000\006\005\024\006\u0116\001\001\000\002\001" +
    "\001\000\006\036\u0117\050\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\u011b\050" +
    "\u010b\001\001\000\002\001\001\000\006\036\u011d\050\u010b" +
    "\001\001\000\002\001\001\000\006\036\u011f\050\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\166\023\164\025\u0127\051\163" +
    "\001\001\000\002\001\001\000\004\022\u0129\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\166\023\164\025\u012d\051\163\001\001\000\002\001" +
    "\001\000\006\016\u012f\050\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u01ab\050\u0131\001\001\000" +
    "\006\005\024\006\u0137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\u013f\012\u0138\015\u013c\020\u0139\031\u013b\032\u013e\037\u0142" +
    "\046\u0141\047\u0143\050\u0131\051\151\001\001\000\006\015" +
    "\u01aa\050\u0131\001\001\000\006\005\024\006\u01a8\001\001" +
    "\000\002\001\001\000\006\015\u018b\050\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\024\006\u0167" +
    "\001\001\000\006\005\024\006\u0165\001\001\000\002\001" +
    "\001\000\006\005\024\006\u0148\001\001\000\006\005\024" +
    "\006\u0146\001\001\000\006\005\024\006\u0144\001\001\000" +
    "\006\015\u0145\050\u0131\001\001\000\002\001\001\000\006" +
    "\015\u0147\050\u0131\001\001\000\002\001\001\000\006\015" +
    "\u0149\050\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\166\023\164\025\245\026" +
    "\u014d\051\163\001\001\000\006\041\u014e\050\u0150\001\001" +
    "\000\002\001\001\000\006\005\024\006\u0152\001\001\000" +
    "\006\041\u0151\050\u0150\001\001\000\002\001\001\000\024" +
    "\012\u0158\020\u0155\031\u0156\032\u0153\041\u0154\046\u0157\047" +
    "\u0159\050\u0150\051\151\001\001\000\006\005\024\006\u0162" +
    "\001\001\000\002\001\001\000\006\005\024\006\u0160\001" +
    "\001\000\006\041\u015f\050\u0150\001\001\000\006\005\024" +
    "\006\u015d\001\001\000\006\041\u015c\050\u0150\001\001\000" +
    "\006\005\024\006\u015a\001\001\000\006\041\u015b\050\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\u015e\050\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\u0161\050\u0150\001\001\000\002\001\001\000" +
    "\006\041\u0163\050\u0150\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0166\050\u0131\001\001\000\002\001" +
    "\001\000\006\015\u0168\050\u0131\001\001\000\002\001\001" +
    "\000\014\012\166\023\164\025\245\026\u016a\051\163\001" +
    "\001\000\002\001\001\000\006\027\u016e\050\u016c\001\001" +
    "\000\006\027\u018a\050\u016c\001\001\000\006\005\024\006" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\u0171\001\001\000\006\027\u0172\050\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\u017e\027\u0179\031\u017b\032\u017a\037\u017c\046\u017d" +
    "\047\u017f\050\u016c\051\151\001\001\000\002\001\001\000" +
    "\006\005\024\006\u0188\001\001\000\006\027\u0187\050\u016c" +
    "\001\001\000\006\005\024\006\u0185\001\001\000\006\005" +
    "\024\006\u0183\001\001\000\006\027\u0182\050\u016c\001\001" +
    "\000\006\005\024\006\u0180\001\001\000\006\027\u0181\050" +
    "\u016c\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u0184\050\u016c\001\001\000\002\001\001\000\006\027" +
    "\u0186\050\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\u0189\050\u016c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\u018d\051\u0102" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\166\023\164\025\u0190\051\163\001\001\000\006\035\u0193" +
    "\050\u0191\001\001\000\006\035\u01a7\050\u0191\001\001\000" +
    "\006\005\024\006\u0195\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\u019b\020\u0196\031\u0197\035\u0199\037" +
    "\u0198\046\u019a\047\u019c\050\u0191\051\151\001\001\000\006" +
    "\005\024\006\u01a5\001\001\000\006\035\u01a4\050\u0191\001" +
    "\001\000\006\005\024\006\u01a2\001\001\000\002\001\001" +
    "\000\006\005\024\006\u01a0\001\001\000\006\035\u019f\050" +
    "\u0191\001\001\000\006\005\024\006\u019d\001\001\000\006" +
    "\035\u019e\050\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u01a1\050\u0191\001\001\000\002\001\001" +
    "\000\006\035\u01a3\050\u0191\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\u01a6\050\u0191\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u01a9\050\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01b6\050\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u01b0\001\001\000\006\005\024" +
    "\006\u01b1\001\001\000\006\016\u01b2\050\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u01c2\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u01cb\001\001\000\006\005" +
    "\024\006\u01d3\001\001\000\002\001\001\000\006\005\024" +
    "\006\u01cd\001\001\000\004\053\u01ce\001\001\000\006\015" +
    "\u01cf\050\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\u01d4\001" +
    "\001\000\006\015\u01d5\050\u0131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$VbasicTiposArbol$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$VbasicTiposArbol$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$VbasicTiposArbol$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    TablasDeSimbolos tds;
    public void setTablasDeSimbolos(TablasDeSimbolos t){
        tds=t;
    }

    public  int errors_count =0;
    public void error_tipos_diferentes_exp(String exp1,String exp2,  int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puedo realizar la operación, la expresión: "+exp1+" y la expresión: "+exp2+" son tipos diferentes): Semantic error");
    }

    public void error_tipo_no_numerico_exp(String exp1,String exp2,  int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", no se puedo realizar la operación, la expresión: "+exp1+" y la expresión: "+exp2+" no son de tipo númerico): Semantic error");
    }
    public void error_argumentos_incorrectos (String id,String argsenviados,String argsesperados, int line, int column){
        errors_count++;
        System.err.println("Error (line: "+line+", column: "+column+", se encontraron los argumentos de tipo: "+argsenviados+" en la llamada al procedimiento o función: "+id+", donde se esperaba: "+argsesperados+"): Semantic error");
    }
    public Programa programaT;
    public String ambito_actual="1";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$VbasicTiposArbol$actions {
  private final VbasicTiposArbol parser;

  /** Constructor */
  CUP$VbasicTiposArbol$actions(VbasicTiposArbol parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action_part00000000(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$VbasicTiposArbol$result;

      /* select the action based on the action number */
      switch (CUP$VbasicTiposArbol$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		programaT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = start_val;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$VbasicTiposArbol$parser.done_parsing();
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p; programaT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Programa RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Procedimiento bp = (Stmt_Procedimiento)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=p2; RESULT.addNode(bp); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Funcion bf = (Stmt_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Type be = (Stmt_Type)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(be);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addListNode(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p2 = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p2; RESULT.addNode(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = p;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= newline 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= 
            {
              Programa RESULT =null;
		RESULT = new Programa("Programa");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cs; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_SUB 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cs; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> dv = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.addAll(dv); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Stmt_Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Return("return"); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> dv2 = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = dv2; RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); Stmt_Variable temp = (Stmt_Variable)RESULT.get(RESULT.size()-2); RESULT.get(RESULT.size()-1).addNode(temp.getTipo()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              ArrayList<Node> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Variable("var")); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= tipovar 
            {
              Node RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(tv);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= identificador 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Node(id);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$0 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
ambito_actual=tds.get_ambito_hijos_id(id);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 NT$0 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Stmt_Procedimiento RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
ambito_actual=tds.get_ambito_hijos_id(id);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 NT$1 CONTENIDO_SUB end espacio sub 
            {
              Stmt_Procedimiento RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Stmt_Procedimiento) ((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Procedimiento("sub"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio tipovar coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<Node> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = lp; RESULT.add(new Stmt_Parametro("parameter")); RESULT.get(RESULT.size()-1).addNode(new Node(tp)); RESULT.get(RESULT.size()-1).addNode(new Node(id)); RESULT.get(RESULT.size()-1).addNode(new Node(t));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-12)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-14)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.addNode(t); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-13)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters"));  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Stmt_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		ArrayList<Node> lp = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cs = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Funcion("function"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("parameters")); RESULT.getParameters().setNodes(lp);  RESULT.addNode(new Node("void")); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(cs);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments"));
                                                                               if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals("Void")){
                                                                                    RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                               }else{
                                                                                     RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                     error_argumentos_incorrectos(id, "Void",((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                               } 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Stmt_Llamada_Funcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Llamada_Funcion("call"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("arguments")); RESULT.getArguments().addListNode(a);
                                                                                                    Tipo t = new Producto();
                                                                                                    for(int i=RESULT.getArguments().getListNode().size()-1; i>=0; i--){
                                                                                                        ((Producto)t).addArgumento(RESULT.getArguments().getListNode().get(i).getTipo_tabla());
                                                                                                    }
                                                                                                    if(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno().equals(t.toString())){
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                    }else{
                                                                                                        RESULT.setTipo_tabla(((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).getRetorno());
                                                                                                        error_argumentos_incorrectos(id,t.toString(),((Funcion)tds.get_id_ambitos(id, "1", "Principal").getTipo()).toStringSinRetorno() , idleft, idright);
                                                                                                    }
                                                                                                    
                                                                                            
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGUMENTOS ::= EXP 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e);  RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              ArrayList<Node> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> a = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =a; RESULT.add(new Stmt_Argumento("argument")); RESULT.get(RESULT.size()-1).addNode(e); RESULT.get(RESULT.size()-1).setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",18, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP_CONDICIONALES ::= EXP oprel espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(opr); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_CONDICIONALES ::= EXP asignacion espacio EXP 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition("="); RESULT.addNode(e); RESULT.addNode(e2);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_CONDICIONALES ::= EXP_CONDICIONALES oplog espacio EXP_CONDICIONALES 
            {
              Condition RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int ec2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ec2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Condition ec2 = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Condition(ol); RESULT.addNode(ec); RESULT.addNode(ec2);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= EXP opsum espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(os); RESULT.addNode(e); RESULT.addNode(e2); 

                                    if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(), eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), eleft, eright);
                                      }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= EXP opmult espacio EXP 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(om); RESULT.addNode(e); RESULT.addNode(e2);
                                       if(e.getTipo_tabla().toString().equals(e2.getTipo_tabla().toString())){
                                        if(e.getTipo_tabla().toString().equals("Integer")){
                                            RESULT.setTipo_tabla(e.getTipo_tabla());}
                                        else{
                                            RESULT.setTipo_tabla(e.getTipo_tabla());
                                            error_tipo_no_numerico_exp(e.getVal(), e2.getVal(), eleft, eright);
                                        }
                                      }else{
                                        RESULT.setTipo_tabla(e.getTipo_tabla());
                                        error_tipos_diferentes_exp(e.getVal(), e2.getVal(), eleft, eright);
                                      }
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT =  v; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Not("not"); RESULT.addNode(v); RESULT.setTipo_tabla(v.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= identificador 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(id);RESULT.setTipo_tabla(tds.get_id_ambitos(id, ambito_actual, "Principal").getTipo());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= truefalse 
            {
              Exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(tf); RESULT.setTipo_tabla(new booleant()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= numero 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(n); RESULT.setTipo_tabla(new integert()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= cadena 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(c);  RESULT.setTipo_tabla(new stringt()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= ELEMENTOS_ESTRUCTUA 
            {
              Exp RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Exp(ee); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = e; RESULT.setTipo_tabla(e.getTipo_tabla());
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Exp RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT = bllf; RESULT.setTipo_tabla(bllf.getTipo_tabla()); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTOS_ESTRUCTUA ::= ELEMENTOS_ESTRUCTUA punto identificador 
            {
              String RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		 RESULT=ee+"."+id;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTOS_ESTRUCTUA ::= identificador punto identificador 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT=""; RESULT+=id+"."+id2;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ESTRUCTUA",39, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",21, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_IF_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =ci; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",22, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES then CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-10)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body"));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Stmt_If RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-9)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		ArrayList<Node> ci = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> cie = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_If("If"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(ci); RESULT.addNode(new Node("else-body")); RESULT.getElseBody().addListNode(cie);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-11)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BLOQUE_ASIGNACION ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BLOQUE_ASIGNACION_FOR ::= identificador espacio as espacio TIPOS espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT= new Stmt_Asignacion_For("="); RESULT.addNode(new Stmt_Variable("var")); RESULT.getIdentificadorOVar().addNode(new Node(id)); RESULT.getIdentificadorOVar().addNode(t); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BLOQUE_ASIGNACION_FOR ::= identificador espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(id)); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BLOQUE_ASIGNACION_FOR ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio EXP 
            {
              Stmt_Asignacion_For RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Asignacion_For("="); RESULT.addNode(new Node(ee)); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION_FOR",26, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BLOQUE_FOR ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",24, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BLOQUE_FOR_FUNCTION ::= For espacio BLOQUE_ASIGNACION_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Stmt_For RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		Stmt_Asignacion_For ba = (Stmt_Asignacion_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_For("for"); RESULT.addNode(ba);  RESULT.addNode(e);RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",25, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bi);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_While bw = (Stmt_While)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cf = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cf; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES CONTENIDO_WHILE_FUNCTION loop 
            {
              Stmt_While RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Condition ec = (Condition)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT= new Stmt_While("while"); RESULT.addNode(ec); RESULT.addNode(new Node("body")); RESULT.getBody().addListNode(cw); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-6)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Lectura bl = (Stmt_Lectura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bl); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_If bi = (Stmt_If)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bi); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Escritura be = (Stmt_Escritura)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(be); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_For bf = (Stmt_For)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bf); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Asignacion ba = (Stmt_Asignacion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Return br = (Stmt_Return)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(br);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LLAMADAS_FUNCIONES CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<Node> RESULT =null;
		int bllfleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bllfright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Llamada_Funcion bllf = (Stmt_Llamada_Funcion)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> cw = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT =cw; RESULT.add(bllf);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Stmt_Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-3)).value;
		RESULT = new Stmt_Type("type"); RESULT.addNode(new Node(id)); RESULT.addNode(new Node("body")); RESULT.getBody().setNodes(ce); 
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-7)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).right;
		Stmt_Variable dve = (Stmt_Variable)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(dve);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              ArrayList<Node> RESULT =null;
		RESULT = new ArrayList();
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce;
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-2)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              ArrayList<Node> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Stmt_Comentario bc = (Stmt_Comentario)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		ArrayList<Node> ce = (ArrayList<Node>)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = ce; RESULT.add(bc);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Stmt_Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		Node t = (Node)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Variable("as"); RESULT.addNode(new Node(id)); RESULT.addNode(t);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BLOQUE_LECTURA ::= identificador espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(id));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // BLOQUE_LECTURA ::= ELEMENTOS_ESTRUCTUA espacio asignacion espacio console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).right;
		String ee = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)).value;
		RESULT = new Stmt_Lectura("read"); RESULT.addNode(new Node(ee));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-8)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Stmt_Lectura RESULT =null;
		RESULT = new Stmt_Lectura("read");
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-4)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis EXP cerrarparentesis 
            {
              Stmt_Escritura RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-1)).value;
		RESULT = new Stmt_Escritura("write"); RESULT.addNode(e);
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.elementAt(CUP$VbasicTiposArbol$top-5)), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Stmt_Comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$VbasicTiposArbol$stack.peek()).value;
		RESULT = new Stmt_Comentario("comment"); RESULT.addNode(new Node(c));
              CUP$VbasicTiposArbol$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$VbasicTiposArbol$stack.peek()), RESULT);
            }
          return CUP$VbasicTiposArbol$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$VbasicTiposArbol$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$VbasicTiposArbol$do_action(
    int                        CUP$VbasicTiposArbol$act_num,
    java_cup.runtime.lr_parser CUP$VbasicTiposArbol$parser,
    java.util.Stack            CUP$VbasicTiposArbol$stack,
    int                        CUP$VbasicTiposArbol$top)
    throws java.lang.Exception
    {
              return CUP$VbasicTiposArbol$do_action_part00000000(
                               CUP$VbasicTiposArbol$act_num,
                               CUP$VbasicTiposArbol$parser,
                               CUP$VbasicTiposArbol$stack,
                               CUP$VbasicTiposArbol$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\247\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\052\002\000\002\003\005\000\002" +
    "\004\004\000\002\004\003\000\002\004\002\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\004\000" +
    "\002\015\005\000\002\015\006\000\002\015\004\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\004" +
    "\000\002\016\005\000\002\016\006\000\002\016\006\000" +
    "\002\016\004\000\002\017\005\000\002\006\004\000\002" +
    "\006\002\000\002\005\003\000\002\005\003\000\002\007" +
    "\005\000\002\010\012\000\002\010\006\000\002\010\007" +
    "\000\002\022\003\000\002\022\003\000\002\013\014\000" +
    "\002\013\015\000\002\014\011\000\002\014\014\000\002" +
    "\011\021\000\002\011\020\000\002\011\014\000\002\011" +
    "\015\000\002\012\005\000\002\012\006\000\002\025\003" +
    "\000\002\025\006\000\002\026\006\000\002\026\006\000" +
    "\002\026\004\000\002\037\006\000\002\037\006\000\002" +
    "\037\004\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\030\007\000\002\030\007\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\004\000\002\030\005\000\002\030\006\000\002\030" +
    "\004\000\002\031\007\000\002\031\007\000\002\031\007" +
    "\000\002\031\007\000\002\031\007\000\002\031\004\000" +
    "\002\031\005\000\002\031\006\000\002\031\006\000\002" +
    "\031\004\000\002\020\013\000\002\020\016\000\002\021" +
    "\014\000\002\021\017\000\002\027\007\000\002\027\007" +
    "\000\002\027\011\000\002\027\011\000\002\027\013\000" +
    "\002\027\011\000\002\027\011\000\002\027\013\000\002" +
    "\027\013\000\002\027\015\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\032\007\000" +
    "\002\032\011\000\002\033\016\000\002\033\022\000\002" +
    "\034\016\000\002\034\022\000\002\035\007\000\002\035" +
    "\007\000\002\035\007\000\002\035\007\000\002\035\007" +
    "\000\002\035\004\000\002\035\005\000\002\035\006\000" +
    "\002\035\004\000\002\036\007\000\002\036\007\000\002" +
    "\036\007\000\002\036\007\000\002\036\007\000\002\036" +
    "\004\000\002\036\005\000\002\036\006\000\002\036\006" +
    "\000\002\036\004\000\002\040\012\000\002\041\012\000" +
    "\002\042\007\000\002\042\007\000\002\042\007\000\002" +
    "\042\007\000\002\042\007\000\002\042\004\000\002\042" +
    "\005\000\002\042\006\000\002\042\004\000\002\043\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\043\007\000\002\043\004\000\002\043\005\000\002" +
    "\043\006\000\002\043\006\000\002\043\004\000\002\044" +
    "\012\000\002\045\007\000\002\045\004\000\002\045\005" +
    "\000\002\045\004\000\002\046\007\000\002\047\007\000" +
    "\002\050\010\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\024\003\021\004\004\013\020\015\013\024" +
    "\014\045\010\046\006\047\007\051\023\001\002\000\004" +
    "\045\u01f7\001\002\000\004\002\001\001\002\000\022\003" +
    "\021\004\004\013\020\015\013\024\014\045\010\047\007" +
    "\051\023\001\002\000\062\002\uffda\003\uffda\004\uffda\006" +
    "\uffda\011\uffda\013\uffda\015\uffda\016\uffda\017\uffda\022\uffda" +
    "\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\051\uffda\001\002\000\062\002\uffd9\003\uffd9\004\uffd9\006" +
    "\uffd9\011\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\001\002\000\012\002\uffdb\045\010\046\uffdb\047" +
    "\007\001\002\000\004\002\u01f3\001\002\000\004\045\110" +
    "\001\002\000\004\045\073\001\002\000\012\002\uffdb\045" +
    "\010\046\uffdb\047\007\001\002\000\012\002\uffdb\045\010" +
    "\046\uffdb\047\007\001\002\000\012\002\uffdb\045\010\046" +
    "\uffdb\047\007\001\002\000\004\045\037\001\002\000\006" +
    "\002\ufff7\046\ufff7\001\002\000\026\002\ufff3\003\021\004" +
    "\004\013\020\015\013\024\014\045\010\046\030\047\007" +
    "\051\023\001\002\000\014\002\uff5b\045\uff5b\046\uff5b\047" +
    "\uff5b\051\uff5b\001\002\000\012\002\uffdb\045\010\046\uffdb" +
    "\047\007\001\002\000\006\002\ufff3\046\030\001\002\000" +
    "\052\002\uffdb\006\uffdb\011\uffdb\016\uffdb\017\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\046\002\uffdc\006\uffdc\011\uffdc\016" +
    "\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\034\uffdc\042\uffdc\043\uffdc\044\uffdc\046" +
    "\uffdc\051\uffdc\001\002\000\024\002\ufff4\003\021\004\004" +
    "\013\020\015\013\024\014\045\010\047\007\051\023\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufff5\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\ufffd\001\002\000" +
    "\006\002\ufff3\046\030\001\002\000\004\002\ufff6\001\002" +
    "\000\004\044\040\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\042\051\023\001\002" +
    "\000\016\017\uffdb\044\uffdb\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\006\046\042\051\023\001\002\000\004" +
    "\017\045\001\002\000\004\045\046\001\002\000\004\013" +
    "\047\001\002\000\012\002\uff63\045\uff63\046\uff63\047\uff63" +
    "\001\002\000\004\017\uff5f\001\002\000\012\017\uff61\044" +
    "\052\046\042\051\023\001\002\000\004\045\057\001\002" +
    "\000\004\017\uff60\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\042\051\023\001\002" +
    "\000\004\017\uff62\001\002\000\004\025\060\001\002\000" +
    "\004\045\061\001\002\000\006\036\063\044\062\001\002" +
    "\000\020\002\uffd3\006\uffd3\016\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\051\uffd3\001\002\000\020\002\uffd4\006\uffd4\016\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\001\002\000\012\045" +
    "\uff5e\046\uff5e\047\uff5e\051\uff5e\001\002\000\006\002\ufff3" +
    "\046\030\001\002\000\004\002\ufffc\001\002\000\006\002" +
    "\ufff3\046\030\001\002\000\004\002\ufff9\001\002\000\006" +
    "\002\ufff3\046\030\001\002\000\004\002\ufffb\001\002\000" +
    "\004\044\074\001\002\000\006\016\077\045\076\001\002" +
    "\000\014\002\uffd8\045\uffd8\046\uffd8\047\uffd8\051\uffd8\001" +
    "\002\000\004\025\102\001\002\000\004\045\100\001\002" +
    "\000\004\044\074\001\002\000\014\002\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\051\uffd6\001\002\000\004\045\103\001\002" +
    "\000\006\036\063\044\062\001\002\000\016\002\uffd5\016" +
    "\105\045\uffd5\046\uffd5\047\uffd5\051\uffd5\001\002\000\004" +
    "\045\106\001\002\000\004\044\074\001\002\000\014\002" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\004" +
    "\044\111\001\002\000\004\005\112\001\002\000\006\006" +
    "\114\035\113\001\002\000\004\045\u01ea\001\002\000\012" +
    "\045\u01dd\046\uffdb\047\007\051\uffdb\001\002\000\004\006" +
    "\116\001\002\000\012\045\120\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\u014f\051\023\001\002\000\014\025" +
    "\121\045\uffd9\046\uffd9\047\uffd9\051\uffd9\001\002\000\004" +
    "\045\122\001\002\000\006\036\063\044\062\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\126\051\023\001\002\000\006\046\126\051\023\001" +
    "\002\000\032\011\uffdb\017\uffdb\024\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\033\uffdb\044\uffdb\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\004\017\130\001\002\000\004\045\131" +
    "\001\002\000\004\015\132\001\002\000\012\002\uffce\045" +
    "\uffce\046\uffce\047\uffce\001\002\000\026\011\144\017\uffe2" +
    "\024\014\027\146\030\141\031\135\033\142\044\151\046" +
    "\126\051\023\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\004\045\u0114\001\002\000\006\046" +
    "\126\051\023\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\126\051\023\001\002\000" +
    "\004\045\351\001\002\000\004\045\347\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004\012" +
    "\335\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\004\045\223\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\017\uffe1\001\002" +
    "\000\006\012\155\045\156\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\126\051\023" +
    "\001\002\000\004\017\uffe5\001\002\000\004\044\214\001" +
    "\002\000\004\014\157\001\002\000\004\045\160\001\002" +
    "\000\014\005\167\037\165\044\164\050\162\052\161\001" +
    "\002\000\022\006\uffbe\016\uffbe\042\uffbe\043\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\051\uffbe\001\002\000\022\006\uffbd\016" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd" +
    "\001\002\000\022\006\uffdb\016\uffdb\042\uffdb\043\uffdb\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\026\005\202" +
    "\006\uffc0\012\201\016\uffc0\042\uffc0\043\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\051\uffc0\001\002\000\022\006\uffbf\016\uffbf" +
    "\042\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\001" +
    "\002\000\012\042\173\043\174\046\uff91\051\uff91\001\002" +
    "\000\014\005\167\037\165\044\164\050\162\052\161\001" +
    "\002\000\022\006\uffba\016\uffba\042\uffba\043\uffba\045\uffba" +
    "\046\uffba\047\uffba\051\uffba\001\002\000\010\006\172\042" +
    "\173\043\174\001\002\000\022\006\uffbb\016\uffbb\042\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\001\002\000" +
    "\004\045\177\001\002\000\004\045\175\001\002\000\014" +
    "\005\167\037\165\044\164\050\162\052\161\001\002\000" +
    "\016\006\uffc5\016\uffc5\042\173\043\174\046\uffc5\051\uffc5" +
    "\001\002\000\014\005\167\037\165\044\164\050\162\052" +
    "\161\001\002\000\016\006\uffc6\016\uffc6\042\173\043\174" +
    "\046\uffc6\051\uffc6\001\002\000\004\044\212\001\002\000" +
    "\016\005\167\006\203\037\165\044\164\050\162\052\161" +
    "\001\002\000\024\006\uffca\016\uffca\040\uffca\042\uffca\043" +
    "\uffca\045\uffca\046\uffca\047\uffca\051\uffca\001\002\000\004" +
    "\006\211\001\002\000\012\006\uffc8\016\206\042\173\043" +
    "\174\001\002\000\004\045\207\001\002\000\014\005\167" +
    "\037\165\044\164\050\162\052\161\001\002\000\004\006" +
    "\uffc7\001\002\000\024\006\uffc9\016\uffc9\040\uffc9\042\uffc9" +
    "\043\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\001\002\000" +
    "\022\006\uffbc\016\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\051\uffbc\001\002\000\016\006\uffc4\016\uffc4\042" +
    "\uffc4\043\uffc4\046\uffc4\051\uffc4\001\002\000\004\045\215" +
    "\001\002\000\004\014\216\001\002\000\004\045\217\001" +
    "\002\000\014\005\167\037\165\044\164\050\162\052\161" +
    "\001\002\000\012\042\173\043\174\046\uff90\051\uff90\001" +
    "\002\000\006\046\126\051\023\001\002\000\004\017\uffe6" +
    "\001\002\000\004\032\224\001\002\000\004\045\225\001" +
    "\002\000\016\005\226\026\231\037\227\044\236\050\233" +
    "\052\234\001\002\000\016\005\226\026\231\037\227\044" +
    "\236\050\233\052\234\001\002\000\016\006\uff97\040\uff97" +
    "\045\uff97\046\uff97\047\uff97\051\uff97\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\045\261" +
    "\001\002\000\004\045\241\001\002\000\016\006\uff95\040" +
    "\uff95\045\uff95\046\uff95\047\uff95\051\uff95\001\002\000\016" +
    "\006\uff96\040\uff96\045\uff96\046\uff96\047\uff96\051\uff96\001" +
    "\002\000\016\006\uff92\040\uff92\045\uff92\046\uff92\047\uff92" +
    "\051\uff92\001\002\000\022\005\202\006\uff98\012\237\040" +
    "\uff98\045\uff98\046\uff98\047\uff98\051\uff98\001\002\000\004" +
    "\044\240\001\002\000\016\006\uff94\040\uff94\045\uff94\046" +
    "\uff94\047\uff94\051\uff94\001\002\000\006\014\243\041\242" +
    "\001\002\000\004\045\250\001\002\000\004\045\244\001" +
    "\002\000\014\005\226\037\227\044\236\050\233\052\234" +
    "\001\002\000\016\006\uffa1\040\246\045\uffa1\046\uffa1\047" +
    "\uffa1\051\uffa1\001\002\000\016\005\226\026\231\037\227" +
    "\044\236\050\233\052\234\001\002\000\014\006\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\051\uff9c\001\002\000\016\005\226" +
    "\026\252\037\227\044\236\050\233\052\234\001\002\000" +
    "\016\006\uffa2\040\257\045\uffa2\046\uffa2\047\uffa2\051\uffa2" +
    "\001\002\000\004\045\253\001\002\000\014\005\226\037" +
    "\227\044\236\050\233\052\234\001\002\000\016\006\uff9f" +
    "\040\255\045\uff9f\046\uff9f\047\uff9f\051\uff9f\001\002\000" +
    "\016\005\226\026\231\037\227\044\236\050\233\052\234" +
    "\001\002\000\014\006\uff9a\045\uff9a\046\uff9a\047\uff9a\051" +
    "\uff9a\001\002\000\016\005\226\026\231\037\227\044\236" +
    "\050\233\052\234\001\002\000\014\006\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\051\uff9d\001\002\000\014\005\226\037\227" +
    "\044\236\050\233\052\234\001\002\000\004\045\263\001" +
    "\002\000\004\041\264\001\002\000\004\045\265\001\002" +
    "\000\016\005\226\026\267\037\227\044\236\050\233\052" +
    "\234\001\002\000\016\006\uffa0\040\274\045\uffa0\046\uffa0" +
    "\047\uffa0\051\uffa0\001\002\000\004\045\270\001\002\000" +
    "\014\005\226\037\227\044\236\050\233\052\234\001\002" +
    "\000\016\006\uff9e\040\272\045\uff9e\046\uff9e\047\uff9e\051" +
    "\uff9e\001\002\000\016\005\226\026\231\037\227\044\236" +
    "\050\233\052\234\001\002\000\014\006\uff99\045\uff99\046" +
    "\uff99\047\uff99\051\uff99\001\002\000\016\005\226\026\231" +
    "\037\227\044\236\050\233\052\234\001\002\000\014\006" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\001\002\000\006" +
    "\046\300\051\023\001\002\000\006\046\300\051\023\001" +
    "\002\000\030\011\uffdb\023\uffdb\024\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\044\uffdb\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\004\023\302\001\002\000\012\045\uff77\046\uff77" +
    "\047\uff77\051\uff77\001\002\000\024\011\144\023\uff68\024" +
    "\014\030\141\031\135\033\142\044\151\046\300\051\023" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\300\051\023\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\006\046\300\051\023\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\004\023\uff67\001\002\000\006\046\300\051\023\001" +
    "\002\000\004\023\uff6a\001\002\000\004\023\uff65\001\002" +
    "\000\006\046\300\051\023\001\002\000\004\023\uff6b\001" +
    "\002\000\006\046\300\051\023\001\002\000\004\023\uff6c" +
    "\001\002\000\006\046\300\051\023\001\002\000\004\023" +
    "\uff6d\001\002\000\004\023\uff66\001\002\000\006\046\300" +
    "\051\023\001\002\000\004\023\uff69\001\002\000\004\023" +
    "\uff64\001\002\000\004\006\332\001\002\000\016\006\uff93" +
    "\040\uff93\045\uff93\046\uff93\047\uff93\051\uff93\001\002\000" +
    "\006\046\126\051\023\001\002\000\004\017\uffe3\001\002" +
    "\000\006\007\336\010\337\001\002\000\004\005\342\001" +
    "\002\000\004\005\340\001\002\000\004\006\341\001\002" +
    "\000\012\045\uff5d\046\uff5d\047\uff5d\051\uff5d\001\002\000" +
    "\014\005\167\037\165\044\164\050\162\052\161\001\002" +
    "\000\004\006\344\001\002\000\012\045\uff5c\046\uff5c\047" +
    "\uff5c\051\uff5c\001\002\000\006\046\126\051\023\001\002" +
    "\000\004\017\uffe8\001\002\000\014\005\167\037\165\044" +
    "\164\050\162\052\161\001\002\000\012\042\173\043\174" +
    "\046\uffdd\051\uffdd\001\002\000\016\005\226\026\231\037" +
    "\227\044\236\050\233\052\234\001\002\000\004\045\353" +
    "\001\002\000\004\020\354\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\357\051\023" +
    "\001\002\000\006\046\357\051\023\001\002\000\032\011" +
    "\uffdb\017\uffdb\024\uffdb\027\uffdb\031\uffdb\033\uffdb\034\uffdb" +
    "\044\uffdb\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\017\361\034\362\001\002\000\004\045\370\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\046\357\051\023\001\002\000\004\017\365\001\002" +
    "\000\004\045\366\001\002\000\004\030\367\001\002\000" +
    "\012\045\uffa3\046\uffa3\047\uffa3\051\uffa3\001\002\000\004" +
    "\030\371\001\002\000\012\045\uffa4\046\uffa4\047\uffa4\051" +
    "\uffa4\001\002\000\026\011\144\017\uffab\024\014\027\146" +
    "\031\135\033\142\034\uffab\044\151\046\357\051\023\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\006\046\357\051\023\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\357\051\023\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\017\uffaa\034\uffaa\001\002\000\006\046\357\051\023" +
    "\001\002\000\006\017\uffad\034\uffad\001\002\000\006\017" +
    "\uffa8\034\uffa8\001\002\000\006\046\357\051\023\001\002" +
    "\000\006\017\uffae\034\uffae\001\002\000\006\046\357\051" +
    "\023\001\002\000\006\017\uffac\034\uffac\001\002\000\006" +
    "\046\357\051\023\001\002\000\006\017\uffb0\034\uffb0\001" +
    "\002\000\006\017\uffa9\034\uffa9\001\002\000\006\046\357" +
    "\051\023\001\002\000\006\017\uffaf\034\uffaf\001\002\000" +
    "\006\017\uffa7\034\uffa7\001\002\000\004\017\uffe0\001\002" +
    "\000\006\046\126\051\023\001\002\000\004\017\uffe7\001" +
    "\002\000\004\017\uffdf\001\002\000\004\044\u0115\001\002" +
    "\000\004\045\u0116\001\002\000\006\014\u0118\025\u0117\001" +
    "\002\000\004\045\u0140\001\002\000\004\045\u0119\001\002" +
    "\000\014\005\167\037\165\044\164\050\162\052\161\001" +
    "\002\000\004\045\u013f\001\002\000\010\021\u011e\042\u011c" +
    "\043\u011d\001\002\000\004\045\u013d\001\002\000\004\045" +
    "\u013b\001\002\000\004\045\u011f\001\002\000\014\005\167" +
    "\037\165\044\164\050\162\052\161\001\002\000\012\042" +
    "\173\043\174\046\u0123\051\023\001\002\000\006\046\u0123" +
    "\051\023\001\002\000\004\022\u0139\001\002\000\030\011" +
    "\uffdb\022\uffdb\024\uffdb\027\uffdb\030\uffdb\033\uffdb\044\uffdb" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\024\011" +
    "\144\022\uff7d\024\014\027\146\030\141\033\142\044\151" +
    "\046\u0123\051\023\001\002\000\006\046\u0123\051\023\001" +
    "\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u0123\051\023\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\004\022\uff7c\001\002\000\006\046" +
    "\u0123\051\023\001\002\000\004\022\uff7f\001\002\000\004" +
    "\022\uff7a\001\002\000\006\046\u0123\051\023\001\002\000" +
    "\004\022\uff80\001\002\000\006\046\u0123\051\023\001\002" +
    "\000\004\022\uff7e\001\002\000\006\046\u0123\051\023\001" +
    "\002\000\004\022\uff82\001\002\000\006\046\u0123\051\023" +
    "\001\002\000\004\022\uff81\001\002\000\004\022\uff7b\001" +
    "\002\000\012\045\uff8d\046\uff8d\047\uff8d\051\uff8d\001\002" +
    "\000\004\022\uff79\001\002\000\014\005\167\037\165\044" +
    "\164\050\162\052\161\001\002\000\010\021\uffc2\042\u011c" +
    "\043\u011d\001\002\000\014\005\167\037\165\044\164\050" +
    "\162\052\161\001\002\000\010\021\uffc3\042\u011c\043\u011d" +
    "\001\002\000\010\021\uffc1\042\uffc1\043\uffc1\001\002\000" +
    "\006\036\063\044\062\001\002\000\004\045\u0142\001\002" +
    "\000\004\014\u0143\001\002\000\004\045\u0144\001\002\000" +
    "\014\005\167\037\165\044\164\050\162\052\161\001\002" +
    "\000\010\021\u0146\042\u011c\043\u011d\001\002\000\004\045" +
    "\u0147\001\002\000\014\005\167\037\165\044\164\050\162" +
    "\052\161\001\002\000\012\042\173\043\174\046\u0123\051" +
    "\023\001\002\000\004\022\u014a\001\002\000\012\045\uff8c" +
    "\046\uff8c\047\uff8c\051\uff8c\001\002\000\006\046\126\051" +
    "\023\001\002\000\004\017\uffe4\001\002\000\004\017\uffde" +
    "\001\002\000\006\046\u014f\051\023\001\002\000\030\011" +
    "\uffdb\017\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\044\uffdb" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004\017" +
    "\u0151\001\002\000\004\045\u0152\001\002\000\004\015\u0153" +
    "\001\002\000\012\002\uffcb\045\uffcb\046\uffcb\047\uffcb\001" +
    "\002\000\024\011\144\017\uffec\024\014\027\u015b\030\u0156" +
    "\031\u015d\044\151\046\u014f\051\023\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\004\045\u01b5" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u014f\051\023\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\045\u0191\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\004\045\u0162\001\002\000\004\017\uffeb\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006\046" +
    "\u014f\051\023\001\002\000\004\017\uffee\001\002\000\004" +
    "\044\u0163\001\002\000\004\045\u0164\001\002\000\006\014" +
    "\u0166\025\u0165\001\002\000\004\045\u0184\001\002\000\004" +
    "\045\u0167\001\002\000\014\005\167\037\165\044\164\050" +
    "\162\052\161\001\002\000\010\021\u0169\042\u011c\043\u011d" +
    "\001\002\000\004\045\u016a\001\002\000\014\005\167\037" +
    "\165\044\164\050\162\052\161\001\002\000\012\042\173" +
    "\043\174\046\u016c\051\023\001\002\000\026\011\uffdb\022" +
    "\uffdb\024\uffdb\027\uffdb\030\uffdb\044\uffdb\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\006\046\u016c\051\023\001" +
    "\002\000\004\022\u016f\001\002\000\012\045\uff8f\046\uff8f" +
    "\047\uff8f\051\uff8f\001\002\000\004\022\uff83\001\002\000" +
    "\022\011\144\022\uff86\024\014\027\u015b\030\u0156\044\151" +
    "\046\u016c\051\023\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\u016c\051\023\001\002" +
    "\000\004\022\uff85\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\012\045\010\046\uffdb\047\007\051" +
    "\uffdb\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\u016c\051\023\001\002\000\004\022" +
    "\uff88\001\002\000\006\046\u016c\051\023\001\002\000\004" +
    "\022\uff89\001\002\000\006\046\u016c\051\023\001\002\000" +
    "\004\022\uff8b\001\002\000\006\046\u016c\051\023\001\002" +
    "\000\004\022\uff87\001\002\000\004\022\uff84\001\002\000" +
    "\006\046\u016c\051\023\001\002\000\004\022\uff8a\001\002" +
    "\000\006\036\063\044\062\001\002\000\004\045\u0186\001" +
    "\002\000\004\014\u0187\001\002\000\004\045\u0188\001\002" +
    "\000\014\005\167\037\165\044\164\050\162\052\161\001" +
    "\002\000\010\021\u018a\042\u011c\043\u011d\001\002\000\004" +
    "\045\u018b\001\002\000\014\005\167\037\165\044\164\050" +
    "\162\052\161\001\002\000\012\042\173\043\174\046\u016c" +
    "\051\023\001\002\000\004\022\u018e\001\002\000\012\045" +
    "\uff8e\046\uff8e\047\uff8e\051\uff8e\001\002\000\006\046\u014f" +
    "\051\023\001\002\000\004\017\uffef\001\002\000\004\032" +
    "\u0192\001\002\000\004\045\u0193\001\002\000\016\005\226" +
    "\026\231\037\227\044\236\050\233\052\234\001\002\000" +
    "\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000\006" +
    "\046\u0197\051\023\001\002\000\006\046\u0197\051\023\001" +
    "\002\000\026\011\uffdb\023\uffdb\024\uffdb\030\uffdb\031\uffdb" +
    "\044\uffdb\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\004\023\u0199\001\002\000\012\045\uff78\046\uff78\047\uff78" +
    "\051\uff78\001\002\000\022\011\144\023\uff71\024\014\030" +
    "\u0156\031\u015d\044\151\046\u0197\051\023\001\002\000\012" +
    "\045\010\046\uffdb\047\007\051\uffdb\001\002\000\004\023" +
    "\uff70\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb" +
    "\001\002\000\006\046\u0197\051\023\001\002\000\012\045" +
    "\010\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\006\046\u0197\051\023" +
    "\001\002\000\004\023\uff73\001\002\000\006\046\u0197\051" +
    "\023\001\002\000\004\023\uff74\001\002\000\006\046\u0197" +
    "\051\023\001\002\000\004\023\uff76\001\002\000\004\023" +
    "\uff6f\001\002\000\006\046\u0197\051\023\001\002\000\004" +
    "\023\uff75\001\002\000\006\046\u0197\051\023\001\002\000" +
    "\004\023\uff72\001\002\000\004\023\uff6e\001\002\000\006" +
    "\046\u014f\051\023\001\002\000\004\017\ufff2\001\002\000" +
    "\006\046\u014f\051\023\001\002\000\004\017\uffed\001\002" +
    "\000\004\017\uffea\001\002\000\006\046\u014f\051\023\001" +
    "\002\000\004\017\ufff1\001\002\000\016\005\226\026\231" +
    "\037\227\044\236\050\233\052\234\001\002\000\004\045" +
    "\u01b7\001\002\000\004\020\u01b8\001\002\000\006\046\u01b9" +
    "\051\023\001\002\000\030\011\uffdb\017\uffdb\024\uffdb\027" +
    "\uffdb\031\uffdb\034\uffdb\044\uffdb\045\010\046\uffdb\047\007" +
    "\051\uffdb\001\002\000\006\046\u01b9\051\023\001\002\000" +
    "\006\017\u01bc\034\u01bd\001\002\000\004\045\u01c3\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\046\u01b9\051\023\001\002\000\004\017\u01c0\001\002" +
    "\000\004\045\u01c1\001\002\000\004\030\u01c2\001\002\000" +
    "\012\045\uffa5\046\uffa5\047\uffa5\051\uffa5\001\002\000\004" +
    "\030\u01c4\001\002\000\012\045\uffa6\046\uffa6\047\uffa6\051" +
    "\uffa6\001\002\000\006\017\uffb1\034\uffb1\001\002\000\024" +
    "\011\144\017\uffb4\024\014\027\u015b\031\u015d\034\uffb4\044" +
    "\151\046\u01b9\051\023\001\002\000\006\017\uffb3\034\uffb3" +
    "\001\002\000\012\045\010\046\uffdb\047\007\051\uffdb\001" +
    "\002\000\006\046\u01b9\051\023\001\002\000\012\045\010" +
    "\046\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb" +
    "\047\007\051\uffdb\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\u01b9\051\023\001\002" +
    "\000\006\017\uffb6\034\uffb6\001\002\000\006\046\u01b9\051" +
    "\023\001\002\000\006\017\uffb7\034\uffb7\001\002\000\006" +
    "\046\u01b9\051\023\001\002\000\006\017\uffb9\034\uffb9\001" +
    "\002\000\006\046\u01b9\051\023\001\002\000\006\017\uffb5" +
    "\034\uffb5\001\002\000\006\017\uffb2\034\uffb2\001\002\000" +
    "\006\046\u01b9\051\023\001\002\000\006\017\uffb8\034\uffb8" +
    "\001\002\000\006\046\u014f\051\023\001\002\000\004\017" +
    "\ufff0\001\002\000\004\017\uffe9\001\002\000\006\046\u014f" +
    "\051\023\001\002\000\014\025\u01de\045\uffd9\046\uffd9\047" +
    "\uffd9\051\uffd9\001\002\000\004\045\u01df\001\002\000\006" +
    "\036\063\044\062\001\002\000\012\045\010\046\uffdb\047" +
    "\007\051\uffdb\001\002\000\006\046\126\051\023\001\002" +
    "\000\004\017\u01e3\001\002\000\004\045\u01e4\001\002\000" +
    "\004\015\u01e5\001\002\000\012\002\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\001\002\000\004\017\u01e7\001\002\000\004\045" +
    "\u01e8\001\002\000\004\015\u01e9\001\002\000\012\002\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\001\002\000\004\044\u01eb\001" +
    "\002\000\004\045\u01ec\001\002\000\004\025\u01ed\001\002" +
    "\000\004\045\u01ee\001\002\000\006\036\063\044\062\001" +
    "\002\000\006\006\uffd0\016\u01f0\001\002\000\004\045\u01f1" +
    "\001\002\000\004\035\113\001\002\000\004\006\uffcf\001" +
    "\002\000\004\002\000\001\002\000\006\002\ufff3\046\030" +
    "\001\002\000\004\002\ufff8\001\002\000\004\002\uffff\001" +
    "\002\000\004\044\u01f8\001\002\000\004\005\u01f9\001\002" +
    "\000\006\006\u01fa\035\113\001\002\000\012\045\010\046" +
    "\uffdb\047\007\051\uffdb\001\002\000\004\006\u01fc\001\002" +
    "\000\012\045\010\046\uffdb\047\007\051\uffdb\001\002\000" +
    "\006\046\u014f\051\023\001\002\000\004\017\u01ff\001\002" +
    "\000\004\045\u0200\001\002\000\004\004\u0201\001\002\000" +
    "\012\002\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\006" +
    "\046\u014f\051\023\001\002\000\004\017\u0204\001\002\000" +
    "\004\045\u0205\001\002\000\004\004\u0206\001\002\000\012" +
    "\002\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\022\002\011\003\004\005\021\007\015\011" +
    "\014\013\016\044\023\051\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01f5\005\021\007\015\011" +
    "\014\013\016\044\023\051\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\025\006\070\001\001\000\006\005\025\006\066\001" +
    "\001\000\006\005\025\006\064\001\001\000\002\001\001" +
    "\000\004\052\034\001\001\000\022\003\032\004\033\005" +
    "\021\007\015\011\014\013\016\044\023\051\010\001\001" +
    "\000\002\001\001\000\006\005\025\006\024\001\001\000" +
    "\004\004\030\001\001\000\006\005\025\006\026\001\001" +
    "\000\002\001\001\000\020\003\031\005\021\007\015\011" +
    "\014\013\016\044\023\051\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\025\006\040\001\001\000\006\045\043\051" +
    "\042\001\001\000\006\005\025\006\050\001\001\000\006" +
    "\045\047\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\052\046\053\051\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\054\001\001" +
    "\000\006\045\055\051\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\065\001\001\000\002\001\001\000\004\004\067" +
    "\001\001\000\002\001\001\000\004\004\071\001\001\000" +
    "\002\001\001\000\004\010\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\114\001\001\000" +
    "\002\001\001\000\006\005\025\006\u01db\001\001\000\002" +
    "\001\001\000\006\005\025\006\116\001\001\000\006\015" +
    "\u014f\051\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\122\001\001\000\006\005\025\006\123\001" +
    "\001\000\006\016\126\051\124\001\001\000\006\016\u014c" +
    "\051\124\001\001\000\006\005\025\006\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\142\016\147\017\137\021\133\032" +
    "\135\034\136\041\144\047\146\050\151\051\124\001\001" +
    "\000\006\005\025\006\u014a\001\001\000\002\001\001\000" +
    "\006\016\u0112\051\124\001\001\000\006\005\025\006\u0110" +
    "\001\001\000\006\016\u010f\051\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\344\001\001" +
    "\000\002\001\001\000\006\005\025\006\332\001\001\000" +
    "\002\001\001\000\006\005\025\006\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\025\006\152\001" +
    "\001\000\006\016\153\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\167\023\162\026\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\025\006\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\167\023\162\026\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\167\023\162\026\175\001\001\000" +
    "\002\001\001\000\010\012\167\023\162\026\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\167\023" +
    "\162\025\203\026\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\167\023\162\025\207\026\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\167\023\162\026\217\001\001\000\002\001\001\000" +
    "\006\016\221\051\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\234\024\231\027" +
    "\227\001\001\000\010\012\234\024\231\027\330\001\001" +
    "\000\002\001\001\000\006\005\025\006\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\234\024\244\001\001\000" +
    "\002\001\001\000\010\012\234\024\231\027\246\001\001" +
    "\000\002\001\001\000\006\012\234\024\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\234\024\253" +
    "\001\001\000\002\001\001\000\010\012\234\024\231\027" +
    "\255\001\001\000\002\001\001\000\010\012\234\024\231" +
    "\027\257\001\001\000\002\001\001\000\006\012\234\024" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\234\024\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\234\024\270\001\001" +
    "\000\002\001\001\000\010\012\234\024\231\027\272\001" +
    "\001\000\002\001\001\000\010\012\234\024\231\027\274" +
    "\001\001\000\002\001\001\000\006\043\300\051\276\001" +
    "\001\000\006\043\327\051\276\001\001\000\006\005\025" +
    "\006\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\307\017\310\021\306\032\304\034\303\043\312" +
    "\047\305\050\311\051\276\001\001\000\006\005\025\006" +
    "\325\001\001\000\006\043\324\051\276\001\001\000\006" +
    "\005\025\006\322\001\001\000\006\005\025\006\320\001" +
    "\001\000\006\005\025\006\316\001\001\000\006\043\315" +
    "\051\276\001\001\000\006\005\025\006\313\001\001\000" +
    "\002\001\001\000\006\043\314\051\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\317\051\276\001" +
    "\001\000\002\001\001\000\006\043\321\051\276\001\001" +
    "\000\002\001\001\000\006\043\323\051\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\326\051\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\333\051\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\167\023\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\345\051\124\001\001\000\002\001\001" +
    "\000\010\012\167\023\162\026\347\001\001\000\002\001" +
    "\001\000\010\012\234\024\231\027\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\025\006\354\001" +
    "\001\000\006\031\357\051\355\001\001\000\006\031\u010e" +
    "\051\355\001\001\000\006\005\025\006\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\025\006\362" +
    "\001\001\000\006\031\363\051\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\376\017" +
    "\377\031\u0101\032\373\034\372\041\375\047\374\050\u0100" +
    "\051\355\001\001\000\006\005\025\006\u010c\001\001\000" +
    "\006\031\u010b\051\355\001\001\000\006\005\025\006\u0109" +
    "\001\001\000\006\005\025\006\u0107\001\001\000\006\005" +
    "\025\006\u0105\001\001\000\006\031\u0104\051\355\001\001" +
    "\000\006\005\025\006\u0102\001\001\000\002\001\001\000" +
    "\006\031\u0103\051\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u0106\051\355\001\001\000\002\001" +
    "\001\000\006\031\u0108\051\355\001\001\000\002\001\001" +
    "\000\006\031\u010a\051\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\u010d\051\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u0111\051\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\167\023\u0119" +
    "\037\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\167\023\162\026\u011f\001\001\000\006\036\u0121\051" +
    "\u0120\001\001\000\006\036\u0139\051\u0120\001\001\000\002" +
    "\001\001\000\006\005\025\006\u0123\001\001\000\024\007" +
    "\u0128\017\u0129\021\u0125\032\u0124\036\u012b\041\u0127\047\u0126" +
    "\050\u012a\051\u0120\001\001\000\006\036\u0137\051\u0120\001" +
    "\001\000\006\005\025\006\u0135\001\001\000\006\005\025" +
    "\006\u0133\001\001\000\006\005\025\006\u0131\001\001\000" +
    "\006\005\025\006\u012f\001\001\000\006\036\u012e\051\u0120" +
    "\001\001\000\006\005\025\006\u012c\001\001\000\002\001" +
    "\001\000\006\036\u012d\051\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\u0130\051\u0120\001\001\000" +
    "\002\001\001\000\006\036\u0132\051\u0120\001\001\000\002" +
    "\001\001\000\006\036\u0134\051\u0120\001\001\000\002\001" +
    "\001\000\006\036\u0136\051\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\167\023\u0119\037\u013b\001\001\000\002\001\001" +
    "\000\010\012\167\023\u0119\037\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\167\023\u0119\037\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\167\023\162\026\u0147\001\001\000" +
    "\006\036\u0148\051\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\u014b\051\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01da\051\u014d\001\001" +
    "\000\006\005\025\006\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\u015b\015\u015d\020\u0156\032\u0157\033\u0154\040\u0158\047" +
    "\u0159\050\u015e\051\u014d\001\001\000\006\005\025\006\u01d8" +
    "\001\001\000\002\001\001\000\006\005\025\006\u01b2\001" +
    "\001\000\006\015\u01b1\051\u014d\001\001\000\006\005\025" +
    "\006\u01af\001\001\000\006\005\025\006\u01ad\001\001\000" +
    "\002\001\001\000\006\005\025\006\u018e\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\025\006\u015f\001" +
    "\001\000\006\015\u0160\051\u014d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\167\023\u0119" +
    "\037\u0167\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\167\023\162\026\u016a\001\001\000\006\035\u016d" +
    "\051\u016c\001\001\000\006\005\025\006\u0170\001\001\000" +
    "\006\035\u016f\051\u016c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\u0176\020\u0171\032" +
    "\u0172\035\u0173\040\u0174\047\u0175\050\u0177\051\u016c\001\001" +
    "\000\006\005\025\006\u0181\001\001\000\006\035\u0180\051" +
    "\u016c\001\001\000\002\001\001\000\006\005\025\006\u017e" +
    "\001\001\000\006\005\025\006\u017c\001\001\000\006\005" +
    "\025\006\u017a\001\001\000\006\005\025\006\u0178\001\001" +
    "\000\006\035\u0179\051\u016c\001\001\000\002\001\001\000" +
    "\006\035\u017b\051\u016c\001\001\000\002\001\001\000\006" +
    "\035\u017d\051\u016c\001\001\000\002\001\001\000\006\035" +
    "\u017f\051\u016c\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\u0182\051\u016c\001\001\000\002\001\001\000" +
    "\004\022\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\167\023\u0119\037\u0188\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\167" +
    "\023\162\026\u018b\001\001\000\006\035\u018c\051\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u018f" +
    "\051\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\234\024\231\027\u0193\001\001" +
    "\000\006\005\025\006\u0194\001\001\000\006\042\u0197\051" +
    "\u0195\001\001\000\006\042\u01ac\051\u0195\001\001\000\006" +
    "\005\025\006\u0199\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\u019f\020\u019c\032\u019d\033\u019a\042\u019b" +
    "\047\u019e\050\u01a0\051\u0195\001\001\000\006\005\025\006" +
    "\u01aa\001\001\000\002\001\001\000\006\005\025\006\u01a8" +
    "\001\001\000\006\042\u01a7\051\u0195\001\001\000\006\005" +
    "\025\006\u01a5\001\001\000\006\005\025\006\u01a3\001\001" +
    "\000\006\005\025\006\u01a1\001\001\000\006\042\u01a2\051" +
    "\u0195\001\001\000\002\001\001\000\006\042\u01a4\051\u0195" +
    "\001\001\000\002\001\001\000\006\042\u01a6\051\u0195\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u01a9" +
    "\051\u0195\001\001\000\002\001\001\000\006\042\u01ab\051" +
    "\u0195\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u01ae\051\u014d\001\001\000\002\001\001\000\006\015" +
    "\u01b0\051\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01b3\051\u014d\001\001\000\002\001\001\000" +
    "\010\012\234\024\231\027\u01b5\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u01ba\051\u01b9\001\001\000" +
    "\006\005\025\006\u01c5\001\001\000\006\030\u01c4\051\u01b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\025\006\u01bd\001\001\000\006\030\u01be\051\u01b9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\u01cb\030\u01c6\032\u01c8\033\u01c7\040" +
    "\u01c9\047\u01ca\050\u01cc\051\u01b9\001\001\000\002\001\001" +
    "\000\006\005\025\006\u01d6\001\001\000\006\030\u01d5\051" +
    "\u01b9\001\001\000\006\005\025\006\u01d3\001\001\000\006" +
    "\005\025\006\u01d1\001\001\000\006\005\025\006\u01cf\001" +
    "\001\000\006\005\025\006\u01cd\001\001\000\006\030\u01ce" +
    "\051\u01b9\001\001\000\002\001\001\000\006\030\u01d0\051" +
    "\u01b9\001\001\000\002\001\001\000\006\030\u01d2\051\u01b9" +
    "\001\001\000\002\001\001\000\006\030\u01d4\051\u01b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\u01d7" +
    "\051\u01b9\001\001\000\002\001\001\000\006\015\u01d9\051" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u01e5\051\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u01df\001\001\000\006\005\025\006\u01e0" +
    "\001\001\000\006\016\u01e1\051\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01ee\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u01f1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u01f4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u01fa\001\001\000\006\005" +
    "\025\006\u0201\001\001\000\002\001\001\000\006\005\025" +
    "\006\u01fc\001\001\000\006\015\u01fd\051\u014d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u0202\051\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public static int errors = 0;

public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      /*System.err.println( info + " "+ message);*/
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error() {
    //report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public programa programaP;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		programaP = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		programaP = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              programa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              programa RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              programa RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bloque_sub bp = (bloque_sub)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p2 = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p2; RESULT.addBloque(bp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              programa RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bloque_function bf = (bloque_function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p2 = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p2; RESULT.addBloque(bf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              programa RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		bloque_type be = (bloque_type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p2 = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p2; RESULT.addBloque(be); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              programa RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p2 = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p2; for(int i=0;i<dv.size();i++){RESULT.addDeclaracion(dv.get(i));} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              programa RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p2 = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p2; RESULT.addDeclaracion(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              programa RESULT =null;
 parser.report_error("ERROR","SYNTAX"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA ::= error NT$0 PROGRAMA2 
            {
              programa RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (programa) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= newline PROGRAMA 
            {
              programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		programa p = (programa)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA2 ::= newline 
            {
              programa RESULT =null;
		RESULT = new programa();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROGRAMA2 ::= 
            {
              programa RESULT =null;
		RESULT = new programa(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; RESULT.add(ba); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cs; RESULT.add(bc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cf; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; RESULT.add(ba); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; RESULT.add(bc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              ArrayList<declaracion_var> RESULT =null;
		int dv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion_var> dv2 = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList(); RESULT=dv2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<declaracion_var> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion_var> dv2 = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT=dv2; RESULT.add(new declaracion_var(new identificador(id), t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              ArrayList<declaracion_var> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion_var> dv2 = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dv2; RESULT.add(new declaracion_var(new identificador(id), dv2.get(dv2.size()-1).tipo));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              ArrayList<declaracion_var> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList(); RESULT.add(new declaracion_var(new identificador(id), t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOS ::= tipovar 
            {
              tipovar RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new tipovar(tv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOS ::= identificador 
            {
              tipovar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new tipovar(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              bloque_sub RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_sub(new identificador(id), cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              bloque_sub RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<parametro> lp = (ArrayList<parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_sub(new identificador(id), lp, cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS 
            {
              ArrayList<parametro> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList(); RESULT.add(new parametro(tp, new identificador(id), t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS coma espacio LISTA_PARAMENTROS 
            {
              ArrayList<parametro> RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<parametro> lp = (ArrayList<parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lp; RESULT.add(new parametro(tp, new identificador(id), t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              bloque_function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ArrayList<parametro> lp = (ArrayList<parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_function(new identificador(id),lp, t, cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              bloque_function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_function(new identificador(id), t, cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              bloque_function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_function(new identificador(id), cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              bloque_function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<parametro> lp = (ArrayList<parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cs = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new bloque_function(new identificador(id),lp, cs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGUMENTOS ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= EXP opsum espacio EXP 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new exp(v,os, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= EXP opmult espacio EXP 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new exp(v,om, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= VALORES INDENTACION2 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP_FOR ::= EXP_FOR opsum espacio EXP_FOR 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String os = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new exp(v,os, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_FOR ::= EXP_FOR opmult espacio EXP_FOR 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String om = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new exp(v,om, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_FOR ::= VALORES espacio 
            {
              exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exp v = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= identificador 
            {
              exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new exp(new valores(new identificador(id)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= truefalse 
            {
              exp RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new exp( new valores(tf));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= numero 
            {
              exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new exp(new valores(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= cadena 
            {
              exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new exp (new valores(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= identificador punto identificador 
            {
              exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new exp (new valores(new identificador(id+"."+id2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new exp (new valores(new exp(e)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ci; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ci; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ci; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ci; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF end espacio If 
            {
              declaracion_if RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new declaracion_if(ec, ci);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              declaracion_if RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cie = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new declaracion_if(ec, ci, cie);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              declaracion_if RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new declaracion_if(ec, ci);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              declaracion_if RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<declaracion> ci = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<declaracion> cie = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new declaracion_if(ec, ci, cie);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, "=", v2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2), ol, ec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, "=", v2), ol, ec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2), ol, ec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2), ol,ec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              operacion_logica RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		condicion v1 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		condicion v2 = (condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		operacion_logica ec = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new operacion_logica(new condicion(v1, opr, v2), ol, ec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES_CONDICIONALES ::= identificador 
            {
              condicion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new condicion(new valores_con(new identificador(id)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORES_CONDICIONALES ::= truefalse 
            {
              condicion RESULT =null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new condicion(new valores_con(tf));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORES_CONDICIONALES ::= numero 
            {
              condicion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new condicion(new valores_con(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORES_CONDICIONALES ::= cadena 
            {
              condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new condicion(new valores_con(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALORES_CONDICIONALES ::= identificador punto identificador 
            {
              condicion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new condicion(new valores_con(new identificador(id+"."+id2)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORES_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis 
            {
              condicion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		operacion_logica c = (operacion_logica)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new condicion(new valores_con(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALORES_CONDICIONALES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              condicion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              declaracion_asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion_asignacion(new identificador(id), "=", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BLOQUE_ASIGNACION ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              declaracion_asignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		exp e = (exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion_asignacion(new identificador(id+"."+id2), "=", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BLOQUE_FOR ::= For espacio identificador espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BLOQUE_FOR ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_FOR ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cf; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cf; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cf = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cf; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE_FUNCTION loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_WHILE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cw; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_if bi = (declaracion_if)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; RESULT.add(bi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<declaracion_var> dv = (ArrayList<declaracion_var>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cw; for(int i=0;i<dv.size();i++){RESULT.add(dv.get(i));}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              ArrayList<declaracion> RESULT =null;
		RESULT = new ArrayList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int baleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_asignacion ba = (declaracion_asignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw; RESULT.add(ba);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =cw; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              ArrayList<declaracion> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<declaracion> cw = (ArrayList<declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cw; RESULT.add(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              bloque_type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		bloque_type ce = (bloque_type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = ce; RESULT.setIdentificador(new identificador(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              bloque_type RESULT =null;
		int dveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dveright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declaracion_var_estructura dve = (declaracion_var_estructura)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bloque_type ce = (bloque_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ce; RESULT.addDeclaracionVar(dve);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              bloque_type RESULT =null;
		RESULT = new bloque_type();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              bloque_type RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bloque_type ce = (bloque_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ce;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              bloque_type RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaracion_comentario bc = (declaracion_comentario)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		bloque_type ce = (bloque_type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ce; RESULT.addDeclaracion(bc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              declaracion_var_estructura RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		tipovar t = (tipovar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion_var_estructura(new identificador(id), t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis VALORES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BLOQUE_COMENTARIOS ::= comentario 
            {
              declaracion_comentario RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new declaracion_comentario(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\002\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\015\005\000\002\015\006\000" +
    "\002\015\004\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\004\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\004\000\002\017\005\000" +
    "\002\006\004\000\002\006\002\000\002\005\003\000\002" +
    "\005\003\000\002\007\005\000\002\010\012\000\002\010" +
    "\006\000\002\010\007\000\002\022\003\000\002\022\003" +
    "\000\002\013\014\000\002\013\015\000\002\014\011\000" +
    "\002\014\014\000\002\011\021\000\002\011\020\000\002" +
    "\011\014\000\002\011\015\000\002\012\005\000\002\012" +
    "\006\000\002\025\003\000\002\025\006\000\002\026\007" +
    "\000\002\026\007\000\002\026\004\000\002\026\011\000" +
    "\002\026\011\000\002\026\006\000\002\037\007\000\002" +
    "\037\007\000\002\037\004\000\002\037\011\000\002\037" +
    "\011\000\002\037\006\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\030\007\000\002" +
    "\030\007\000\002\030\007\000\002\030\007\000\002\030" +
    "\007\000\002\030\004\000\002\030\005\000\002\030\006" +
    "\000\002\030\004\000\002\031\007\000\002\031\007\000" +
    "\002\031\007\000\002\031\007\000\002\031\007\000\002" +
    "\031\004\000\002\031\005\000\002\031\006\000\002\031" +
    "\006\000\002\031\004\000\002\020\013\000\002\020\016" +
    "\000\002\021\014\000\002\021\017\000\002\027\007\000" +
    "\002\027\007\000\002\027\011\000\002\027\011\000\002" +
    "\027\013\000\002\027\011\000\002\027\011\000\002\027" +
    "\013\000\002\027\013\000\002\027\015\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\005\000\002\024\005\000\002\032\007\000\002" +
    "\032\011\000\002\033\016\000\002\033\022\000\002\034" +
    "\016\000\002\034\022\000\002\035\007\000\002\035\007" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\035\004\000\002\035\005\000\002\035\006\000\002" +
    "\035\004\000\002\036\007\000\002\036\007\000\002\036" +
    "\007\000\002\036\007\000\002\036\007\000\002\036\004" +
    "\000\002\036\005\000\002\036\006\000\002\036\006\000" +
    "\002\036\004\000\002\040\012\000\002\041\012\000\002" +
    "\042\007\000\002\042\007\000\002\042\007\000\002\042" +
    "\007\000\002\042\007\000\002\042\004\000\002\042\005" +
    "\000\002\042\006\000\002\042\004\000\002\043\007\000" +
    "\002\043\007\000\002\043\007\000\002\043\007\000\002" +
    "\043\007\000\002\043\004\000\002\043\005\000\002\043" +
    "\006\000\002\043\006\000\002\043\004\000\002\044\012" +
    "\000\002\045\007\000\002\045\004\000\002\045\005\000" +
    "\002\045\004\000\002\046\007\000\002\047\007\000\002" +
    "\050\010\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0216\000\022\004\004\013\020\015\013\025\014\046" +
    "\010\047\007\050\006\052\022\001\002\000\004\046\u0209" +
    "\001\002\000\004\002\001\001\002\000\054\002\uffdc\004" +
    "\uffdc\006\uffdc\011\uffdc\013\uffdc\015\uffdc\016\uffdc\020\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc" +
    "\001\002\000\020\004\004\013\020\015\013\025\014\046" +
    "\010\050\006\052\022\001\002\000\054\002\uffdb\004\uffdb" +
    "\006\uffdb\011\uffdb\013\uffdb\015\uffdb\016\uffdb\020\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb" +
    "\035\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb\001" +
    "\002\000\012\002\uffdd\046\010\047\uffdd\050\006\001\002" +
    "\000\004\002\u0205\001\002\000\004\046\105\001\002\000" +
    "\004\046\070\001\002\000\012\002\uffdd\046\010\047\uffdd" +
    "\050\006\001\002\000\012\002\uffdd\046\010\047\uffdd\050" +
    "\006\001\002\000\012\002\uffdd\046\010\047\uffdd\050\006" +
    "\001\002\000\004\046\034\001\002\000\024\002\ufff5\004" +
    "\004\013\020\015\013\025\014\046\010\047\027\050\006" +
    "\052\022\001\002\000\014\002\uff58\046\uff58\047\uff58\050" +
    "\uff58\052\uff58\001\002\000\012\002\uffdd\046\010\047\uffdd" +
    "\050\006\001\002\000\006\002\ufff5\047\027\001\002\000" +
    "\046\002\uffdd\006\uffdd\011\uffdd\016\uffdd\020\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\042\002\uffde\006\uffde\011\uffde\016\uffde\020\uffde\023" +
    "\uffde\024\uffde\025\uffde\030\uffde\031\uffde\032\uffde\034\uffde" +
    "\035\uffde\045\uffde\047\uffde\052\uffde\001\002\000\022\002" +
    "\ufff6\004\004\013\020\015\013\025\014\046\010\050\006" +
    "\052\022\001\002\000\004\002\ufffa\001\002\000\004\002" +
    "\ufff7\001\002\000\004\002\ufffe\001\002\000\004\002\ufffd" +
    "\001\002\000\004\045\035\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\006\047\040\052\022" +
    "\001\002\000\006\047\040\052\022\001\002\000\016\020" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\004\020\042\001\002\000\004\046\043\001\002\000" +
    "\004\013\044\001\002\000\012\002\uff60\046\uff60\047\uff60" +
    "\050\uff60\001\002\000\012\020\uff5e\045\046\047\040\052" +
    "\022\001\002\000\004\046\053\001\002\000\004\020\uff5d" +
    "\001\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001" +
    "\002\000\006\047\040\052\022\001\002\000\004\020\uff5f" +
    "\001\002\000\004\026\054\001\002\000\004\046\055\001" +
    "\002\000\006\037\057\045\056\001\002\000\020\002\uffd5" +
    "\006\uffd5\016\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\001" +
    "\002\000\020\002\uffd6\006\uffd6\016\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\052\uffd6\001\002\000\012\046\uff5b\047\uff5b\050" +
    "\uff5b\052\uff5b\001\002\000\004\020\uff5c\001\002\000\006" +
    "\002\ufff5\047\027\001\002\000\004\002\ufffc\001\002\000" +
    "\006\002\ufff5\047\027\001\002\000\004\002\ufff9\001\002" +
    "\000\006\002\ufff5\047\027\001\002\000\004\002\ufffb\001" +
    "\002\000\004\045\071\001\002\000\006\016\074\046\073" +
    "\001\002\000\014\002\uffda\046\uffda\047\uffda\050\uffda\052" +
    "\uffda\001\002\000\004\026\077\001\002\000\004\046\075" +
    "\001\002\000\004\045\071\001\002\000\014\002\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\052\uffd8\001\002\000\004\046\100" +
    "\001\002\000\006\037\057\045\056\001\002\000\016\002" +
    "\uffd7\016\102\046\uffd7\047\uffd7\050\uffd7\052\uffd7\001\002" +
    "\000\004\046\103\001\002\000\004\045\071\001\002\000" +
    "\014\002\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\001\002" +
    "\000\004\045\106\001\002\000\004\005\107\001\002\000" +
    "\006\006\111\036\110\001\002\000\004\046\u01fc\001\002" +
    "\000\012\046\u01ef\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\004\006\113\001\002\000\012\046\115\047\uffdd\050\006" +
    "\052\uffdd\001\002\000\006\047\u0161\052\022\001\002\000" +
    "\014\026\116\046\uffdb\047\uffdb\050\uffdb\052\uffdb\001\002" +
    "\000\004\046\117\001\002\000\006\037\057\045\056\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\006\047\123\052\022\001\002\000\006\047\123\052" +
    "\022\001\002\000\032\011\uffdd\020\uffdd\025\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\045\uffdd\046\010\047\uffdd\050" +
    "\006\052\uffdd\001\002\000\004\020\125\001\002\000\004" +
    "\046\126\001\002\000\004\015\127\001\002\000\012\002" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\026\011\141" +
    "\020\uffe4\025\014\030\143\031\136\032\132\034\137\045" +
    "\146\047\123\052\022\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\004\046\u011c\001\002\000" +
    "\006\047\123\052\022\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\047\123\052\022\001" +
    "\002\000\004\046\361\001\002\000\004\046\357\001\002" +
    "\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\004\012\345\001\002\000\012\046\010\047\uffdd\050\006" +
    "\052\uffdd\001\002\000\004\046\234\001\002\000\012\046" +
    "\010\047\uffdd\050\006\052\uffdd\001\002\000\004\020\uffe3" +
    "\001\002\000\006\012\152\046\153\001\002\000\012\046" +
    "\010\047\uffdd\050\006\052\uffdd\001\002\000\006\047\123" +
    "\052\022\001\002\000\004\020\uffe7\001\002\000\004\045" +
    "\225\001\002\000\004\014\154\001\002\000\004\046\155" +
    "\001\002\000\016\005\156\027\160\040\157\045\166\051" +
    "\161\053\163\001\002\000\016\005\156\027\160\040\157" +
    "\045\166\051\161\053\163\001\002\000\016\006\uffbb\016" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\001\002\000\004" +
    "\046\211\001\002\000\016\006\uffb9\016\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\052\uffb9\001\002\000\016\006\uffdd\016\uffdd" +
    "\046\202\047\uffdd\050\006\052\uffdd\001\002\000\016\006" +
    "\uffba\016\uffba\046\uffba\047\uffba\050\uffba\052\uffba\001\002" +
    "\000\016\006\uffb6\016\uffb6\046\uffb6\047\uffb6\050\uffb6\052" +
    "\uffb6\001\002\000\006\047\uff8e\052\uff8e\001\002\000\022" +
    "\005\170\006\uffbc\012\167\016\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\052\uffbc\001\002\000\004\045\200\001\002\000\020" +
    "\005\156\006\171\027\160\040\157\045\166\051\161\053" +
    "\163\001\002\000\016\006\uffcc\016\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\052\uffcc\001\002\000\004\006\177\001\002\000" +
    "\006\006\uffca\016\174\001\002\000\004\046\175\001\002" +
    "\000\016\005\156\027\160\040\157\045\166\051\161\053" +
    "\163\001\002\000\004\006\uffc9\001\002\000\016\006\uffcb" +
    "\016\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\001\002\000" +
    "\016\006\uffb8\016\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8" +
    "\001\002\000\012\006\uffc6\016\uffc6\047\uffc6\052\uffc6\001" +
    "\002\000\016\043\203\044\204\046\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\001\002\000\004\046\207\001\002\000\004\046" +
    "\205\001\002\000\016\005\156\027\160\040\157\045\166" +
    "\051\161\053\163\001\002\000\012\006\uffc7\016\uffc7\047" +
    "\uffc7\052\uffc7\001\002\000\016\005\156\027\160\040\157" +
    "\045\166\051\161\053\163\001\002\000\012\006\uffc8\016" +
    "\uffc8\047\uffc8\052\uffc8\001\002\000\014\005\156\040\157" +
    "\045\166\051\161\053\163\001\002\000\016\006\uffdd\016" +
    "\uffdd\046\214\047\uffdd\050\006\052\uffdd\001\002\000\012" +
    "\006\uffc3\016\uffc3\047\uffc3\052\uffc3\001\002\000\016\043" +
    "\215\044\216\046\uffdb\047\uffdb\050\uffdb\052\uffdb\001\002" +
    "\000\004\046\221\001\002\000\004\046\217\001\002\000" +
    "\016\005\156\027\160\040\157\045\166\051\161\053\163" +
    "\001\002\000\012\006\uffc4\016\uffc4\047\uffc4\052\uffc4\001" +
    "\002\000\016\005\156\027\160\040\157\045\166\051\161" +
    "\053\163\001\002\000\012\006\uffc5\016\uffc5\047\uffc5\052" +
    "\uffc5\001\002\000\004\006\224\001\002\000\016\006\uffb7" +
    "\016\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\001\002\000" +
    "\004\046\226\001\002\000\004\014\227\001\002\000\004" +
    "\046\230\001\002\000\016\005\156\027\160\040\157\045" +
    "\166\051\161\053\163\001\002\000\006\047\uff8d\052\uff8d" +
    "\001\002\000\006\047\123\052\022\001\002\000\004\020" +
    "\uffe8\001\002\000\004\033\235\001\002\000\004\046\236" +
    "\001\002\000\016\005\246\027\245\040\244\045\243\051" +
    "\242\053\237\001\002\000\016\006\uff92\041\uff92\046\uff92" +
    "\047\uff92\050\uff92\052\uff92\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\004\046\270\001\002" +
    "\000\016\006\uff91\041\uff91\046\uff91\047\uff91\050\uff91\052" +
    "\uff91\001\002\000\020\006\uff94\012\266\041\uff94\046\uff94" +
    "\047\uff94\050\uff94\052\uff94\001\002\000\016\006\uff93\041" +
    "\uff93\046\uff93\047\uff93\050\uff93\052\uff93\001\002\000\004" +
    "\046\251\001\002\000\016\005\246\027\245\040\244\045" +
    "\243\051\242\053\237\001\002\000\004\006\250\001\002" +
    "\000\016\006\uff8f\041\uff8f\046\uff8f\047\uff8f\050\uff8f\052" +
    "\uff8f\001\002\000\014\005\246\040\244\045\243\051\242" +
    "\053\237\001\002\000\004\046\253\001\002\000\004\042" +
    "\254\001\002\000\004\046\255\001\002\000\016\005\246" +
    "\027\257\040\244\045\243\051\242\053\237\001\002\000" +
    "\016\006\uff9c\041\264\046\uff9c\047\uff9c\050\uff9c\052\uff9c" +
    "\001\002\000\004\046\260\001\002\000\014\005\246\040" +
    "\244\045\243\051\242\053\237\001\002\000\016\006\uff9a" +
    "\041\262\046\uff9a\047\uff9a\050\uff9a\052\uff9a\001\002\000" +
    "\016\005\246\027\245\040\244\045\243\051\242\053\237" +
    "\001\002\000\014\006\uff95\046\uff95\047\uff95\050\uff95\052" +
    "\uff95\001\002\000\016\005\246\027\245\040\244\045\243" +
    "\051\242\053\237\001\002\000\014\006\uff97\046\uff97\047" +
    "\uff97\050\uff97\052\uff97\001\002\000\004\045\267\001\002" +
    "\000\016\006\uff90\041\uff90\046\uff90\047\uff90\050\uff90\052" +
    "\uff90\001\002\000\006\014\272\042\271\001\002\000\004" +
    "\046\277\001\002\000\004\046\273\001\002\000\014\005" +
    "\246\040\244\045\243\051\242\053\237\001\002\000\016" +
    "\006\uff9d\041\275\046\uff9d\047\uff9d\050\uff9d\052\uff9d\001" +
    "\002\000\016\005\246\027\245\040\244\045\243\051\242" +
    "\053\237\001\002\000\014\006\uff98\046\uff98\047\uff98\050" +
    "\uff98\052\uff98\001\002\000\016\005\246\027\301\040\244" +
    "\045\243\051\242\053\237\001\002\000\016\006\uff9e\041" +
    "\306\046\uff9e\047\uff9e\050\uff9e\052\uff9e\001\002\000\004" +
    "\046\302\001\002\000\014\005\246\040\244\045\243\051" +
    "\242\053\237\001\002\000\016\006\uff9b\041\304\046\uff9b" +
    "\047\uff9b\050\uff9b\052\uff9b\001\002\000\016\005\246\027" +
    "\245\040\244\045\243\051\242\053\237\001\002\000\014" +
    "\006\uff96\046\uff96\047\uff96\050\uff96\052\uff96\001\002\000" +
    "\016\005\246\027\245\040\244\045\243\051\242\053\237" +
    "\001\002\000\014\006\uff99\046\uff99\047\uff99\050\uff99\052" +
    "\uff99\001\002\000\006\047\312\052\022\001\002\000\006" +
    "\047\312\052\022\001\002\000\030\011\uffdd\024\uffdd\025" +
    "\uffdd\031\uffdd\032\uffdd\034\uffdd\045\uffdd\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\004\024\314\001\002\000" +
    "\012\046\uff74\047\uff74\050\uff74\052\uff74\001\002\000\024" +
    "\011\141\024\uff65\025\014\031\136\032\132\034\137\045" +
    "\146\047\312\052\022\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\047\312\052\022\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000\006" +
    "\047\312\052\022\001\002\000\012\046\010\047\uffdd\050" +
    "\006\052\uffdd\001\002\000\004\024\uff64\001\002\000\006" +
    "\047\312\052\022\001\002\000\004\024\uff67\001\002\000" +
    "\004\024\uff62\001\002\000\006\047\312\052\022\001\002" +
    "\000\004\024\uff68\001\002\000\006\047\312\052\022\001" +
    "\002\000\004\024\uff69\001\002\000\006\047\312\052\022" +
    "\001\002\000\004\024\uff6a\001\002\000\004\024\uff63\001" +
    "\002\000\006\047\312\052\022\001\002\000\004\024\uff66" +
    "\001\002\000\004\024\uff61\001\002\000\006\047\123\052" +
    "\022\001\002\000\004\020\uffe5\001\002\000\006\007\346" +
    "\010\347\001\002\000\004\005\352\001\002\000\004\005" +
    "\350\001\002\000\004\006\351\001\002\000\012\046\uff5a" +
    "\047\uff5a\050\uff5a\052\uff5a\001\002\000\014\005\156\040" +
    "\157\045\166\051\161\053\163\001\002\000\004\006\354" +
    "\001\002\000\012\046\uff59\047\uff59\050\uff59\052\uff59\001" +
    "\002\000\006\047\123\052\022\001\002\000\004\020\uffea" +
    "\001\002\000\016\005\156\027\160\040\157\045\166\051" +
    "\161\053\163\001\002\000\006\047\uffdf\052\uffdf\001\002" +
    "\000\016\005\246\027\245\040\244\045\243\051\242\053" +
    "\237\001\002\000\004\046\363\001\002\000\004\021\364" +
    "\001\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001" +
    "\002\000\006\047\367\052\022\001\002\000\006\047\367" +
    "\052\022\001\002\000\032\011\uffdd\020\uffdd\025\uffdd\030" +
    "\uffdd\032\uffdd\034\uffdd\035\uffdd\045\uffdd\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\020\371\035\372\001" +
    "\002\000\004\046\u0100\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\047\367\052\022\001" +
    "\002\000\004\020\375\001\002\000\004\046\376\001\002" +
    "\000\004\031\377\001\002\000\012\046\uff9f\047\uff9f\050" +
    "\uff9f\052\uff9f\001\002\000\004\031\u0101\001\002\000\012" +
    "\046\uffa0\047\uffa0\050\uffa0\052\uffa0\001\002\000\026\011" +
    "\141\020\uffa7\025\014\030\143\032\132\034\137\035\uffa7" +
    "\045\146\047\367\052\022\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\006\047\367\052\022" +
    "\001\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\006\047\367\052\022\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\020\uffa6\035\uffa6\001" +
    "\002\000\006\047\367\052\022\001\002\000\006\020\uffa9" +
    "\035\uffa9\001\002\000\006\020\uffa4\035\uffa4\001\002\000" +
    "\006\047\367\052\022\001\002\000\006\020\uffaa\035\uffaa" +
    "\001\002\000\006\047\367\052\022\001\002\000\006\020" +
    "\uffa8\035\uffa8\001\002\000\006\047\367\052\022\001\002" +
    "\000\006\020\uffac\035\uffac\001\002\000\006\020\uffa5\035" +
    "\uffa5\001\002\000\006\047\367\052\022\001\002\000\006" +
    "\020\uffab\035\uffab\001\002\000\006\020\uffa3\035\uffa3\001" +
    "\002\000\004\020\uffe2\001\002\000\006\047\123\052\022" +
    "\001\002\000\004\020\uffe9\001\002\000\004\020\uffe1\001" +
    "\002\000\004\045\u011d\001\002\000\004\046\u011e\001\002" +
    "\000\006\014\u0120\026\u011f\001\002\000\004\046\u0152\001" +
    "\002\000\004\046\u0121\001\002\000\016\005\156\027\u0122" +
    "\040\157\045\166\051\161\053\163\001\002\000\004\046" +
    "\u0149\001\002\000\004\046\u0142\001\002\000\004\022\u0125" +
    "\001\002\000\004\046\u0126\001\002\000\016\005\156\027" +
    "\160\040\157\045\166\051\161\053\163\001\002\000\006" +
    "\047\u012a\052\022\001\002\000\006\047\u012a\052\022\001" +
    "\002\000\004\023\u0140\001\002\000\030\011\uffdd\023\uffdd" +
    "\025\uffdd\030\uffdd\031\uffdd\034\uffdd\045\uffdd\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\024\011\141\023\uff7a" +
    "\025\014\030\143\031\136\034\137\045\146\047\u012a\052" +
    "\022\001\002\000\006\047\u012a\052\022\001\002\000\012" +
    "\046\010\047\uffdd\050\006\052\uffdd\001\002\000\012\046" +
    "\010\047\uffdd\050\006\052\uffdd\001\002\000\012\046\010" +
    "\047\uffdd\050\006\052\uffdd\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\006\047\u012a\052\022" +
    "\001\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001" +
    "\002\000\004\023\uff79\001\002\000\006\047\u012a\052\022" +
    "\001\002\000\004\023\uff7c\001\002\000\004\023\uff77\001" +
    "\002\000\006\047\u012a\052\022\001\002\000\004\023\uff7d" +
    "\001\002\000\006\047\u012a\052\022\001\002\000\004\023" +
    "\uff7b\001\002\000\006\047\u012a\052\022\001\002\000\004" +
    "\023\uff7f\001\002\000\006\047\u012a\052\022\001\002\000" +
    "\004\023\uff7e\001\002\000\004\023\uff78\001\002\000\012" +
    "\046\uff8a\047\uff8a\050\uff8a\052\uff8a\001\002\000\004\023" +
    "\uff76\001\002\000\010\022\uffc0\043\u0143\044\u0144\001\002" +
    "\000\004\046\u0147\001\002\000\004\046\u0145\001\002\000" +
    "\016\005\156\027\u0122\040\157\045\166\051\161\053\163" +
    "\001\002\000\004\022\uffc1\001\002\000\016\005\156\027" +
    "\u0122\040\157\045\166\051\161\053\163\001\002\000\004" +
    "\022\uffc2\001\002\000\014\005\156\040\157\045\166\051" +
    "\161\053\163\001\002\000\004\046\u014b\001\002\000\010" +
    "\022\uffbd\043\u014c\044\u014d\001\002\000\004\046\u0150\001" +
    "\002\000\004\046\u014e\001\002\000\016\005\156\027\u0122" +
    "\040\157\045\166\051\161\053\163\001\002\000\004\022" +
    "\uffbe\001\002\000\016\005\156\027\u0122\040\157\045\166" +
    "\051\161\053\163\001\002\000\004\022\uffbf\001\002\000" +
    "\006\037\057\045\056\001\002\000\004\046\u0154\001\002" +
    "\000\004\014\u0155\001\002\000\004\046\u0156\001\002\000" +
    "\016\005\156\027\u0122\040\157\045\166\051\161\053\163" +
    "\001\002\000\004\022\u0158\001\002\000\004\046\u0159\001" +
    "\002\000\016\005\156\027\160\040\157\045\166\051\161" +
    "\053\163\001\002\000\006\047\u012a\052\022\001\002\000" +
    "\004\023\u015c\001\002\000\012\046\uff89\047\uff89\050\uff89" +
    "\052\uff89\001\002\000\006\047\123\052\022\001\002\000" +
    "\004\020\uffe6\001\002\000\004\020\uffe0\001\002\000\006" +
    "\047\u0161\052\022\001\002\000\030\011\uffdd\020\uffdd\025" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\045\uffdd\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\004\020\u0163\001\002\000" +
    "\004\046\u0164\001\002\000\004\015\u0165\001\002\000\012" +
    "\002\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\024\011" +
    "\141\020\uffee\025\014\030\u016d\031\u0168\032\u016f\045\146" +
    "\047\u0161\052\022\001\002\000\012\046\010\047\uffdd\050" +
    "\006\052\uffdd\001\002\000\004\046\u01c7\001\002\000\012" +
    "\046\010\047\uffdd\050\006\052\uffdd\001\002\000\006\047" +
    "\u0161\052\022\001\002\000\012\046\010\047\uffdd\050\006" +
    "\052\uffdd\001\002\000\012\046\010\047\uffdd\050\006\052" +
    "\uffdd\001\002\000\004\046\u01a3\001\002\000\012\046\010" +
    "\047\uffdd\050\006\052\uffdd\001\002\000\004\046\u0174\001" +
    "\002\000\004\020\uffed\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\047\u0161\052\022\001" +
    "\002\000\004\020\ufff0\001\002\000\004\045\u0175\001\002" +
    "\000\004\046\u0176\001\002\000\006\014\u0178\026\u0177\001" +
    "\002\000\004\046\u0196\001\002\000\004\046\u0179\001\002" +
    "\000\016\005\156\027\u0122\040\157\045\166\051\161\053" +
    "\163\001\002\000\004\022\u017b\001\002\000\004\046\u017c" +
    "\001\002\000\016\005\156\027\160\040\157\045\166\051" +
    "\161\053\163\001\002\000\006\047\u017e\052\022\001\002" +
    "\000\026\011\uffdd\023\uffdd\025\uffdd\030\uffdd\031\uffdd\045" +
    "\uffdd\046\010\047\uffdd\050\006\052\uffdd\001\002\000\006" +
    "\047\u017e\052\022\001\002\000\004\023\u0181\001\002\000" +
    "\012\046\uff8c\047\uff8c\050\uff8c\052\uff8c\001\002\000\004" +
    "\023\uff80\001\002\000\022\011\141\023\uff83\025\014\030" +
    "\u016d\031\u0168\045\146\047\u017e\052\022\001\002\000\012" +
    "\046\010\047\uffdd\050\006\052\uffdd\001\002\000\006\047" +
    "\u017e\052\022\001\002\000\012\046\010\047\uffdd\050\006" +
    "\052\uffdd\001\002\000\004\023\uff82\001\002\000\012\046" +
    "\010\047\uffdd\050\006\052\uffdd\001\002\000\012\046\010" +
    "\047\uffdd\050\006\052\uffdd\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\006\047\u017e\052\022" +
    "\001\002\000\004\023\uff85\001\002\000\006\047\u017e\052" +
    "\022\001\002\000\004\023\uff86\001\002\000\006\047\u017e" +
    "\052\022\001\002\000\004\023\uff88\001\002\000\006\047" +
    "\u017e\052\022\001\002\000\004\023\uff84\001\002\000\004" +
    "\023\uff81\001\002\000\006\047\u017e\052\022\001\002\000" +
    "\004\023\uff87\001\002\000\006\037\057\045\056\001\002" +
    "\000\004\046\u0198\001\002\000\004\014\u0199\001\002\000" +
    "\004\046\u019a\001\002\000\016\005\156\027\u0122\040\157" +
    "\045\166\051\161\053\163\001\002\000\004\022\u019c\001" +
    "\002\000\004\046\u019d\001\002\000\016\005\156\027\160" +
    "\040\157\045\166\051\161\053\163\001\002\000\006\047" +
    "\u017e\052\022\001\002\000\004\023\u01a0\001\002\000\012" +
    "\046\uff8b\047\uff8b\050\uff8b\052\uff8b\001\002\000\006\047" +
    "\u0161\052\022\001\002\000\004\020\ufff1\001\002\000\004" +
    "\033\u01a4\001\002\000\004\046\u01a5\001\002\000\016\005" +
    "\246\027\245\040\244\045\243\051\242\053\237\001\002" +
    "\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\006\047\u01a9\052\022\001\002\000\006\047\u01a9\052\022" +
    "\001\002\000\026\011\uffdd\024\uffdd\025\uffdd\031\uffdd\032" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\004\024\u01ab\001\002\000\012\046\uff75\047\uff75\050" +
    "\uff75\052\uff75\001\002\000\022\011\141\024\uff6e\025\014" +
    "\031\u0168\032\u016f\045\146\047\u01a9\052\022\001\002\000" +
    "\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000\004" +
    "\024\uff6d\001\002\000\012\046\010\047\uffdd\050\006\052" +
    "\uffdd\001\002\000\006\047\u01a9\052\022\001\002\000\012" +
    "\046\010\047\uffdd\050\006\052\uffdd\001\002\000\012\046" +
    "\010\047\uffdd\050\006\052\uffdd\001\002\000\012\046\010" +
    "\047\uffdd\050\006\052\uffdd\001\002\000\006\047\u01a9\052" +
    "\022\001\002\000\004\024\uff70\001\002\000\006\047\u01a9" +
    "\052\022\001\002\000\004\024\uff71\001\002\000\006\047" +
    "\u01a9\052\022\001\002\000\004\024\uff73\001\002\000\004" +
    "\024\uff6c\001\002\000\006\047\u01a9\052\022\001\002\000" +
    "\004\024\uff72\001\002\000\006\047\u01a9\052\022\001\002" +
    "\000\004\024\uff6f\001\002\000\004\024\uff6b\001\002\000" +
    "\006\047\u0161\052\022\001\002\000\004\020\ufff4\001\002" +
    "\000\006\047\u0161\052\022\001\002\000\004\020\uffef\001" +
    "\002\000\004\020\uffec\001\002\000\006\047\u0161\052\022" +
    "\001\002\000\004\020\ufff3\001\002\000\016\005\246\027" +
    "\245\040\244\045\243\051\242\053\237\001\002\000\004" +
    "\046\u01c9\001\002\000\004\021\u01ca\001\002\000\006\047" +
    "\u01cc\052\022\001\002\000\006\047\u01cc\052\022\001\002" +
    "\000\030\011\uffdd\020\uffdd\025\uffdd\030\uffdd\032\uffdd\035" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\006\020\u01ce\035\u01cf\001\002\000\004\046\u01d5\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\006\047\u01cc\052\022\001\002\000\004\020\u01d2\001" +
    "\002\000\004\046\u01d3\001\002\000\004\031\u01d4\001\002" +
    "\000\012\046\uffa1\047\uffa1\050\uffa1\052\uffa1\001\002\000" +
    "\004\031\u01d6\001\002\000\012\046\uffa2\047\uffa2\050\uffa2" +
    "\052\uffa2\001\002\000\024\011\141\020\uffb0\025\014\030" +
    "\u016d\032\u016f\035\uffb0\045\146\047\u01cc\052\022\001\002" +
    "\000\006\020\uffaf\035\uffaf\001\002\000\012\046\010\047" +
    "\uffdd\050\006\052\uffdd\001\002\000\006\047\u01cc\052\022" +
    "\001\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000" +
    "\012\046\010\047\uffdd\050\006\052\uffdd\001\002\000\006" +
    "\047\u01cc\052\022\001\002\000\006\020\uffb2\035\uffb2\001" +
    "\002\000\006\047\u01cc\052\022\001\002\000\006\020\uffb3" +
    "\035\uffb3\001\002\000\006\047\u01cc\052\022\001\002\000" +
    "\006\020\uffb5\035\uffb5\001\002\000\006\047\u01cc\052\022" +
    "\001\002\000\006\020\uffb1\035\uffb1\001\002\000\006\020" +
    "\uffae\035\uffae\001\002\000\006\047\u01cc\052\022\001\002" +
    "\000\006\020\uffb4\035\uffb4\001\002\000\006\020\uffad\035" +
    "\uffad\001\002\000\006\047\u0161\052\022\001\002\000\004" +
    "\020\ufff2\001\002\000\004\020\uffeb\001\002\000\006\047" +
    "\u0161\052\022\001\002\000\014\026\u01f0\046\uffdb\047\uffdb" +
    "\050\uffdb\052\uffdb\001\002\000\004\046\u01f1\001\002\000" +
    "\006\037\057\045\056\001\002\000\012\046\010\047\uffdd" +
    "\050\006\052\uffdd\001\002\000\006\047\123\052\022\001" +
    "\002\000\004\020\u01f5\001\002\000\004\046\u01f6\001\002" +
    "\000\004\015\u01f7\001\002\000\012\002\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\001\002\000\004\020\u01f9\001\002\000\004" +
    "\046\u01fa\001\002\000\004\015\u01fb\001\002\000\012\002" +
    "\uffce\046\uffce\047\uffce\050\uffce\001\002\000\004\045\u01fd" +
    "\001\002\000\004\046\u01fe\001\002\000\004\026\u01ff\001" +
    "\002\000\004\046\u0200\001\002\000\006\037\057\045\056" +
    "\001\002\000\006\006\uffd2\016\u0202\001\002\000\004\046" +
    "\u0203\001\002\000\004\036\110\001\002\000\004\006\uffd1" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufff5\047" +
    "\027\001\002\000\004\002\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\004\045\u020a\001\002\000\004\005\u020b\001" +
    "\002\000\006\006\u020c\036\110\001\002\000\012\046\010" +
    "\047\uffdd\050\006\052\uffdd\001\002\000\004\006\u020e\001" +
    "\002\000\012\046\010\047\uffdd\050\006\052\uffdd\001\002" +
    "\000\006\047\u0161\052\022\001\002\000\004\020\u0211\001" +
    "\002\000\004\046\u0212\001\002\000\004\004\u0213\001\002" +
    "\000\012\002\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000" +
    "\006\047\u0161\052\022\001\002\000\004\020\u0216\001\002" +
    "\000\004\046\u0217\001\002\000\004\004\u0218\001\002\000" +
    "\012\002\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0216\000\022\002\011\003\004\005\020\007\015\011" +
    "\014\013\016\044\022\051\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\u0207\005" +
    "\020\007\015\011\014\013\016\044\022\051\010\001\001" +
    "\000\002\001\001\000\006\005\024\006\u0205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\065\001\001\000\006\005\024\006\063\001" +
    "\001\000\006\005\024\006\061\001\001\000\002\001\001" +
    "\000\022\003\031\004\032\005\020\007\015\011\014\013" +
    "\016\044\022\051\010\001\001\000\002\001\001\000\006" +
    "\005\024\006\023\001\001\000\004\004\027\001\001\000" +
    "\006\005\024\006\025\001\001\000\002\001\001\000\020" +
    "\003\030\005\020\007\015\011\014\013\016\044\022\051" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\024\006\035\001\001\000\006\045\040\051\036\001\001" +
    "\000\006\045\060\051\036\001\001\000\006\005\024\006" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\046\046\047\051" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\050\001\001\000\006\045\051\051\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\062" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\004\004\066\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\111\001\001\000\002\001\001" +
    "\000\006\005\024\006\u01ed\001\001\000\002\001\001\000" +
    "\006\005\024\006\113\001\001\000\006\015\u0161\051\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\117\001\001\000\006\005\024\006\120\001\001\000\006" +
    "\016\123\051\121\001\001\000\006\016\u015e\051\121\001" +
    "\001\000\006\005\024\006\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\137\016\144\017\134\021\130\032\132\034\133" +
    "\041\141\047\143\050\146\051\121\001\001\000\006\005" +
    "\024\006\u015c\001\001\000\002\001\001\000\006\016\u011a" +
    "\051\121\001\001\000\006\005\024\006\u0118\001\001\000" +
    "\006\016\u0117\051\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\354\001\001\000\002\001" +
    "\001\000\006\005\024\006\342\001\001\000\002\001\001" +
    "\000\006\005\024\006\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\024\006\147\001\001\000\006" +
    "\016\150\051\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\163" +
    "\023\161\026\164\001\001\000\010\012\163\023\161\026" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\163\023\161\025\171\026" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\163\023\161\025" +
    "\175\026\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\163\023\161" +
    "\026\205\001\001\000\002\001\001\000\010\012\163\023" +
    "\161\026\207\001\001\000\002\001\001\000\006\012\163" +
    "\023\211\001\001\000\006\005\024\006\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\163\023\161\026\217\001\001\000" +
    "\002\001\001\000\010\012\163\023\161\026\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\163\023\161\026\230\001\001\000\002\001\001\000" +
    "\006\016\232\051\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\240\027\237\001" +
    "\001\000\002\001\001\000\006\005\024\006\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\240\027\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\260\001\001\000\002\001\001" +
    "\000\006\024\240\027\262\001\001\000\002\001\001\000" +
    "\006\024\240\027\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\273\001\001\000\002" +
    "\001\001\000\006\024\240\027\275\001\001\000\002\001" +
    "\001\000\004\024\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\302\001\001\000\002\001\001\000" +
    "\006\024\240\027\304\001\001\000\002\001\001\000\006" +
    "\024\240\027\306\001\001\000\002\001\001\000\006\043" +
    "\312\051\310\001\001\000\006\043\341\051\310\001\001" +
    "\000\006\005\024\006\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\321\017\322\021\320\032\316" +
    "\034\315\043\324\047\317\050\323\051\310\001\001\000" +
    "\006\005\024\006\337\001\001\000\006\043\336\051\310" +
    "\001\001\000\006\005\024\006\334\001\001\000\006\005" +
    "\024\006\332\001\001\000\006\005\024\006\330\001\001" +
    "\000\006\043\327\051\310\001\001\000\006\005\024\006" +
    "\325\001\001\000\002\001\001\000\006\043\326\051\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\043" +
    "\331\051\310\001\001\000\002\001\001\000\006\043\333" +
    "\051\310\001\001\000\002\001\001\000\006\043\335\051" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\340\051\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\343\051\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\163\023\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\355\051\121\001\001\000\002\001\001\000\010\012\163" +
    "\023\161\026\357\001\001\000\002\001\001\000\006\024" +
    "\240\027\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\024\006\364\001\001\000\006\031\367\051" +
    "\365\001\001\000\006\031\u0116\051\365\001\001\000\006" +
    "\005\024\006\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\024\006\372\001\001\000\006\031\373" +
    "\051\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\u0106\017\u0107\031\u0109\032\u0103\034" +
    "\u0102\041\u0105\047\u0104\050\u0108\051\365\001\001\000\006" +
    "\005\024\006\u0114\001\001\000\006\031\u0113\051\365\001" +
    "\001\000\006\005\024\006\u0111\001\001\000\006\005\024" +
    "\006\u010f\001\001\000\006\005\024\006\u010d\001\001\000" +
    "\006\031\u010c\051\365\001\001\000\006\005\024\006\u010a" +
    "\001\001\000\002\001\001\000\006\031\u010b\051\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u010e" +
    "\051\365\001\001\000\002\001\001\000\006\031\u0110\051" +
    "\365\001\001\000\002\001\001\000\006\031\u0112\051\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u0115\051\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0119\051\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\u0122\037\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\161\026\u0126\001\001\000\006" +
    "\036\u0128\051\u0127\001\001\000\006\036\u0140\051\u0127\001" +
    "\001\000\002\001\001\000\006\005\024\006\u012a\001\001" +
    "\000\024\007\u012f\017\u0130\021\u012c\032\u012b\036\u0132\041" +
    "\u012e\047\u012d\050\u0131\051\u0127\001\001\000\006\036\u013e" +
    "\051\u0127\001\001\000\006\005\024\006\u013c\001\001\000" +
    "\006\005\024\006\u013a\001\001\000\006\005\024\006\u0138" +
    "\001\001\000\006\005\024\006\u0136\001\001\000\006\036" +
    "\u0135\051\u0127\001\001\000\006\005\024\006\u0133\001\001" +
    "\000\002\001\001\000\006\036\u0134\051\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u0137\051\u0127" +
    "\001\001\000\002\001\001\000\006\036\u0139\051\u0127\001" +
    "\001\000\002\001\001\000\006\036\u013b\051\u0127\001\001" +
    "\000\002\001\001\000\006\036\u013d\051\u0127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\u0122\037\u0145\001\001\000\002" +
    "\001\001\000\010\012\163\023\u0122\037\u0147\001\001\000" +
    "\002\001\001\000\006\012\163\023\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\u0122\037\u014e\001\001\000\002" +
    "\001\001\000\010\012\163\023\u0122\037\u0150\001\001\000" +
    "\002\001\001\000\004\022\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\163\023" +
    "\u0122\037\u0156\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\163\023\161\026\u0159\001\001\000\006\036" +
    "\u015a\051\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\u015d\051\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01ec\051\u015f\001\001\000\006" +
    "\005\024\006\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\u016d" +
    "\015\u016f\020\u0168\032\u0169\033\u0166\040\u016a\047\u016b\050" +
    "\u0170\051\u015f\001\001\000\006\005\024\006\u01ea\001\001" +
    "\000\002\001\001\000\006\005\024\006\u01c4\001\001\000" +
    "\006\015\u01c3\051\u015f\001\001\000\006\005\024\006\u01c1" +
    "\001\001\000\006\005\024\006\u01bf\001\001\000\002\001" +
    "\001\000\006\005\024\006\u01a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\u0171\001\001\000" +
    "\006\015\u0172\051\u015f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\163\023\u0122\037\u0179" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\163\023\161\026\u017c\001\001\000\006\035\u017f\051\u017e" +
    "\001\001\000\006\005\024\006\u0182\001\001\000\006\035" +
    "\u0181\051\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\u0188\020\u0183\032\u0184\035" +
    "\u0186\040\u0185\047\u0187\050\u0189\051\u017e\001\001\000\006" +
    "\005\024\006\u0193\001\001\000\006\035\u0192\051\u017e\001" +
    "\001\000\006\005\024\006\u0190\001\001\000\002\001\001" +
    "\000\006\005\024\006\u018e\001\001\000\006\005\024\006" +
    "\u018c\001\001\000\006\005\024\006\u018a\001\001\000\006" +
    "\035\u018b\051\u017e\001\001\000\002\001\001\000\006\035" +
    "\u018d\051\u017e\001\001\000\002\001\001\000\006\035\u018f" +
    "\051\u017e\001\001\000\002\001\001\000\006\035\u0191\051" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\u0194\051\u017e\001\001\000\002\001\001\000\004\022" +
    "\u0196\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\163\023\u0122\037\u019a\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\163\023\161" +
    "\026\u019d\001\001\000\006\035\u019e\051\u017e\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u01a1\051\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\240\027\u01a5\001\001\000\006\005\024" +
    "\006\u01a6\001\001\000\006\042\u01a9\051\u01a7\001\001\000" +
    "\006\042\u01be\051\u01a7\001\001\000\006\005\024\006\u01ab" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\u01b1\020\u01ae\032\u01af\033\u01ac\042\u01ad\047\u01b0\050\u01b2" +
    "\051\u01a7\001\001\000\006\005\024\006\u01bc\001\001\000" +
    "\002\001\001\000\006\005\024\006\u01ba\001\001\000\006" +
    "\042\u01b9\051\u01a7\001\001\000\006\005\024\006\u01b7\001" +
    "\001\000\006\005\024\006\u01b5\001\001\000\006\005\024" +
    "\006\u01b3\001\001\000\006\042\u01b4\051\u01a7\001\001\000" +
    "\002\001\001\000\006\042\u01b6\051\u01a7\001\001\000\002" +
    "\001\001\000\006\042\u01b8\051\u01a7\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\u01bb\051\u01a7\001\001" +
    "\000\002\001\001\000\006\042\u01bd\051\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u01c0\051\u015f" +
    "\001\001\000\002\001\001\000\006\015\u01c2\051\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u01c5" +
    "\051\u015f\001\001\000\002\001\001\000\006\024\240\027" +
    "\u01c7\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\u01cc\051\u01ca\001\001\000\006\030\u01e9\051\u01ca\001" +
    "\001\000\006\005\024\006\u01d6\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\u01cf\001\001\000" +
    "\006\030\u01d0\051\u01ca\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\u01dc\030\u01d7\032\u01d9" +
    "\033\u01d8\040\u01da\047\u01db\050\u01dd\051\u01ca\001\001\000" +
    "\002\001\001\000\006\005\024\006\u01e7\001\001\000\006" +
    "\030\u01e6\051\u01ca\001\001\000\006\005\024\006\u01e4\001" +
    "\001\000\006\005\024\006\u01e2\001\001\000\006\005\024" +
    "\006\u01e0\001\001\000\006\005\024\006\u01de\001\001\000" +
    "\006\030\u01df\051\u01ca\001\001\000\002\001\001\000\006" +
    "\030\u01e1\051\u01ca\001\001\000\002\001\001\000\006\030" +
    "\u01e3\051\u01ca\001\001\000\002\001\001\000\006\030\u01e5" +
    "\051\u01ca\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\u01e8\051\u01ca\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\u01eb\051\u015f\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\u01f7\051\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u01f1\001" +
    "\001\000\006\005\024\006\u01f2\001\001\000\006\016\u01f3" +
    "\051\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0200\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u020c\001\001\000\006\005\024\006\u0213\001\001\000" +
    "\002\001\001\000\006\005\024\006\u020e\001\001\000\006" +
    "\015\u020f\051\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u0214" +
    "\051\u015f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     /*
     public void syntax_error(Symbol s){
 	System.out.print(s);
     }
    
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
         System.out.print(s);
     }
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= tipovar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS coma espacio LISTA_PARAMENTROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGUMENTOS ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= VALORES INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= not espacio VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= not espacio VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP_FOR ::= VALORES espacio opsum espacio EXP_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP_FOR ::= VALORES espacio opmult espacio EXP_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP_FOR ::= VALORES espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP_FOR ::= not espacio VALORES espacio opsum espacio EXP_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP_FOR ::= not espacio VALORES espacio opmult espacio EXP_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP_FOR ::= not espacio VALORES espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_FOR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALORES_CONDICIONALES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORES_CONDICIONALES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALORES_CONDICIONALES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALORES_CONDICIONALES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALORES_CONDICIONALES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALORES_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BLOQUE_ASIGNACION ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQUE_FOR ::= For espacio identificador espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQUE_FOR ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE_FUNCTION loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis VALORES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

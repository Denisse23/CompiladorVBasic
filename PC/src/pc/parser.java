
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\004\004\000\002\004\003\000\002\004\002\000\002" +
    "\017\007\000\002\017\007\000\002\017\007\000\002\017" +
    "\007\000\002\017\007\000\002\017\004\000\002\017\005" +
    "\000\002\017\006\000\002\020\007\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\004\000\002\020\005\000\002\020\006\000\002\020" +
    "\006\000\002\021\005\000\002\006\004\000\002\006\002" +
    "\000\002\005\003\000\002\005\003\000\002\007\006\000" +
    "\002\010\006\000\002\010\002\000\002\011\007\000\002" +
    "\024\003\000\002\024\003\000\002\014\014\000\002\014" +
    "\015\000\002\015\006\000\002\016\010\000\002\016\002" +
    "\000\002\012\020\000\002\012\021\000\002\012\014\000" +
    "\002\012\015\000\002\013\006\000\002\013\005\000\002" +
    "\027\004\000\002\030\006\000\002\030\002\000\002\031" +
    "\007\000\002\031\007\000\002\031\004\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\005\000\002\025\005\000\002\025\003\000\002" +
    "\034\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\004\000\002\034\005\000\002\034\006" +
    "\000\002\035\007\000\002\035\007\000\002\035\007\000" +
    "\002\035\007\000\002\035\004\000\002\035\005\000\002" +
    "\035\006\000\002\035\006\000\002\022\014\000\002\022" +
    "\017\000\002\023\014\000\002\023\017\000\002\032\010" +
    "\000\002\032\010\000\002\032\012\000\002\032\012\000" +
    "\002\032\014\000\002\033\010\000\002\033\011\000\002" +
    "\033\013\000\002\033\013\000\002\033\015\000\002\033" +
    "\002\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\026\005\000" +
    "\002\036\007\000\002\036\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\016\004\004\016\013\026\014\047\011\050" +
    "\007\051\010\001\002\000\004\047\u0133\001\002\000\004" +
    "\002\001\001\002\000\012\002\uffe2\047\011\050\uffe2\051" +
    "\010\001\002\000\014\004\004\016\013\026\014\047\011" +
    "\051\010\001\002\000\036\002\uffe0\004\uffe0\006\uffe0\016" +
    "\uffe0\017\uffe0\021\uffe0\026\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000\036\002" +
    "\uffe1\004\uffe1\006\uffe1\016\uffe1\017\uffe1\021\uffe1\026\uffe1" +
    "\032\uffe1\035\uffe1\036\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\001\002\000\004\002\u012f\001\002\000\004\047\053" +
    "\001\002\000\004\047\035\001\002\000\012\002\uffe2\047" +
    "\011\050\uffe2\051\010\001\002\000\012\002\uffe2\047\011" +
    "\050\uffe2\051\010\001\002\000\012\002\uffe2\047\011\050" +
    "\uffe2\051\010\001\002\000\020\002\ufff6\004\004\016\013" +
    "\026\014\047\011\050\022\051\010\001\002\000\004\002" +
    "\ufffe\001\002\000\016\002\ufff7\004\004\016\013\026\014" +
    "\047\011\051\010\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufff8\001\002\000\006\002\ufff6\050\022\001\002" +
    "\000\032\002\uffe2\006\uffe2\017\uffe2\021\uffe2\026\uffe2\032" +
    "\uffe2\035\uffe2\036\uffe2\046\uffe2\047\011\050\uffe2\051\010" +
    "\001\002\000\026\002\uffe3\006\uffe3\017\uffe3\021\uffe3\026" +
    "\uffe3\032\uffe3\035\uffe3\036\uffe3\046\uffe3\050\uffe3\001\002" +
    "\000\004\002\ufffc\001\002\000\006\002\ufff6\050\022\001" +
    "\002\000\004\002\ufff9\001\002\000\006\002\ufff6\050\022" +
    "\001\002\000\004\002\ufffb\001\002\000\004\046\036\001" +
    "\002\000\004\047\045\001\002\000\014\002\uffdd\017\040" +
    "\047\uffdd\050\uffdd\051\uffdd\001\002\000\004\047\042\001" +
    "\002\000\012\002\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\004\046\036\001\002\000\014\002\uffdd\017\040\047" +
    "\uffdd\050\uffdd\051\uffdd\001\002\000\012\002\uffde\047\uffde" +
    "\050\uffde\051\uffde\001\002\000\004\027\046\001\002\000" +
    "\004\047\047\001\002\000\006\040\052\046\050\001\002" +
    "\000\016\002\uffda\006\uffda\017\uffda\047\uffda\050\uffda\051" +
    "\uffda\001\002\000\016\002\uffdc\006\uffdc\017\uffdc\047\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\016\002\uffdb\006\uffdb\017" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000\004\046\054" +
    "\001\002\000\004\005\055\001\002\000\006\006\057\037" +
    "\056\001\002\000\004\047\u0126\001\002\000\010\047\u0119" +
    "\050\uffe2\051\010\001\002\000\004\006\061\001\002\000" +
    "\010\047\063\050\uffe2\051\010\001\002\000\004\050\337" +
    "\001\002\000\012\027\064\047\uffe1\050\uffe1\051\uffe1\001" +
    "\002\000\004\047\065\001\002\000\006\040\052\046\050" +
    "\001\002\000\010\047\011\050\uffe2\051\010\001\002\000" +
    "\004\050\070\001\002\000\022\021\uffe2\026\uffe2\032\uffe2" +
    "\035\uffe2\046\uffe2\047\011\050\uffe2\051\010\001\002\000" +
    "\004\021\072\001\002\000\004\047\073\001\002\000\004" +
    "\016\074\001\002\000\012\002\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\001\002\000\016\021\uffe8\026\014\032\100\035\077" +
    "\046\110\050\070\001\002\000\010\047\011\050\uffe2\051" +
    "\010\001\002\000\004\047\333\001\002\000\004\047\172" +
    "\001\002\000\010\047\011\050\uffe2\051\010\001\002\000" +
    "\010\047\011\050\uffe2\051\010\001\002\000\004\021\uffe7" +
    "\001\002\000\010\047\011\050\uffe2\051\010\001\002\000" +
    "\004\050\070\001\002\000\010\047\011\050\uffe2\051\010" +
    "\001\002\000\004\050\070\001\002\000\006\013\111\047" +
    "\112\001\002\000\004\046\153\001\002\000\004\015\113" +
    "\001\002\000\004\047\114\001\002\000\014\005\123\041" +
    "\121\046\120\052\116\054\115\001\002\000\014\006\uffc6" +
    "\017\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\014\006" +
    "\uffc5\017\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\014" +
    "\006\uffe2\017\uffe2\047\144\050\uffe2\051\010\001\002\000" +
    "\020\005\130\006\uffc8\013\127\017\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\001\002\000\014\006\uffc7\017\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\001\002\000\004\050\uff9d\001\002\000\014" +
    "\005\123\041\121\046\120\052\116\054\115\001\002\000" +
    "\014\006\uffc2\017\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002" +
    "\000\004\006\126\001\002\000\014\006\uffc3\017\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\001\002\000\004\046\142\001\002" +
    "\000\016\005\123\006\131\041\121\046\120\052\116\054" +
    "\115\001\002\000\014\006\uffcf\017\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\001\002\000\004\006\141\001\002\000\006\006" +
    "\uffcc\017\135\001\002\000\004\006\uffce\001\002\000\004" +
    "\047\136\001\002\000\014\005\123\041\121\046\120\052" +
    "\116\054\115\001\002\000\006\006\uffcc\017\135\001\002" +
    "\000\004\006\uffcd\001\002\000\014\006\uffd0\017\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\001\002\000\014\006\uffc4\017\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\001\002\000\010\006\uffc9\017" +
    "\uffc9\050\uffc9\001\002\000\014\044\145\045\146\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\004\047\151\001\002\000" +
    "\004\047\147\001\002\000\014\005\123\041\121\046\120" +
    "\052\116\054\115\001\002\000\010\006\uffca\017\uffca\050" +
    "\uffca\001\002\000\014\005\123\041\121\046\120\052\116" +
    "\054\115\001\002\000\010\006\uffcb\017\uffcb\050\uffcb\001" +
    "\002\000\004\047\154\001\002\000\004\015\155\001\002" +
    "\000\004\047\156\001\002\000\014\005\123\041\121\046" +
    "\120\052\116\054\115\001\002\000\004\050\uff9c\001\002" +
    "\000\004\021\uffe5\001\002\000\004\050\070\001\002\000" +
    "\004\021\uffeb\001\002\000\004\021\uffe6\001\002\000\004" +
    "\050\070\001\002\000\004\021\uffed\001\002\000\004\050" +
    "\070\001\002\000\004\021\uffea\001\002\000\004\050\070" +
    "\001\002\000\004\021\uffe9\001\002\000\016\005\202\030" +
    "\201\041\200\046\177\052\175\054\173\001\002\000\010" +
    "\006\uffa1\042\uffa1\047\uffa1\001\002\000\004\047\273\001" +
    "\002\000\010\006\uffa0\042\uffa0\047\uffa0\001\002\000\004" +
    "\047\256\001\002\000\012\006\uffa3\013\254\042\uffa3\047" +
    "\uffa3\001\002\000\010\006\uffa2\042\uffa2\047\uffa2\001\002" +
    "\000\004\047\205\001\002\000\016\005\202\030\201\041" +
    "\200\046\177\052\175\054\173\001\002\000\004\006\204" +
    "\001\002\000\010\006\uff9e\042\uff9e\047\uff9e\001\002\000" +
    "\014\005\202\041\200\046\177\052\175\054\173\001\002" +
    "\000\004\047\207\001\002\000\004\043\210\001\002\000" +
    "\004\047\211\001\002\000\016\005\202\030\213\041\200" +
    "\046\177\052\175\054\173\001\002\000\010\006\uffa4\042" +
    "\217\047\uffa4\001\002\000\004\047\214\001\002\000\014" +
    "\005\202\041\200\046\177\052\175\054\173\001\002\000" +
    "\010\006\uffa4\042\217\047\uffa4\001\002\000\006\006\uffaa" +
    "\047\uffaa\001\002\000\020\005\202\030\222\041\200\046" +
    "\177\047\221\052\175\054\173\001\002\000\004\047\242" +
    "\001\002\000\004\043\236\001\002\000\004\047\223\001" +
    "\002\000\014\005\202\041\200\046\177\052\175\054\173" +
    "\001\002\000\004\047\225\001\002\000\004\015\226\001" +
    "\002\000\004\047\227\001\002\000\016\005\202\030\231" +
    "\041\200\046\177\052\175\054\173\001\002\000\010\006" +
    "\uffa4\042\217\047\uffa4\001\002\000\004\047\232\001\002" +
    "\000\014\005\202\041\200\046\177\052\175\054\173\001" +
    "\002\000\010\006\uffa4\042\217\047\uffa4\001\002\000\006" +
    "\006\uffa5\047\uffa5\001\002\000\006\006\uffa7\047\uffa7\001" +
    "\002\000\004\047\237\001\002\000\014\005\202\041\200" +
    "\046\177\052\175\054\173\001\002\000\010\006\uffa4\042" +
    "\217\047\uffa4\001\002\000\006\006\uffa9\047\uffa9\001\002" +
    "\000\004\015\243\001\002\000\004\047\244\001\002\000" +
    "\016\005\202\030\246\041\200\046\177\052\175\054\173" +
    "\001\002\000\010\006\uffa4\042\217\047\uffa4\001\002\000" +
    "\004\047\247\001\002\000\014\005\202\041\200\046\177" +
    "\052\175\054\173\001\002\000\010\006\uffa4\042\217\047" +
    "\uffa4\001\002\000\006\006\uffa6\047\uffa6\001\002\000\006" +
    "\006\uffa8\047\uffa8\001\002\000\006\006\uffac\047\uffac\001" +
    "\002\000\004\046\255\001\002\000\010\006\uff9f\042\uff9f" +
    "\047\uff9f\001\002\000\006\015\260\043\257\001\002\000" +
    "\004\047\264\001\002\000\004\047\261\001\002\000\014" +
    "\005\202\041\200\046\177\052\175\054\173\001\002\000" +
    "\010\006\uffa4\042\217\047\uffa4\001\002\000\006\006\uffad" +
    "\047\uffad\001\002\000\016\005\202\030\266\041\200\046" +
    "\177\052\175\054\173\001\002\000\010\006\uffa4\042\217" +
    "\047\uffa4\001\002\000\004\047\267\001\002\000\014\005" +
    "\202\041\200\046\177\052\175\054\173\001\002\000\010" +
    "\006\uffa4\042\217\047\uffa4\001\002\000\006\006\uffab\047" +
    "\uffab\001\002\000\006\006\uffae\047\uffae\001\002\000\004" +
    "\022\274\001\002\000\010\047\011\050\uffe2\051\010\001" +
    "\002\000\004\050\276\001\002\000\022\021\uffe2\026\uffe2" +
    "\035\uffe2\036\uffe2\046\uffe2\047\011\050\uffe2\051\010\001" +
    "\002\000\006\021\300\036\301\001\002\000\004\047\307" +
    "\001\002\000\010\047\011\050\uffe2\051\010\001\002\000" +
    "\004\050\276\001\002\000\004\021\304\001\002\000\004" +
    "\047\305\001\002\000\004\032\306\001\002\000\010\047" +
    "\uffaf\050\uffaf\051\uffaf\001\002\000\004\032\310\001\002" +
    "\000\010\047\uffb0\050\uffb0\051\uffb0\001\002\000\016\021" +
    "\uffb6\026\014\035\077\036\uffb6\046\110\050\276\001\002" +
    "\000\010\047\011\050\uffe2\051\010\001\002\000\010\047" +
    "\011\050\uffe2\051\010\001\002\000\010\047\011\050\uffe2" +
    "\051\010\001\002\000\004\050\276\001\002\000\004\050" +
    "\276\001\002\000\010\047\011\050\uffe2\051\010\001\002" +
    "\000\006\021\uffb5\036\uffb5\001\002\000\004\050\276\001" +
    "\002\000\006\021\uffba\036\uffba\001\002\000\006\021\uffb4" +
    "\036\uffb4\001\002\000\006\021\uffb3\036\uffb3\001\002\000" +
    "\004\050\276\001\002\000\006\021\uffb8\036\uffb8\001\002" +
    "\000\004\050\276\001\002\000\006\021\uffb7\036\uffb7\001" +
    "\002\000\004\050\276\001\002\000\006\021\uffb9\036\uffb9" +
    "\001\002\000\014\005\123\041\121\046\120\052\116\054" +
    "\115\001\002\000\004\050\uffe4\001\002\000\004\050\070" +
    "\001\002\000\004\021\uffec\001\002\000\020\021\uffe2\026" +
    "\uffe2\032\uffe2\046\uffe2\047\011\050\uffe2\051\010\001\002" +
    "\000\004\021\341\001\002\000\004\047\342\001\002\000" +
    "\004\016\343\001\002\000\012\002\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\001\002\000\014\021\ufff0\026\014\032\346\046" +
    "\110\050\337\001\002\000\010\047\011\050\uffe2\051\010" +
    "\001\002\000\004\047\366\001\002\000\010\047\011\050" +
    "\uffe2\051\010\001\002\000\010\047\011\050\uffe2\051\010" +
    "\001\002\000\010\047\011\050\uffe2\051\010\001\002\000" +
    "\010\047\011\050\uffe2\051\010\001\002\000\004\050\337" +
    "\001\002\000\004\021\uffef\001\002\000\004\021\uffee\001" +
    "\002\000\004\050\337\001\002\000\004\021\ufff5\001\002" +
    "\000\004\050\337\001\002\000\004\021\ufff2\001\002\000" +
    "\004\050\337\001\002\000\004\021\ufff1\001\002\000\004" +
    "\050\337\001\002\000\004\021\ufff4\001\002\000\016\005" +
    "\202\030\201\041\200\046\177\052\175\054\173\001\002" +
    "\000\004\047\370\001\002\000\004\022\371\001\002\000" +
    "\010\047\011\050\uffe2\051\010\001\002\000\004\050\373" +
    "\001\002\000\020\021\uffe2\026\uffe2\036\uffe2\046\uffe2\047" +
    "\011\050\uffe2\051\010\001\002\000\006\021\375\036\376" +
    "\001\002\000\004\047\u0104\001\002\000\010\047\011\050" +
    "\uffe2\051\010\001\002\000\004\050\373\001\002\000\004" +
    "\021\u0101\001\002\000\004\047\u0102\001\002\000\004\032" +
    "\u0103\001\002\000\010\047\uffb1\050\uffb1\051\uffb1\001\002" +
    "\000\004\032\u0105\001\002\000\010\047\uffb2\050\uffb2\051" +
    "\uffb2\001\002\000\014\021\uffbd\026\014\036\uffbd\046\110" +
    "\050\373\001\002\000\006\021\uffbc\036\uffbc\001\002\000" +
    "\010\047\011\050\uffe2\051\010\001\002\000\010\047\011" +
    "\050\uffe2\051\010\001\002\000\010\047\011\050\uffe2\051" +
    "\010\001\002\000\004\050\373\001\002\000\010\047\011" +
    "\050\uffe2\051\010\001\002\000\004\050\373\001\002\000" +
    "\006\021\uffc1\036\uffc1\001\002\000\006\021\uffbb\036\uffbb" +
    "\001\002\000\004\050\373\001\002\000\006\021\uffbf\036" +
    "\uffbf\001\002\000\004\050\373\001\002\000\006\021\uffbe" +
    "\036\uffbe\001\002\000\004\050\373\001\002\000\006\021" +
    "\uffc0\036\uffc0\001\002\000\004\050\337\001\002\000\004" +
    "\021\ufff3\001\002\000\004\050\337\001\002\000\012\027" +
    "\u011a\047\uffe1\050\uffe1\051\uffe1\001\002\000\004\047\u011b" +
    "\001\002\000\006\040\052\046\050\001\002\000\010\047" +
    "\011\050\uffe2\051\010\001\002\000\004\050\070\001\002" +
    "\000\004\021\u011f\001\002\000\004\047\u0120\001\002\000" +
    "\004\016\u0121\001\002\000\012\002\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\001\002\000\004\021\u0123\001\002\000\004\047" +
    "\u0124\001\002\000\004\016\u0125\001\002\000\012\002\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\001\002\000\004\046\036\001" +
    "\002\000\006\006\uffd5\017\u0129\001\002\000\004\006\uffd7" +
    "\001\002\000\004\047\u012a\001\002\000\004\037\u012b\001" +
    "\002\000\004\047\u012c\001\002\000\004\046\036\001\002" +
    "\000\006\006\uffd5\017\u0129\001\002\000\004\006\uffd6\001" +
    "\002\000\004\002\000\001\002\000\004\002\uffff\001\002" +
    "\000\006\002\ufff6\050\022\001\002\000\004\002\ufffa\001" +
    "\002\000\004\046\u0134\001\002\000\004\005\u0135\001\002" +
    "\000\006\006\u0136\037\056\001\002\000\010\047\011\050" +
    "\uffe2\051\010\001\002\000\004\006\u0138\001\002\000\010" +
    "\047\011\050\uffe2\051\010\001\002\000\004\050\337\001" +
    "\002\000\004\021\u013b\001\002\000\004\047\u013c\001\002" +
    "\000\004\004\u013d\001\002\000\012\002\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\001\002\000\004\050\337\001\002\000\004" +
    "\021\u0140\001\002\000\004\047\u0141\001\002\000\004\004" +
    "\u0142\001\002\000\012\002\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\020\002\011\003\004\005\017\007\015\012" +
    "\014\014\016\037\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\025\006\u0130\001\001\000\016\003" +
    "\u012f\005\017\007\015\012\014\014\016\037\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\025\006\032" +
    "\001\001\000\006\005\025\006\030\001\001\000\006\005" +
    "\025\006\024\001\001\000\020\003\020\004\022\005\017" +
    "\007\015\012\014\014\016\037\005\001\001\000\002\001" +
    "\001\000\016\003\023\005\017\007\015\012\014\014\016" +
    "\037\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\027\001\001\000\006\005\025\006\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\031\001" +
    "\001\000\002\001\001\000\004\004\033\001\001\000\002" +
    "\001\001\000\004\011\036\001\001\000\002\001\001\000" +
    "\004\010\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\042\001\001\000\004\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\057\001\001\000\002\001\001\000\006\005\025\006" +
    "\u0117\001\001\000\002\001\001\000\006\005\025\006\061" +
    "\001\001\000\004\017\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\065\001\001\000\006\005\025" +
    "\006\066\001\001\000\004\020\070\001\001\000\006\005" +
    "\025\006\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\103\020" +
    "\102\021\104\023\100\036\106\040\105\041\101\042\075" +
    "\001\001\000\006\005\025\006\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\167\001\001" +
    "\000\006\005\025\006\165\001\001\000\002\001\001\000" +
    "\006\005\025\006\163\001\001\000\004\020\162\001\001" +
    "\000\006\005\025\006\160\001\001\000\004\020\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\123\025\116\031\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\025" +
    "\006\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\123\025\116\031\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\123\025\116\027\131\031\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\123\025\116\031\136\001\001\000\004\030\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\123\025\116\031\147\001\001" +
    "\000\002\001\001\000\010\013\123\025\116\031\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\123\025\116\031\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\164\001\001\000\002\001\001\000\004\020\166\001\001" +
    "\000\002\001\001\000\004\020\170\001\001\000\002\001" +
    "\001\000\006\026\175\032\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\175\032\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\211\001\001\000" +
    "\004\033\252\001\001\000\002\001\001\000\004\026\214" +
    "\001\001\000\004\033\215\001\001\000\002\001\001\000" +
    "\004\026\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\227" +
    "\001\001\000\004\033\234\001\001\000\002\001\001\000" +
    "\004\026\232\001\001\000\004\033\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\237\001\001\000\004\033\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\244\001" +
    "\001\000\004\033\251\001\001\000\002\001\001\000\004" +
    "\026\247\001\001\000\004\033\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\261\001\001\000\004\033\262" +
    "\001\001\000\002\001\001\000\004\026\264\001\001\000" +
    "\004\033\271\001\001\000\002\001\001\000\004\026\267" +
    "\001\001\000\004\033\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\025\006\274" +
    "\001\001\000\004\035\276\001\001\000\006\005\025\006" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\025\006\301\001\001\000\004\035\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\313\021\314\035\317\036\315\040\316\041\312\042\311" +
    "\001\001\000\006\005\025\006\330\001\001\000\006\005" +
    "\025\006\326\001\001\000\006\005\025\006\324\001\001" +
    "\000\004\035\323\001\001\000\004\035\322\001\001\000" +
    "\006\005\025\006\320\001\001\000\002\001\001\000\004" +
    "\035\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\325\001\001\000\002\001\001" +
    "\000\004\035\327\001\001\000\002\001\001\000\004\035" +
    "\331\001\001\000\002\001\001\000\010\013\123\025\116" +
    "\031\333\001\001\000\002\001\001\000\004\020\335\001" +
    "\001\000\002\001\001\000\006\005\025\006\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\350\017\353\022\346\036\352" +
    "\040\351\041\347\042\344\001\001\000\006\005\025\006" +
    "\u0115\001\001\000\002\001\001\000\006\005\025\006\363" +
    "\001\001\000\006\005\025\006\361\001\001\000\006\005" +
    "\025\006\357\001\001\000\006\005\025\006\355\001\001" +
    "\000\004\017\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\356\001\001\000\002\001\001\000\004" +
    "\017\360\001\001\000\002\001\001\000\004\017\362\001" +
    "\001\000\002\001\001\000\004\017\364\001\001\000\002" +
    "\001\001\000\006\026\175\032\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\025\006\371\001\001" +
    "\000\004\034\373\001\001\000\006\005\025\006\u0105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\025" +
    "\006\376\001\001\000\004\034\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\u0109\034" +
    "\u0106\036\u010a\040\u010b\041\u0108\042\u0107\001\001\000\002" +
    "\001\001\000\006\005\025\006\u0113\001\001\000\006\005" +
    "\025\006\u0111\001\001\000\006\005\025\006\u010f\001\001" +
    "\000\004\034\u010e\001\001\000\006\005\025\006\u010c\001" +
    "\001\000\004\034\u010d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u0110\001\001\000\002\001\001\000" +
    "\004\034\u0112\001\001\000\002\001\001\000\004\034\u0114" +
    "\001\001\000\002\001\001\000\004\017\u0116\001\001\000" +
    "\002\001\001\000\004\017\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u011b\001\001\000\006\005" +
    "\025\006\u011c\001\001\000\004\020\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u0126\001\001\000\004\016" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u012c\001\001\000" +
    "\004\016\u012d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0136" +
    "\001\001\000\006\005\025\006\u013d\001\001\000\002\001" +
    "\001\000\006\005\025\006\u0138\001\001\000\004\017\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u013e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     /*
     public void syntax_error(Symbol s){
 	System.out.print(s);
     }
    
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
         System.out.print(s);
     }
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO_SUB ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 ASIGNACIONES CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_FUNCTION ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_FUNCTION ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 ASIGNACIONES CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_VARIABLE ::= dim espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_VARIABLE2 ::= coma espacio ASIGNAR_TIPO_VARIABLE DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_VARIABLE2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNAR_TIPO_VARIABLE ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_TIPO_VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPOS ::= tipovar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPOS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_PARAMENTROS ::= tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_PARAMENTROS2 ::= coma espacio tipoparametro espacio ASIGNAR_TIPO_VARIABLE LISTA_PARAMENTROS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_PARAMENTROS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS2",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARGUMENTOS ::= EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARGUMENTOS2 ::= coma espacio EXP ARGUMENTOS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGUMENTOS2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= VALORES INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALORES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALORES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTENIDO_IF ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTENIDO_IF ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTENIDO_IF ::= newline INDENTACION2 ASIGNACIONES CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 ASIGNACIONES CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP_CONDICIONALES2 ::= oplog espacio oprel espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP_CONDICIONALES2 ::= oplog VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP_CONDICIONALES2 ::= oplog not espacio VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP_CONDICIONALES2 ::= oplog VALORES_CONDICIONALES espacio asignacion espacio not espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP_CONDICIONALES2 ::= oplog not espacio VALORES_CONDICIONALES espacio asignacion espacio not espacio VALORES_CONDICIONALES EXP_CONDICIONALES2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_CONDICIONALES2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALORES_CONDICIONALES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALORES_CONDICIONALES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALORES_CONDICIONALES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORES_CONDICIONALES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES_CONDICIONALES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORES_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ASIGNACIONES ::= identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ASIGNACIONES ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONES",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

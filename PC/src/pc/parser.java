
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pc;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\002\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\015\005\000\002\015\006\000" +
    "\002\015\004\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\004\000\002\016\005\000\002\016\006" +
    "\000\002\016\006\000\002\016\004\000\002\017\005\000" +
    "\002\006\004\000\002\006\002\000\002\005\003\000\002" +
    "\005\003\000\002\007\005\000\002\010\012\000\002\010" +
    "\006\000\002\010\007\000\002\022\003\000\002\022\003" +
    "\000\002\013\014\000\002\013\015\000\002\014\011\000" +
    "\002\014\014\000\002\011\021\000\002\011\020\000\002" +
    "\011\014\000\002\011\015\000\002\012\005\000\002\012" +
    "\006\000\002\025\003\000\002\025\006\000\002\026\007" +
    "\000\002\026\007\000\002\026\004\000\002\026\011\000" +
    "\002\026\011\000\002\026\006\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\030\007" +
    "\000\002\030\007\000\002\030\007\000\002\030\007\000" +
    "\002\030\007\000\002\030\004\000\002\030\005\000\002" +
    "\030\006\000\002\030\004\000\002\031\007\000\002\031" +
    "\007\000\002\031\007\000\002\031\007\000\002\031\007" +
    "\000\002\031\004\000\002\031\005\000\002\031\006\000" +
    "\002\031\006\000\002\031\004\000\002\020\013\000\002" +
    "\020\016\000\002\021\014\000\002\021\017\000\002\027" +
    "\007\000\002\027\007\000\002\027\011\000\002\027\011" +
    "\000\002\027\013\000\002\027\011\000\002\027\011\000" +
    "\002\027\013\000\002\027\013\000\002\027\015\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\005\000\002\032\007" +
    "\000\002\032\011\000\002\033\016\000\002\033\022\000" +
    "\002\034\016\000\002\034\022\000\002\035\007\000\002" +
    "\035\007\000\002\035\007\000\002\035\007\000\002\035" +
    "\007\000\002\035\004\000\002\035\005\000\002\035\006" +
    "\000\002\035\004\000\002\036\007\000\002\036\007\000" +
    "\002\036\007\000\002\036\007\000\002\036\007\000\002" +
    "\036\004\000\002\036\005\000\002\036\006\000\002\036" +
    "\006\000\002\036\004\000\002\037\012\000\002\040\012" +
    "\000\002\041\007\000\002\041\007\000\002\041\007\000" +
    "\002\041\007\000\002\041\007\000\002\041\004\000\002" +
    "\041\005\000\002\041\006\000\002\041\004\000\002\042" +
    "\007\000\002\042\007\000\002\042\007\000\002\042\007" +
    "\000\002\042\007\000\002\042\004\000\002\042\005\000" +
    "\002\042\006\000\002\042\006\000\002\042\004\000\002" +
    "\043\012\000\002\044\007\000\002\044\004\000\002\044" +
    "\005\000\002\044\004\000\002\045\007\000\002\046\007" +
    "\000\002\047\010\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\022\004\004\013\020\015\013\025\014\046" +
    "\010\047\006\050\007\052\021\001\002\000\004\046\u01f7" +
    "\001\002\000\004\002\001\001\002\000\020\004\004\013" +
    "\020\015\013\025\014\046\010\050\007\052\021\001\002" +
    "\000\056\002\uffdb\004\uffdb\006\uffdb\011\uffdb\013\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\052\uffdb\001\002\000\056\002\uffdc" +
    "\004\uffdc\006\uffdc\011\uffdc\013\uffdc\015\uffdc\016\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\052\uffdc\001\002\000\012\002\uffdd\046\010\047\uffdd" +
    "\050\007\001\002\000\004\002\u01f3\001\002\000\004\046" +
    "\105\001\002\000\004\046\070\001\002\000\012\002\uffdd" +
    "\046\010\047\uffdd\050\007\001\002\000\012\002\uffdd\046" +
    "\010\047\uffdd\050\007\001\002\000\012\002\uffdd\046\010" +
    "\047\uffdd\050\007\001\002\000\004\046\034\001\002\000" +
    "\014\002\uff5e\046\uff5e\047\uff5e\050\uff5e\052\uff5e\001\002" +
    "\000\024\002\ufff5\004\004\013\020\015\013\025\014\046" +
    "\010\047\027\050\007\052\021\001\002\000\012\002\uffdd" +
    "\046\010\047\uffdd\050\007\001\002\000\006\002\ufff5\047" +
    "\027\001\002\000\050\002\uffdd\006\uffdd\011\uffdd\016\uffdd" +
    "\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\034\uffdd\035\uffdd\045\uffdd\046\010\047\uffdd" +
    "\050\007\052\uffdd\001\002\000\044\002\uffde\006\uffde\011" +
    "\uffde\016\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde\045\uffde\047" +
    "\uffde\052\uffde\001\002\000\022\002\ufff6\004\004\013\020" +
    "\015\013\025\014\046\010\050\007\052\021\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufffd\001\002\000\004\045" +
    "\035\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\006\047\037\052\021\001\002\000\016\020" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\007\052\uffdd\001\002" +
    "\000\006\047\037\052\021\001\002\000\004\020\042\001" +
    "\002\000\004\046\043\001\002\000\004\013\044\001\002" +
    "\000\012\002\uff66\046\uff66\047\uff66\050\uff66\001\002\000" +
    "\004\020\uff62\001\002\000\012\020\uff64\045\047\047\037" +
    "\052\021\001\002\000\004\046\054\001\002\000\004\020" +
    "\uff63\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\006\047\037\052\021\001\002\000\004\020" +
    "\uff65\001\002\000\004\026\055\001\002\000\004\046\056" +
    "\001\002\000\006\037\061\045\057\001\002\000\020\002" +
    "\uffd5\006\uffd5\016\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5" +
    "\001\002\000\012\046\uff61\047\uff61\050\uff61\052\uff61\001" +
    "\002\000\020\002\uffd6\006\uffd6\016\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\052\uffd6\001\002\000\006\002\ufff5\047\027\001" +
    "\002\000\004\002\ufffc\001\002\000\006\002\ufff5\047\027" +
    "\001\002\000\004\002\ufff9\001\002\000\006\002\ufff5\047" +
    "\027\001\002\000\004\002\ufffb\001\002\000\004\045\071" +
    "\001\002\000\006\016\074\046\073\001\002\000\014\002" +
    "\uffda\046\uffda\047\uffda\050\uffda\052\uffda\001\002\000\004" +
    "\026\077\001\002\000\004\046\075\001\002\000\004\045" +
    "\071\001\002\000\014\002\uffd8\046\uffd8\047\uffd8\050\uffd8" +
    "\052\uffd8\001\002\000\004\046\100\001\002\000\006\037" +
    "\061\045\057\001\002\000\016\002\uffd7\016\102\046\uffd7" +
    "\047\uffd7\050\uffd7\052\uffd7\001\002\000\004\046\103\001" +
    "\002\000\004\045\071\001\002\000\014\002\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\052\uffd9\001\002\000\004\045\106\001" +
    "\002\000\004\005\107\001\002\000\006\006\111\036\110" +
    "\001\002\000\004\046\u01ea\001\002\000\012\046\u01dd\047" +
    "\uffdd\050\007\052\uffdd\001\002\000\004\006\113\001\002" +
    "\000\012\046\115\047\uffdd\050\007\052\uffdd\001\002\000" +
    "\006\047\u014f\052\021\001\002\000\014\026\116\046\uffdc" +
    "\047\uffdc\050\uffdc\052\uffdc\001\002\000\004\046\117\001" +
    "\002\000\006\037\061\045\057\001\002\000\012\046\010" +
    "\047\uffdd\050\007\052\uffdd\001\002\000\006\047\123\052" +
    "\021\001\002\000\006\047\123\052\021\001\002\000\032" +
    "\011\uffdd\020\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\045\uffdd\046\010\047\uffdd\050\007\052\uffdd\001\002" +
    "\000\004\020\125\001\002\000\004\046\126\001\002\000" +
    "\004\015\127\001\002\000\012\002\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\001\002\000\026\011\141\020\uffe4\025\014\030" +
    "\143\031\136\032\132\034\137\045\146\047\123\052\021" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\004\046\u011c\001\002\000\006\047\123\052\021" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\123\052\021\001\002\000\004\046\361" +
    "\001\002\000\004\046\357\001\002\000\012\046\010\047" +
    "\uffdd\050\007\052\uffdd\001\002\000\004\012\345\001\002" +
    "\000\012\046\010\047\uffdd\050\007\052\uffdd\001\002\000" +
    "\004\046\234\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\004\020\uffe3\001\002\000\006\012" +
    "\152\046\153\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\006\047\123\052\021\001\002\000" +
    "\004\020\uffe7\001\002\000\004\045\225\001\002\000\004" +
    "\014\154\001\002\000\004\046\155\001\002\000\016\005" +
    "\156\027\160\040\157\045\166\051\161\053\163\001\002" +
    "\000\016\005\156\027\160\040\157\045\166\051\161\053" +
    "\163\001\002\000\020\006\uffc1\016\uffc1\022\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\052\uffc1\001\002\000\004\046\211\001" +
    "\002\000\020\006\uffbf\016\uffbf\022\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\052\uffbf\001\002\000\020\006\uffdd\016\uffdd\022" +
    "\uffdd\046\202\047\uffdd\050\007\052\uffdd\001\002\000\020" +
    "\006\uffc0\016\uffc0\022\uffc0\046\uffc0\047\uffc0\050\uffc0\052" +
    "\uffc0\001\002\000\020\006\uffbc\016\uffbc\022\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\052\uffbc\001\002\000\006\047\uff94\052" +
    "\uff94\001\002\000\024\005\170\006\uffc2\012\167\016\uffc2" +
    "\022\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\001\002\000" +
    "\004\045\200\001\002\000\020\005\156\006\171\027\160" +
    "\040\157\045\166\051\161\053\163\001\002\000\020\006" +
    "\uffcc\016\uffcc\022\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc" +
    "\001\002\000\004\006\177\001\002\000\006\006\uffca\016" +
    "\174\001\002\000\004\046\175\001\002\000\016\005\156" +
    "\027\160\040\157\045\166\051\161\053\163\001\002\000" +
    "\004\006\uffc9\001\002\000\020\006\uffcb\016\uffcb\022\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\052\uffcb\001\002\000\020\006" +
    "\uffbe\016\uffbe\022\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe" +
    "\001\002\000\014\006\uffc6\016\uffc6\022\uffc6\047\uffc6\052" +
    "\uffc6\001\002\000\016\043\203\044\204\046\uffdc\047\uffdc" +
    "\050\uffdc\052\uffdc\001\002\000\004\046\207\001\002\000" +
    "\004\046\205\001\002\000\016\005\156\027\160\040\157" +
    "\045\166\051\161\053\163\001\002\000\014\006\uffc7\016" +
    "\uffc7\022\uffc7\047\uffc7\052\uffc7\001\002\000\016\005\156" +
    "\027\160\040\157\045\166\051\161\053\163\001\002\000" +
    "\014\006\uffc8\016\uffc8\022\uffc8\047\uffc8\052\uffc8\001\002" +
    "\000\014\005\156\040\157\045\166\051\161\053\163\001" +
    "\002\000\020\006\uffdd\016\uffdd\022\uffdd\046\214\047\uffdd" +
    "\050\007\052\uffdd\001\002\000\014\006\uffc3\016\uffc3\022" +
    "\uffc3\047\uffc3\052\uffc3\001\002\000\016\043\215\044\216" +
    "\046\uffdc\047\uffdc\050\uffdc\052\uffdc\001\002\000\004\046" +
    "\221\001\002\000\004\046\217\001\002\000\016\005\156" +
    "\027\160\040\157\045\166\051\161\053\163\001\002\000" +
    "\014\006\uffc4\016\uffc4\022\uffc4\047\uffc4\052\uffc4\001\002" +
    "\000\016\005\156\027\160\040\157\045\166\051\161\053" +
    "\163\001\002\000\014\006\uffc5\016\uffc5\022\uffc5\047\uffc5" +
    "\052\uffc5\001\002\000\004\006\224\001\002\000\020\006" +
    "\uffbd\016\uffbd\022\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd" +
    "\001\002\000\004\046\226\001\002\000\004\014\227\001" +
    "\002\000\004\046\230\001\002\000\016\005\156\027\160" +
    "\040\157\045\166\051\161\053\163\001\002\000\006\047" +
    "\uff93\052\uff93\001\002\000\006\047\123\052\021\001\002" +
    "\000\004\020\uffe8\001\002\000\004\033\235\001\002\000" +
    "\004\046\236\001\002\000\016\005\246\027\245\040\244" +
    "\045\243\051\242\053\237\001\002\000\016\006\uff98\041" +
    "\uff98\046\uff98\047\uff98\050\uff98\052\uff98\001\002\000\012" +
    "\046\010\047\uffdd\050\007\052\uffdd\001\002\000\004\046" +
    "\270\001\002\000\016\006\uff97\041\uff97\046\uff97\047\uff97" +
    "\050\uff97\052\uff97\001\002\000\020\006\uff9a\012\266\041" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\052\uff9a\001\002\000\016" +
    "\006\uff99\041\uff99\046\uff99\047\uff99\050\uff99\052\uff99\001" +
    "\002\000\004\046\251\001\002\000\016\005\246\027\245" +
    "\040\244\045\243\051\242\053\237\001\002\000\004\006" +
    "\250\001\002\000\016\006\uff95\041\uff95\046\uff95\047\uff95" +
    "\050\uff95\052\uff95\001\002\000\014\005\246\040\244\045" +
    "\243\051\242\053\237\001\002\000\004\046\253\001\002" +
    "\000\004\042\254\001\002\000\004\046\255\001\002\000" +
    "\016\005\246\027\257\040\244\045\243\051\242\053\237" +
    "\001\002\000\016\006\uffa2\041\264\046\uffa2\047\uffa2\050" +
    "\uffa2\052\uffa2\001\002\000\004\046\260\001\002\000\014" +
    "\005\246\040\244\045\243\051\242\053\237\001\002\000" +
    "\016\006\uffa0\041\262\046\uffa0\047\uffa0\050\uffa0\052\uffa0" +
    "\001\002\000\016\005\246\027\245\040\244\045\243\051" +
    "\242\053\237\001\002\000\014\006\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\052\uff9b\001\002\000\016\005\246\027\245\040" +
    "\244\045\243\051\242\053\237\001\002\000\014\006\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\052\uff9d\001\002\000\004\045" +
    "\267\001\002\000\016\006\uff96\041\uff96\046\uff96\047\uff96" +
    "\050\uff96\052\uff96\001\002\000\006\014\272\042\271\001" +
    "\002\000\004\046\277\001\002\000\004\046\273\001\002" +
    "\000\014\005\246\040\244\045\243\051\242\053\237\001" +
    "\002\000\016\006\uffa3\041\275\046\uffa3\047\uffa3\050\uffa3" +
    "\052\uffa3\001\002\000\016\005\246\027\245\040\244\045" +
    "\243\051\242\053\237\001\002\000\014\006\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\052\uff9e\001\002\000\016\005\246\027" +
    "\301\040\244\045\243\051\242\053\237\001\002\000\016" +
    "\006\uffa4\041\306\046\uffa4\047\uffa4\050\uffa4\052\uffa4\001" +
    "\002\000\004\046\302\001\002\000\014\005\246\040\244" +
    "\045\243\051\242\053\237\001\002\000\016\006\uffa1\041" +
    "\304\046\uffa1\047\uffa1\050\uffa1\052\uffa1\001\002\000\016" +
    "\005\246\027\245\040\244\045\243\051\242\053\237\001" +
    "\002\000\014\006\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c" +
    "\001\002\000\016\005\246\027\245\040\244\045\243\051" +
    "\242\053\237\001\002\000\014\006\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\052\uff9f\001\002\000\006\047\312\052\021\001" +
    "\002\000\006\047\312\052\021\001\002\000\030\011\uffdd" +
    "\024\uffdd\025\uffdd\031\uffdd\032\uffdd\034\uffdd\045\uffdd\046" +
    "\010\047\uffdd\050\007\052\uffdd\001\002\000\004\024\314" +
    "\001\002\000\012\046\uff7a\047\uff7a\050\uff7a\052\uff7a\001" +
    "\002\000\024\011\141\024\uff6b\025\014\031\136\032\132" +
    "\034\137\045\146\047\312\052\021\001\002\000\012\046" +
    "\010\047\uffdd\050\007\052\uffdd\001\002\000\006\047\312" +
    "\052\021\001\002\000\012\046\010\047\uffdd\050\007\052" +
    "\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\312\052\021\001\002\000\004\024\uff6a" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\312\052\021\001\002\000\004\024\uff6d" +
    "\001\002\000\004\024\uff68\001\002\000\006\047\312\052" +
    "\021\001\002\000\004\024\uff6e\001\002\000\006\047\312" +
    "\052\021\001\002\000\004\024\uff70\001\002\000\006\047" +
    "\312\052\021\001\002\000\004\024\uff6f\001\002\000\004" +
    "\024\uff69\001\002\000\006\047\312\052\021\001\002\000" +
    "\004\024\uff6c\001\002\000\004\024\uff67\001\002\000\006" +
    "\047\123\052\021\001\002\000\004\020\uffe5\001\002\000" +
    "\006\007\346\010\347\001\002\000\004\005\352\001\002" +
    "\000\004\005\350\001\002\000\004\006\351\001\002\000" +
    "\012\046\uff60\047\uff60\050\uff60\052\uff60\001\002\000\014" +
    "\005\156\040\157\045\166\051\161\053\163\001\002\000" +
    "\004\006\354\001\002\000\012\046\uff5f\047\uff5f\050\uff5f" +
    "\052\uff5f\001\002\000\006\047\123\052\021\001\002\000" +
    "\004\020\uffea\001\002\000\016\005\156\027\160\040\157" +
    "\045\166\051\161\053\163\001\002\000\006\047\uffdf\052" +
    "\uffdf\001\002\000\016\005\246\027\245\040\244\045\243" +
    "\051\242\053\237\001\002\000\004\046\363\001\002\000" +
    "\004\021\364\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\006\047\367\052\021\001\002\000" +
    "\006\047\367\052\021\001\002\000\032\011\uffdd\020\uffdd" +
    "\025\uffdd\030\uffdd\032\uffdd\034\uffdd\035\uffdd\045\uffdd\046" +
    "\010\047\uffdd\050\007\052\uffdd\001\002\000\006\020\371" +
    "\035\372\001\002\000\004\046\u0100\001\002\000\012\046" +
    "\010\047\uffdd\050\007\052\uffdd\001\002\000\006\047\367" +
    "\052\021\001\002\000\004\020\375\001\002\000\004\046" +
    "\376\001\002\000\004\031\377\001\002\000\012\046\uffa5" +
    "\047\uffa5\050\uffa5\052\uffa5\001\002\000\004\031\u0101\001" +
    "\002\000\012\046\uffa6\047\uffa6\050\uffa6\052\uffa6\001\002" +
    "\000\026\011\141\020\uffad\025\014\030\143\032\132\034" +
    "\137\035\uffad\045\146\047\367\052\021\001\002\000\012" +
    "\046\010\047\uffdd\050\007\052\uffdd\001\002\000\006\047" +
    "\367\052\021\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052" +
    "\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\006\047\367\052\021\001\002\000\012\046" +
    "\010\047\uffdd\050\007\052\uffdd\001\002\000\006\020\uffac" +
    "\035\uffac\001\002\000\006\047\367\052\021\001\002\000" +
    "\006\020\uffaf\035\uffaf\001\002\000\006\020\uffaa\035\uffaa" +
    "\001\002\000\006\047\367\052\021\001\002\000\006\020" +
    "\uffb0\035\uffb0\001\002\000\006\047\367\052\021\001\002" +
    "\000\006\020\uffae\035\uffae\001\002\000\006\047\367\052" +
    "\021\001\002\000\006\020\uffb2\035\uffb2\001\002\000\006" +
    "\020\uffab\035\uffab\001\002\000\006\047\367\052\021\001" +
    "\002\000\006\020\uffb1\035\uffb1\001\002\000\006\020\uffa9" +
    "\035\uffa9\001\002\000\004\020\uffe2\001\002\000\006\047" +
    "\123\052\021\001\002\000\004\020\uffe9\001\002\000\004" +
    "\020\uffe1\001\002\000\004\045\u011d\001\002\000\004\046" +
    "\u011e\001\002\000\006\014\u0120\026\u011f\001\002\000\004" +
    "\046\u0140\001\002\000\004\046\u0121\001\002\000\016\005" +
    "\156\027\160\040\157\045\166\051\161\053\163\001\002" +
    "\000\004\022\u0123\001\002\000\004\046\u0124\001\002\000" +
    "\016\005\156\027\160\040\157\045\166\051\161\053\163" +
    "\001\002\000\006\047\u0128\052\021\001\002\000\006\047" +
    "\u0128\052\021\001\002\000\004\023\u013e\001\002\000\030" +
    "\011\uffdd\023\uffdd\025\uffdd\030\uffdd\031\uffdd\034\uffdd\045" +
    "\uffdd\046\010\047\uffdd\050\007\052\uffdd\001\002\000\024" +
    "\011\141\023\uff80\025\014\030\143\031\136\034\137\045" +
    "\146\047\u0128\052\021\001\002\000\006\047\u0128\052\021" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001\002" +
    "\000\012\046\010\047\uffdd\050\007\052\uffdd\001\002\000" +
    "\012\046\010\047\uffdd\050\007\052\uffdd\001\002\000\006" +
    "\047\u0128\052\021\001\002\000\012\046\010\047\uffdd\050" +
    "\007\052\uffdd\001\002\000\004\023\uff7f\001\002\000\006" +
    "\047\u0128\052\021\001\002\000\004\023\uff82\001\002\000" +
    "\004\023\uff7d\001\002\000\006\047\u0128\052\021\001\002" +
    "\000\004\023\uff83\001\002\000\006\047\u0128\052\021\001" +
    "\002\000\004\023\uff81\001\002\000\006\047\u0128\052\021" +
    "\001\002\000\004\023\uff85\001\002\000\006\047\u0128\052" +
    "\021\001\002\000\004\023\uff84\001\002\000\004\023\uff7e" +
    "\001\002\000\012\046\uff90\047\uff90\050\uff90\052\uff90\001" +
    "\002\000\004\023\uff7c\001\002\000\006\037\061\045\057" +
    "\001\002\000\004\046\u0142\001\002\000\004\014\u0143\001" +
    "\002\000\004\046\u0144\001\002\000\016\005\156\027\160" +
    "\040\157\045\166\051\161\053\163\001\002\000\004\022" +
    "\u0146\001\002\000\004\046\u0147\001\002\000\016\005\156" +
    "\027\160\040\157\045\166\051\161\053\163\001\002\000" +
    "\006\047\u0128\052\021\001\002\000\004\023\u014a\001\002" +
    "\000\012\046\uff8f\047\uff8f\050\uff8f\052\uff8f\001\002\000" +
    "\006\047\123\052\021\001\002\000\004\020\uffe6\001\002" +
    "\000\004\020\uffe0\001\002\000\006\047\u014f\052\021\001" +
    "\002\000\030\011\uffdd\020\uffdd\025\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\045\uffdd\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\004\020\u0151\001\002\000\004\046\u0152\001\002" +
    "\000\004\015\u0153\001\002\000\012\002\uffcd\046\uffcd\047" +
    "\uffcd\050\uffcd\001\002\000\024\011\141\020\uffee\025\014" +
    "\030\u015c\031\u0156\032\u015d\045\146\047\u014f\052\021\001" +
    "\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001\002" +
    "\000\004\046\u01b5\001\002\000\012\046\010\047\uffdd\050" +
    "\007\052\uffdd\001\002\000\006\047\u014f\052\021\001\002" +
    "\000\012\046\010\047\uffdd\050\007\052\uffdd\001\002\000" +
    "\012\046\010\047\uffdd\050\007\052\uffdd\001\002\000\012" +
    "\046\010\047\uffdd\050\007\052\uffdd\001\002\000\004\046" +
    "\u018f\001\002\000\004\046\u0162\001\002\000\004\020\uffed" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\u014f\052\021\001\002\000\004\020\ufff0" +
    "\001\002\000\004\045\u0163\001\002\000\004\046\u0164\001" +
    "\002\000\006\014\u0166\026\u0165\001\002\000\004\046\u0184" +
    "\001\002\000\004\046\u0167\001\002\000\016\005\156\027" +
    "\160\040\157\045\166\051\161\053\163\001\002\000\004" +
    "\022\u0169\001\002\000\004\046\u016a\001\002\000\016\005" +
    "\156\027\160\040\157\045\166\051\161\053\163\001\002" +
    "\000\006\047\u016c\052\021\001\002\000\026\011\uffdd\023" +
    "\uffdd\025\uffdd\030\uffdd\031\uffdd\045\uffdd\046\010\047\uffdd" +
    "\050\007\052\uffdd\001\002\000\006\047\u016c\052\021\001" +
    "\002\000\004\023\u016f\001\002\000\012\046\uff92\047\uff92" +
    "\050\uff92\052\uff92\001\002\000\004\023\uff86\001\002\000" +
    "\022\011\141\023\uff89\025\014\030\u015c\031\u0156\045\146" +
    "\047\u016c\052\021\001\002\000\012\046\010\047\uffdd\050" +
    "\007\052\uffdd\001\002\000\004\023\uff88\001\002\000\006" +
    "\047\u016c\052\021\001\002\000\012\046\010\047\uffdd\050" +
    "\007\052\uffdd\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052" +
    "\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\006\047\u016c\052\021\001\002\000\004\023" +
    "\uff8b\001\002\000\006\047\u016c\052\021\001\002\000\004" +
    "\023\uff8c\001\002\000\006\047\u016c\052\021\001\002\000" +
    "\004\023\uff8e\001\002\000\006\047\u016c\052\021\001\002" +
    "\000\004\023\uff8a\001\002\000\004\023\uff87\001\002\000" +
    "\006\047\u016c\052\021\001\002\000\004\023\uff8d\001\002" +
    "\000\006\037\061\045\057\001\002\000\004\046\u0186\001" +
    "\002\000\004\014\u0187\001\002\000\004\046\u0188\001\002" +
    "\000\016\005\156\027\160\040\157\045\166\051\161\053" +
    "\163\001\002\000\004\022\u018a\001\002\000\004\046\u018b" +
    "\001\002\000\016\005\156\027\160\040\157\045\166\051" +
    "\161\053\163\001\002\000\006\047\u016c\052\021\001\002" +
    "\000\004\023\u018e\001\002\000\012\046\uff91\047\uff91\050" +
    "\uff91\052\uff91\001\002\000\004\033\u0190\001\002\000\004" +
    "\046\u0191\001\002\000\016\005\246\027\245\040\244\045" +
    "\243\051\242\053\237\001\002\000\012\046\010\047\uffdd" +
    "\050\007\052\uffdd\001\002\000\006\047\u0195\052\021\001" +
    "\002\000\006\047\u0195\052\021\001\002\000\026\011\uffdd" +
    "\024\uffdd\025\uffdd\031\uffdd\032\uffdd\045\uffdd\046\010\047" +
    "\uffdd\050\007\052\uffdd\001\002\000\004\024\u0197\001\002" +
    "\000\012\046\uff7b\047\uff7b\050\uff7b\052\uff7b\001\002\000" +
    "\022\011\141\024\uff74\025\014\031\u0156\032\u015d\045\146" +
    "\047\u0195\052\021\001\002\000\012\046\010\047\uffdd\050" +
    "\007\052\uffdd\001\002\000\004\024\uff73\001\002\000\012" +
    "\046\010\047\uffdd\050\007\052\uffdd\001\002\000\006\047" +
    "\u0195\052\021\001\002\000\012\046\010\047\uffdd\050\007" +
    "\052\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052" +
    "\uffdd\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\006\047\u0195\052\021\001\002\000\004\024" +
    "\uff76\001\002\000\006\047\u0195\052\021\001\002\000\004" +
    "\024\uff77\001\002\000\006\047\u0195\052\021\001\002\000" +
    "\004\024\uff79\001\002\000\004\024\uff72\001\002\000\006" +
    "\047\u0195\052\021\001\002\000\004\024\uff78\001\002\000" +
    "\006\047\u0195\052\021\001\002\000\004\024\uff75\001\002" +
    "\000\004\024\uff71\001\002\000\006\047\u014f\052\021\001" +
    "\002\000\004\020\ufff1\001\002\000\006\047\u014f\052\021" +
    "\001\002\000\004\020\ufff4\001\002\000\006\047\u014f\052" +
    "\021\001\002\000\004\020\uffef\001\002\000\004\020\uffec" +
    "\001\002\000\006\047\u014f\052\021\001\002\000\004\020" +
    "\ufff3\001\002\000\016\005\246\027\245\040\244\045\243" +
    "\051\242\053\237\001\002\000\004\046\u01b7\001\002\000" +
    "\004\021\u01b8\001\002\000\006\047\u01ba\052\021\001\002" +
    "\000\006\047\u01ba\052\021\001\002\000\030\011\uffdd\020" +
    "\uffdd\025\uffdd\030\uffdd\032\uffdd\035\uffdd\045\uffdd\046\010" +
    "\047\uffdd\050\007\052\uffdd\001\002\000\006\020\u01bc\035" +
    "\u01bd\001\002\000\004\046\u01c3\001\002\000\012\046\010" +
    "\047\uffdd\050\007\052\uffdd\001\002\000\006\047\u01ba\052" +
    "\021\001\002\000\004\020\u01c0\001\002\000\004\046\u01c1" +
    "\001\002\000\004\031\u01c2\001\002\000\012\046\uffa7\047" +
    "\uffa7\050\uffa7\052\uffa7\001\002\000\004\031\u01c4\001\002" +
    "\000\012\046\uffa8\047\uffa8\050\uffa8\052\uffa8\001\002\000" +
    "\024\011\141\020\uffb6\025\014\030\u015c\032\u015d\035\uffb6" +
    "\045\146\047\u01ba\052\021\001\002\000\006\020\uffb5\035" +
    "\uffb5\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\u01ba\052\021\001\002\000\012\046\010" +
    "\047\uffdd\050\007\052\uffdd\001\002\000\012\046\010\047" +
    "\uffdd\050\007\052\uffdd\001\002\000\012\046\010\047\uffdd" +
    "\050\007\052\uffdd\001\002\000\006\047\u01ba\052\021\001" +
    "\002\000\006\020\uffb8\035\uffb8\001\002\000\006\047\u01ba" +
    "\052\021\001\002\000\006\020\uffb9\035\uffb9\001\002\000" +
    "\006\047\u01ba\052\021\001\002\000\006\020\uffbb\035\uffbb" +
    "\001\002\000\006\020\uffb4\035\uffb4\001\002\000\006\047" +
    "\u01ba\052\021\001\002\000\006\020\uffb7\035\uffb7\001\002" +
    "\000\006\047\u01ba\052\021\001\002\000\006\020\uffba\035" +
    "\uffba\001\002\000\006\020\uffb3\035\uffb3\001\002\000\006" +
    "\047\u014f\052\021\001\002\000\004\020\ufff2\001\002\000" +
    "\004\020\uffeb\001\002\000\006\047\u014f\052\021\001\002" +
    "\000\014\026\u01de\046\uffdc\047\uffdc\050\uffdc\052\uffdc\001" +
    "\002\000\004\046\u01df\001\002\000\006\037\061\045\057" +
    "\001\002\000\012\046\010\047\uffdd\050\007\052\uffdd\001" +
    "\002\000\006\047\123\052\021\001\002\000\004\020\u01e3" +
    "\001\002\000\004\046\u01e4\001\002\000\004\015\u01e5\001" +
    "\002\000\012\002\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002" +
    "\000\004\020\u01e7\001\002\000\004\046\u01e8\001\002\000" +
    "\004\015\u01e9\001\002\000\012\002\uffce\046\uffce\047\uffce" +
    "\050\uffce\001\002\000\004\045\u01eb\001\002\000\004\046" +
    "\u01ec\001\002\000\004\026\u01ed\001\002\000\004\046\u01ee" +
    "\001\002\000\006\037\061\045\057\001\002\000\006\006" +
    "\uffd2\016\u01f0\001\002\000\004\046\u01f1\001\002\000\004" +
    "\036\110\001\002\000\004\006\uffd1\001\002\000\004\002" +
    "\000\001\002\000\006\002\ufff5\047\027\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\uffff\001\002\000\004\045" +
    "\u01f8\001\002\000\004\005\u01f9\001\002\000\006\006\u01fa" +
    "\036\110\001\002\000\012\046\010\047\uffdd\050\007\052" +
    "\uffdd\001\002\000\004\006\u01fc\001\002\000\012\046\010" +
    "\047\uffdd\050\007\052\uffdd\001\002\000\006\047\u014f\052" +
    "\021\001\002\000\004\020\u01ff\001\002\000\004\046\u0200" +
    "\001\002\000\004\004\u0201\001\002\000\012\002\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\001\002\000\006\047\u014f\052\021" +
    "\001\002\000\004\020\u0204\001\002\000\004\046\u0205\001" +
    "\002\000\004\004\u0206\001\002\000\012\002\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\022\002\011\003\004\005\021\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u01f5\005\021\007\015\011" +
    "\014\013\016\043\022\050\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\006\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\024\006\065\001\001\000\006\005\024\006\063\001" +
    "\001\000\006\005\024\006\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\031\004\032\005\021\007" +
    "\015\011\014\013\016\043\022\050\010\001\001\000\006" +
    "\005\024\006\023\001\001\000\004\004\027\001\001\000" +
    "\006\005\024\006\025\001\001\000\002\001\001\000\020" +
    "\003\030\005\021\007\015\011\014\013\016\043\022\050" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\024\006\035\001\001\000\006\044\040\050\037\001\001" +
    "\000\006\005\024\006\045\001\001\000\006\044\044\050" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\047\045\050\050\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\051\001\001\000\006\044" +
    "\052\050\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\062" +
    "\001\001\000\002\001\001\000\004\004\064\001\001\000" +
    "\002\001\001\000\004\004\066\001\001\000\002\001\001" +
    "\000\004\010\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\111\001\001\000\002\001\001" +
    "\000\006\005\024\006\u01db\001\001\000\002\001\001\000" +
    "\006\005\024\006\113\001\001\000\006\015\u014f\050\u014d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\117\001\001\000\006\005\024\006\120\001\001\000\006" +
    "\016\123\050\121\001\001\000\006\016\u014c\050\121\001" +
    "\001\000\006\005\024\006\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\137\016\144\017\134\021\130\032\132\034\133" +
    "\040\141\046\143\047\146\050\121\001\001\000\006\005" +
    "\024\006\u014a\001\001\000\002\001\001\000\006\016\u011a" +
    "\050\121\001\001\000\006\005\024\006\u0118\001\001\000" +
    "\006\016\u0117\050\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\354\001\001\000\002\001" +
    "\001\000\006\005\024\006\342\001\001\000\002\001\001" +
    "\000\006\005\024\006\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\024\006\147\001\001\000\006" +
    "\016\150\050\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\163" +
    "\023\161\026\164\001\001\000\010\012\163\023\161\026" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\024\006\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\163\023\161\025\171\026" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\163\023\161\025" +
    "\175\026\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\163\023\161" +
    "\026\205\001\001\000\002\001\001\000\010\012\163\023" +
    "\161\026\207\001\001\000\002\001\001\000\006\012\163" +
    "\023\211\001\001\000\006\005\024\006\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\163\023\161\026\217\001\001\000" +
    "\002\001\001\000\010\012\163\023\161\026\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\163\023\161\026\230\001\001\000\002\001\001\000" +
    "\006\016\232\050\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\240\027\237\001" +
    "\001\000\002\001\001\000\006\005\024\006\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\240\027\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\260\001\001\000\002\001\001" +
    "\000\006\024\240\027\262\001\001\000\002\001\001\000" +
    "\006\024\240\027\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\273\001\001\000\002" +
    "\001\001\000\006\024\240\027\275\001\001\000\002\001" +
    "\001\000\004\024\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\302\001\001\000\002\001\001\000" +
    "\006\024\240\027\304\001\001\000\002\001\001\000\006" +
    "\024\240\027\306\001\001\000\002\001\001\000\006\042" +
    "\312\050\310\001\001\000\006\042\341\050\310\001\001" +
    "\000\006\005\024\006\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\321\017\322\021\317\032\316" +
    "\034\315\042\323\046\320\047\324\050\310\001\001\000" +
    "\006\005\024\006\337\001\001\000\006\042\336\050\310" +
    "\001\001\000\006\005\024\006\334\001\001\000\006\005" +
    "\024\006\332\001\001\000\006\005\024\006\330\001\001" +
    "\000\006\042\327\050\310\001\001\000\002\001\001\000" +
    "\006\005\024\006\325\001\001\000\006\042\326\050\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\331\050\310\001\001\000\002\001\001\000\006\042\333" +
    "\050\310\001\001\000\002\001\001\000\006\042\335\050" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\340\050\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\343\050\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\163\023\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\355\050\121\001\001\000\002\001\001\000\010\012\163" +
    "\023\161\026\357\001\001\000\002\001\001\000\006\024" +
    "\240\027\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\024\006\364\001\001\000\006\031\367\050" +
    "\365\001\001\000\006\031\u0116\050\365\001\001\000\006" +
    "\005\024\006\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\024\006\372\001\001\000\006\031\373" +
    "\050\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\u0106\017\u0107\031\u0109\032\u0103\034" +
    "\u0102\040\u0105\046\u0104\047\u0108\050\365\001\001\000\006" +
    "\005\024\006\u0114\001\001\000\006\031\u0113\050\365\001" +
    "\001\000\006\005\024\006\u0111\001\001\000\006\005\024" +
    "\006\u010f\001\001\000\006\005\024\006\u010d\001\001\000" +
    "\006\031\u010c\050\365\001\001\000\006\005\024\006\u010a" +
    "\001\001\000\002\001\001\000\006\031\u010b\050\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\u010e" +
    "\050\365\001\001\000\002\001\001\000\006\031\u0110\050" +
    "\365\001\001\000\002\001\001\000\006\031\u0112\050\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u0115\050\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u0119\050\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\161\026\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\163\023\161\026" +
    "\u0124\001\001\000\006\036\u0126\050\u0125\001\001\000\006" +
    "\036\u013e\050\u0125\001\001\000\002\001\001\000\006\005" +
    "\024\006\u0128\001\001\000\024\007\u012d\017\u012e\021\u012a" +
    "\032\u0129\036\u0130\040\u012c\046\u012b\047\u012f\050\u0125\001" +
    "\001\000\006\036\u013c\050\u0125\001\001\000\006\005\024" +
    "\006\u013a\001\001\000\006\005\024\006\u0138\001\001\000" +
    "\006\005\024\006\u0136\001\001\000\006\005\024\006\u0134" +
    "\001\001\000\006\036\u0133\050\u0125\001\001\000\006\005" +
    "\024\006\u0131\001\001\000\002\001\001\000\006\036\u0132" +
    "\050\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\u0135\050\u0125\001\001\000\002\001\001\000\006" +
    "\036\u0137\050\u0125\001\001\000\002\001\001\000\006\036" +
    "\u0139\050\u0125\001\001\000\002\001\001\000\006\036\u013b" +
    "\050\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\163\023\161\026\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\163\023\161\026\u0147\001" +
    "\001\000\006\036\u0148\050\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\u014b\050\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u01da\050\u014d" +
    "\001\001\000\006\005\024\006\u0153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\u015a\015\u015d\020\u0156\032\u0157\033\u0154\037" +
    "\u0158\046\u0159\047\u015e\050\u014d\001\001\000\006\005\024" +
    "\006\u01d8\001\001\000\002\001\001\000\006\005\024\006" +
    "\u01b2\001\001\000\006\015\u01b1\050\u014d\001\001\000\006" +
    "\005\024\006\u01af\001\001\000\006\005\024\006\u01ad\001" +
    "\001\000\006\005\024\006\u01ab\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\024\006" +
    "\u015f\001\001\000\006\015\u0160\050\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\163" +
    "\023\161\026\u0167\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\163\023\161\026\u016a\001\001\000\006" +
    "\035\u016d\050\u016c\001\001\000\006\005\024\006\u0170\001" +
    "\001\000\006\035\u016f\050\u016c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\u0176\020" +
    "\u0171\032\u0173\035\u0172\037\u0174\046\u0175\047\u0177\050\u016c" +
    "\001\001\000\006\005\024\006\u0181\001\001\000\002\001" +
    "\001\000\006\035\u0180\050\u016c\001\001\000\006\005\024" +
    "\006\u017e\001\001\000\006\005\024\006\u017c\001\001\000" +
    "\006\005\024\006\u017a\001\001\000\006\005\024\006\u0178" +
    "\001\001\000\006\035\u0179\050\u016c\001\001\000\002\001" +
    "\001\000\006\035\u017b\050\u016c\001\001\000\002\001\001" +
    "\000\006\035\u017d\050\u016c\001\001\000\002\001\001\000" +
    "\006\035\u017f\050\u016c\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\u0182\050\u016c\001\001\000\002\001" +
    "\001\000\004\022\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\163\023\161\026" +
    "\u0188\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\163\023\161\026\u018b\001\001\000\006\035\u018c\050" +
    "\u016c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\024\240\027\u0191\001" +
    "\001\000\006\005\024\006\u0192\001\001\000\006\041\u0195" +
    "\050\u0193\001\001\000\006\041\u01aa\050\u0193\001\001\000" +
    "\006\005\024\006\u0197\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\u019d\020\u019a\032\u019b\033\u0198\041" +
    "\u0199\046\u019c\047\u019e\050\u0193\001\001\000\006\005\024" +
    "\006\u01a8\001\001\000\002\001\001\000\006\005\024\006" +
    "\u01a6\001\001\000\006\041\u01a5\050\u0193\001\001\000\006" +
    "\005\024\006\u01a3\001\001\000\006\005\024\006\u01a1\001" +
    "\001\000\006\005\024\006\u019f\001\001\000\006\041\u01a0" +
    "\050\u0193\001\001\000\002\001\001\000\006\041\u01a2\050" +
    "\u0193\001\001\000\002\001\001\000\006\041\u01a4\050\u0193" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\u01a7\050\u0193\001\001\000\002\001\001\000\006\041\u01a9" +
    "\050\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\u01ac\050\u014d\001\001\000\002\001\001\000\006" +
    "\015\u01ae\050\u014d\001\001\000\002\001\001\000\006\015" +
    "\u01b0\050\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01b3\050\u014d\001\001\000\002\001\001\000" +
    "\006\024\240\027\u01b5\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\u01ba\050\u01b8\001\001\000\006\030" +
    "\u01d7\050\u01b8\001\001\000\006\005\024\006\u01c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\024\006" +
    "\u01bd\001\001\000\006\030\u01be\050\u01b8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\u01ca" +
    "\030\u01c5\032\u01c8\033\u01c6\037\u01c7\046\u01c9\047\u01cb\050" +
    "\u01b8\001\001\000\002\001\001\000\006\005\024\006\u01d5" +
    "\001\001\000\006\005\024\006\u01d3\001\001\000\006\030" +
    "\u01d2\050\u01b8\001\001\000\006\005\024\006\u01d0\001\001" +
    "\000\006\005\024\006\u01ce\001\001\000\006\005\024\006" +
    "\u01cc\001\001\000\006\030\u01cd\050\u01b8\001\001\000\002" +
    "\001\001\000\006\030\u01cf\050\u01b8\001\001\000\002\001" +
    "\001\000\006\030\u01d1\050\u01b8\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\u01d4\050\u01b8\001\001\000" +
    "\002\001\001\000\006\030\u01d6\050\u01b8\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\u01d9\050\u014d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\u01e5" +
    "\050\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\u01df\001\001\000\006\005\024\006\u01e0\001\001" +
    "\000\006\016\u01e1\050\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u01ee\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u01f1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\u01f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u01fa\001\001\000\006\005\024\006" +
    "\u0201\001\001\000\002\001\001\000\006\005\024\006\u01fc" +
    "\001\001\000\006\015\u01fd\050\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0202\050\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     /*
     public void syntax_error(Symbol s){
 	System.out.print(s);
     }
    
     public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
         System.out.print(s);
     }
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= INDENTACION PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= INDENTACION PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= BLOQUE_PROCEDIMIENTO INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= BLOQUE_FUNCION INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= BLOQUE_ESTRUCTURA INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= DECLARACION_VARIABLE INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= BLOQUE_COMENTARIOS INDENTACION2 PROGRAMA2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA2 ::= newline PROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA2 ::= newline 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO_SUB ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO_SUB ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO_SUB ::= newline INDENTACION2 CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO_SUB ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO_SUB ::= BLOQUE_COMENTARIOS CONTENIDO_SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_SUB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO_FUNCTION ::= newline INDENTACION2 CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE_RETURN ::= Return espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_RETURN",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INDENTACION2 ::= INDENTACION INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INDENTACION2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INDENTACION ::= espacio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDENTACION ::= tab 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INDENTACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_VARIABLE ::= dim espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS coma espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_VARIABLE2 ::= identificador coma espacio DECLARACION_VARIABLE2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_VARIABLE2 ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOS ::= tipovar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOS ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE_PROCEDIMIENTO ::= sub espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PROCEDIMIENTO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_PARAMENTROS ::= tipoparametro espacio identificador espacio as espacio TIPOS coma espacio LISTA_PARAMENTROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMENTROS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis espacio as espacio TIPOS INDENTACION2 CONTENIDO_FUNCTION end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOQUE_FUNCION ::= function espacio identificador abrirparentesis LISTA_PARAMENTROS cerrarparentesis INDENTACION2 CONTENIDO_SUB end espacio function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BLOQUE_LLAMADAS_FUNCIONES ::= identificador abrirparentesis ARGUMENTOS cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LLAMADAS_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGUMENTOS ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGUMENTOS ::= EXP coma espacio ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= VALORES INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= not espacio VALORES espacio opsum espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= not espacio VALORES espacio opmult espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= not espacio VALORES INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= abrirparentesis EXP cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= BLOQUE_LLAMADAS_FUNCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTENIDO_IF ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTENIDO_IF ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTENIDO_IF ::= newline INDENTACION2 CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTENIDO_IF ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONTENIDO_IF ::= BLOQUE_COMENTARIOS CONTENIDO_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTENIDO_IF_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONTENIDO_IF_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IF_FUNCTION",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // BLOQUE_IF ::= If espacio EXP_CONDICIONALES espacio then CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BLOQUE_IF_FUNCTION ::= If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_IF_FUNCTION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP_CONDICIONALES ::= VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP_CONDICIONALES ::= not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CONDICIONALES",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORES_CONDICIONALES ::= identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORES_CONDICIONALES ::= truefalse 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALORES_CONDICIONALES ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALORES_CONDICIONALES ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALORES_CONDICIONALES ::= identificador punto identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALORES_CONDICIONALES ::= abrirparentesis EXP_CONDICIONALES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES_CONDICIONALES",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BLOQUE_ASIGNACION ::= identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BLOQUE_ASIGNACION ::= identificador punto identificador espacio asignacion espacio EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BLOQUE_FOR ::= For espacio identificador espacio asignacion espacio EXP to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BLOQUE_FOR ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP to espacio EXP CONTENIDO_FOR next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio asignacion espacio EXP to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // BLOQUE_FOR_FUNCTION ::= For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP to espacio EXP CONTENIDO_FOR_FUNCTION next 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_FOR_FUNCTION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONTENIDO_FOR ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_FOR ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_FOR ::= newline INDENTACION2 CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONTENIDO_FOR ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONTENIDO_FOR ::= BLOQUE_COMENTARIOS CONTENIDO_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CONTENIDO_FOR_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CONTENIDO_FOR_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FOR_FUNCTION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BLOQUE_WHILE ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BLOQUE_WHILE_FUNCTION ::= Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE_FUNCTION loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_WHILE_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_IF INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO_WHILE ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_FOR INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO_WHILE ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO_WHILE ::= newline INDENTACION2 CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO_WHILE ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO_WHILE ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_LECTURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO_WHILE_FUNCTION ::= newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO_WHILE_FUNCTION ::= BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_WHILE_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BLOQUE_ESTRUCTURA ::= type espacio identificador INDENTACION2 CONTENIDO_ESTRUCTURA end espacio type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESTRUCTURA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO_ESTRUCTURA ::= newline INDENTACION2 CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO_ESTRUCTURA ::= BLOQUE_COMENTARIOS CONTENIDO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ESTRUCTURA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARACION_VARIABLE_ESTRUCTURA ::= identificador espacio as espacio TIPOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE_ESTRUCTURA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // BLOQUE_LECTURA ::= console punto read abrirparentesis cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_LECTURA",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // BLOQUE_ESCRITURA ::= console punto write abrirparentesis VALORES cerrarparentesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ESCRITURA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // BLOQUE_COMENTARIOS ::= comentario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_COMENTARIOS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

package pc;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import pc.treeelements.*;
import java.util.ArrayList;

parser code {:
     public static int errors = 0;

public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      /*System.err.println( info + " "+ message);*/
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public programa programaP;
:};


terminal sub, abrirparentesis, cerrarparentesis, write, read, console, punto, type,  asignacion;
terminal function,  coma, begin, end,  then, to, next,  loop, dim, as, not;
terminal Do, If, For, While, Return, Else; //palabras reservadas de java

terminal String tipoparametro, tipovar, truefalse, oplog, oprel, opsum, opmult, identificador;
terminal String espacio, newline, tab, cadena, comentario;
terminal Integer numero;


non terminal INICIO;
non terminal programa PROGRAMA;
non terminal programa PROGRAMA2;
non terminal INDENTACION;
non terminal INDENTACION2;
non terminal ArrayList<declaracion_var> DECLARACION_VARIABLE;
non terminal ArrayList<declaracion_var> DECLARACION_VARIABLE2;
non terminal bloque_function BLOQUE_FUNCION;
non terminal BLOQUE_LLAMADAS_FUNCIONES;
non terminal bloque_sub BLOQUE_PROCEDIMIENTO;
non terminal ArrayList<parametro> LISTA_PARAMENTROS;
non terminal ArrayList<declaracion> CONTENIDO_SUB;
non terminal ArrayList<declaracion> CONTENIDO_FUNCTION;
non terminal BLOQUE_RETURN;
non terminal BLOQUE_IF;
non terminal BLOQUE_IF_FUNCTION;
non terminal tipovar TIPOS;
non terminal exp VALORES;
non terminal VALORES_CONDICIONALES;
non terminal ARGUMENTOS;
non terminal exp EXP;
non terminal EXP_CONDICIONALES;
non terminal CONTENIDO_IF;
non terminal CONTENIDO_IF_FUNCTION;
non terminal declaracion_asignacion BLOQUE_ASIGNACION;
non terminal BLOQUE_FOR;
non terminal BLOQUE_FOR_FUNCTION;
non terminal CONTENIDO_FOR;
non terminal CONTENIDO_FOR_FUNCTION;
non terminal EXP_FOR;
non terminal BLOQUE_WHILE;
non terminal BLOQUE_WHILE_FUNCTION;
non terminal CONTENIDO_WHILE;
non terminal CONTENIDO_WHILE_FUNCTION;
non terminal bloque_type BLOQUE_ESTRUCTURA;
non terminal bloque_type CONTENIDO_ESTRUCTURA;
non terminal declaracion_var_estructura DECLARACION_VARIABLE_ESTRUCTURA;
non terminal BLOQUE_LECTURA;
non terminal BLOQUE_ESCRITURA;
non terminal declaracion_comentario BLOQUE_COMENTARIOS;
non terminal prueba;
non terminal prueba2;
non terminal prueba3;



precedence left asignacion;
precedence left opsum;
precedence left opmult;
precedence left not, oplog;

INICIO::=PROGRAMA:p {:programaP = p;:}
         |newline PROGRAMA:p {:programaP = p;:}
         ;

PROGRAMA::=INDENTACION PROGRAMA
           |INDENTACION PROGRAMA2
           |BLOQUE_PROCEDIMIENTO:bp INDENTACION2 PROGRAMA2:p2 {: RESULT = p2; RESULT.addBloque(bp); :}
           |BLOQUE_FUNCION:bf INDENTACION2 PROGRAMA2:p2 {: RESULT = p2; RESULT.addBloque(bf); :}
           |BLOQUE_ESTRUCTURA:be INDENTACION2 PROGRAMA2:p2 {: RESULT = p2; RESULT.addBloque(be); :}
           |DECLARACION_VARIABLE:dv INDENTACION2 PROGRAMA2:p2 {: RESULT = p2; //for(int i=0;i<dv.size();i++){RESULT.addDeclaracion(dv.get(i));} :}
           |BLOQUE_COMENTARIOS:bc INDENTACION2 PROGRAMA2:p2 {:RESULT = p2; RESULT.addDeclaracion(bc);:}
           ;
PROGRAMA2::=newline PROGRAMA:p {: RESULT = p;  :}
            |newline {:RESULT = new programa();:}
            | {:RESULT = new programa(); :}
            ;

CONTENIDO_SUB::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_SUB
               |newline INDENTACION2 BLOQUE_IF INDENTACION2  CONTENIDO_SUB
               |newline INDENTACION2 BLOQUE_FOR INDENTACION2  CONTENIDO_SUB
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_SUB
               |newline INDENTACION2  BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_SUB
               |newline INDENTACION2  BLOQUE_WHILE INDENTACION2 CONTENIDO_SUB
               |newline INDENTACION2  {:RESULT = new ArrayList();:}
               |newline INDENTACION2 CONTENIDO_SUB:cs {:RESULT =cs; :}
               |newline INDENTACION2 BLOQUE_ASIGNACION:ba CONTENIDO_SUB:cs {:RESULT =cs; RESULT.add(ba); :}
               |BLOQUE_COMENTARIOS:bc CONTENIDO_SUB:cs {:RESULT =cs; RESULT.add(bc); :}
               ;


CONTENIDO_FUNCTION::=newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2  CONTENIDO_FUNCTION
               |newline INDENTACION2 {:RESULT = new ArrayList();:}
               |newline INDENTACION2 CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_RETURN  CONTENIDO_FUNCTION
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FUNCTION
               |BLOQUE_COMENTARIOS CONTENIDO_FUNCTION 
               ;



BLOQUE_RETURN::= Return espacio EXP 
         ; 

INDENTACION2::=INDENTACION INDENTACION2
               |
               ;

INDENTACION::=tab
              |espacio
              ;

DECLARACION_VARIABLE::=dim espacio DECLARACION_VARIABLE2:dv2 {: RESULT = new ArrayList(); RESULT=dv2;:}
                       |dim error {: parser.report_error("DE VARIABLE","ERROR EN DECLARACION"); :} DECLARACION_VARIABLE2
                       ;

DECLARACION_VARIABLE2::=identificador:id espacio as espacio TIPOS:t coma espacio  DECLARACION_VARIABLE2:dv2 {:  RESULT=dv2; RESULT.add(new declaracion_var(new identificador(id), t));:}
                               |identificador:id coma espacio DECLARACION_VARIABLE2:dv2 {: RESULT = dv2; //RESULT.add(new declaracion_var(new identificador(id), dv2.get(dv2.size()-1).tipo_t));:}
                               |identificador:id espacio as espacio TIPOS:t {:System.out.println(3); RESULT = new ArrayList(); RESULT.add(new declaracion_var(new identificador(id), t));:}

                               ;

TIPOS::=tipovar:tv {:RESULT = new tipovar(tv);:}
          |identificador:id {:RESULT = new tipovar(id);:}
          ;

BLOQUE_PROCEDIMIENTO::=sub espacio identificador:id abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB:cs end espacio sub {:RESULT = new bloque_sub(new identificador(id), cs); :}
                       |sub espacio identificador:id abrirparentesis LISTA_PARAMENTROS:lp cerrarparentesis INDENTACION2 CONTENIDO_SUB:cs end espacio sub {:RESULT = new bloque_sub(new identificador(id), lp, cs); :}
                ;

LISTA_PARAMENTROS::=tipoparametro:tp espacio identificador:id espacio as espacio TIPOS:t {:RESULT = new ArrayList(); RESULT.add(new parametro(tp, new identificador(id), t));:}
                    |tipoparametro:tp espacio identificador:id espacio as espacio TIPOS:t coma espacio LISTA_PARAMENTROS:lp {:RESULT = lp; RESULT.add(new parametro(tp, new identificador(id), t));:}
                    ;

BLOQUE_FUNCION::=function espacio identificador:id abrirparentesis LISTA_PARAMENTROS:lp cerrarparentesis espacio as espacio TIPOS:t INDENTACION2 CONTENIDO_FUNCTION:cf end espacio function {:RESULT = new bloque_function(new identificador(id),lp, t, cf); :}
                 |function espacio identificador:id abrirparentesis cerrarparentesis espacio as espacio TIPOS:t INDENTACION2 CONTENIDO_FUNCTION:cf end espacio function {:RESULT = new bloque_function(new identificador(id), t, cf); :}
                 |function espacio identificador:id abrirparentesis cerrarparentesis INDENTACION2 CONTENIDO_SUB:cs end espacio function {:RESULT = new bloque_function(new identificador(id), cs); :}
                 |function espacio identificador:id abrirparentesis LISTA_PARAMENTROS:lp cerrarparentesis INDENTACION2 CONTENIDO_SUB:cs end espacio function {:RESULT = new bloque_function(new identificador(id),lp, cs); :}
          ;

BLOQUE_LLAMADAS_FUNCIONES::=identificador abrirparentesis cerrarparentesis
                            |identificador abrirparentesis ARGUMENTOS cerrarparentesis
                  ;

ARGUMENTOS::=EXP 
             |EXP coma espacio ARGUMENTOS
             ;


EXP::=  EXP:v opsum:os espacio EXP:e {:RESULT = new exp(v,os, e);:}
       |EXP:v opmult:om espacio EXP:e {:RESULT = new exp(v,om, e);:}
       |VALORES:v INDENTACION2 {:RESULT= v;:}
       ;



EXP_FOR::=VALORES espacio opsum espacio EXP_FOR
       |VALORES espacio opmult espacio EXP_FOR
       |VALORES espacio
       |not espacio VALORES espacio opsum espacio EXP_FOR
       |not espacio VALORES espacio opmult espacio EXP_FOR
       |not espacio VALORES espacio
       ;


VALORES::=identificador:id {: RESULT = new exp(new valores(new identificador(id)));:}
          |truefalse:tf {: RESULT = new exp( new valores(tf));:}
          |numero:n {: RESULT = new exp(new valores(n));:}
          |cadena:c {: RESULT = new exp (new valores(c));:}
          |identificador:id punto identificador:id2 {: RESULT = new exp (new valores(new identificador(id+"."+id2)));:}
          |abrirparentesis EXP:e cerrarparentesis {: RESULT = new exp (new valores(new exp(e)));:}
          |BLOQUE_LLAMADAS_FUNCIONES
          ;

CONTENIDO_IF::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_IF
               |newline INDENTACION2 BLOQUE_FOR INDENTACION2  CONTENIDO_IF
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_IF
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF
               |newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_IF
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_IF
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF
               |BLOQUE_COMENTARIOS CONTENIDO_IF
               ;
CONTENIDO_IF_FUNCTION::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2  CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_IF_FUNCTION
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_IF_FUNCTION
               |newline INDENTACION2 BLOQUE_RETURN CONTENIDO_IF_FUNCTION
               |BLOQUE_COMENTARIOS CONTENIDO_IF_FUNCTION
               ;


BLOQUE_IF::=If espacio EXP_CONDICIONALES espacio then  CONTENIDO_IF end espacio If
            |If espacio EXP_CONDICIONALES espacio then  CONTENIDO_IF Else INDENTACION2 CONTENIDO_IF end espacio If
            ;

BLOQUE_IF_FUNCTION::=If espacio EXP_CONDICIONALES espacio then  INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If
            |If espacio EXP_CONDICIONALES espacio then INDENTACION2 CONTENIDO_IF_FUNCTION Else INDENTACION2 CONTENIDO_IF_FUNCTION end espacio If
            ;


EXP_CONDICIONALES::=VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES
                    |VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES 
                    |not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES
                    |VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES
                    |not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES 
                    |VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES
                    |VALORES_CONDICIONALES espacio asignacion espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES
                    |not espacio VALORES_CONDICIONALES espacio oprel espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES
                    |VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES
                    |not espacio VALORES_CONDICIONALES espacio oprel espacio not espacio VALORES_CONDICIONALES oplog EXP_CONDICIONALES
                    ;


VALORES_CONDICIONALES::=identificador
          |truefalse
          |numero
          |cadena
          |identificador punto identificador
          |abrirparentesis EXP_CONDICIONALES cerrarparentesis
          ;

BLOQUE_ASIGNACION::=identificador:id espacio asignacion espacio EXP:e {:RESULT = new declaracion_asignacion(new identificador(id), "=", e); :}
               |identificador:id punto identificador:id2 espacio asignacion espacio EXP:e  {:RESULT = new declaracion_asignacion(new identificador(id+"."+id2), "=", e); :}
               ;

BLOQUE_FOR::=For espacio identificador espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR next
             |For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR  to espacio EXP CONTENIDO_FOR next
             ;


BLOQUE_FOR_FUNCTION::=For espacio identificador espacio asignacion espacio EXP_FOR  to espacio EXP  CONTENIDO_FOR_FUNCTION next
             |For espacio identificador espacio as espacio TIPOS espacio asignacion espacio EXP_FOR to espacio EXP CONTENIDO_FOR_FUNCTION next
             ;

CONTENIDO_FOR::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_FOR
               |newline INDENTACION2 BLOQUE_IF INDENTACION2  CONTENIDO_FOR
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_FOR
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR
               |newline INDENTACION2 BLOQUE_WHILE INDENTACION2 CONTENIDO_FOR
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_FOR
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR
               |BLOQUE_COMENTARIOS CONTENIDO_FOR
               ;
CONTENIDO_FOR_FUNCTION::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2  CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 BLOQUE_WHILE_FUNCTION INDENTACION2 CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_FOR_FUNCTION
               |newline INDENTACION2 BLOQUE_RETURN CONTENIDO_FOR_FUNCTION
               |BLOQUE_COMENTARIOS CONTENIDO_FOR_FUNCTION
               ;

BLOQUE_WHILE::=Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE loop
             ;


BLOQUE_WHILE_FUNCTION::=Do espacio While espacio EXP_CONDICIONALES INDENTACION2 CONTENIDO_WHILE_FUNCTION loop
             ;

CONTENIDO_WHILE::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_WHILE
               |newline INDENTACION2 BLOQUE_IF INDENTACION2  CONTENIDO_WHILE
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2   CONTENIDO_WHILE
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2  CONTENIDO_WHILE
               |newline INDENTACION2 BLOQUE_FOR INDENTACION2  CONTENIDO_WHILE
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_WHILE
               |newline INDENTACION2 BLOQUE_ASIGNACION  CONTENIDO_WHILE
               |BLOQUE_COMENTARIOS CONTENIDO_WHILE
               ;
CONTENIDO_WHILE_FUNCTION::=newline INDENTACION2 BLOQUE_LECTURA INDENTACION2  CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 BLOQUE_IF_FUNCTION INDENTACION2  CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 DECLARACION_VARIABLE INDENTACION2  CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 BLOQUE_ESCRITURA INDENTACION2 CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 BLOQUE_FOR_FUNCTION INDENTACION2 CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2
               |newline INDENTACION2 CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 BLOQUE_ASIGNACION CONTENIDO_WHILE_FUNCTION
               |newline INDENTACION2 BLOQUE_RETURN CONTENIDO_WHILE_FUNCTION
               |BLOQUE_COMENTARIOS CONTENIDO_WHILE_FUNCTION
               ;


BLOQUE_ESTRUCTURA::=type espacio identificador:id INDENTACION2 CONTENIDO_ESTRUCTURA:ce end espacio type {:RESULT = ce; RESULT.setIdentificador(new identificador(id)); :}
                    ;

CONTENIDO_ESTRUCTURA::=newline INDENTACION2 DECLARACION_VARIABLE_ESTRUCTURA:dve INDENTACION2 CONTENIDO_ESTRUCTURA:ce {:RESULT = ce; RESULT.addDeclaracionVar(dve);:}
               |newline INDENTACION2 {:RESULT = new bloque_type();:}
               |newline INDENTACION2 CONTENIDO_ESTRUCTURA:ce {:RESULT = ce;:} 
               |BLOQUE_COMENTARIOS:bc CONTENIDO_ESTRUCTURA:ce {:RESULT = ce; RESULT.addDeclaracion(bc);:}
               ;
DECLARACION_VARIABLE_ESTRUCTURA::=identificador:id espacio as espacio TIPOS:t {:RESULT = new declaracion_var_estructura(new identificador(id), t);:}
                                 ;

BLOQUE_LECTURA::=console punto read abrirparentesis cerrarparentesis
                 ;

BLOQUE_ESCRITURA::=console  punto write abrirparentesis VALORES cerrarparentesis
                 ;

BLOQUE_COMENTARIOS::=comentario:c {:RESULT = new declaracion_comentario(c);:}
                     ;






